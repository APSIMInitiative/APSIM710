<folder version="17" name="simulations">
  <simulation name="Rotation Sample (Directed Graph)">
    <clock>
      <start_date name="start_date" description="Enter the start date of the simulation" type="date" lbound="1/01/1940" ubound="31/12/1989">1/01/1940</start_date>
      <end_date name="end_date" description="Enter the end date of the simulation" type="date" lbound="1/01/1940" ubound="31/12/1989">31/12/1950</end_date>
    </clock>
    <summaryfile />
    <metfile name="met">
      <filename name="filename">%apsim%/Examples/MetFiles/Goond.met</filename>
    </metfile>
    <area name="Paddock">
      <registrations name="global" />
      <soil name="Soil">
        <Site>Kupunn</Site>
        <Region>South East Queensland</Region>
        <LocalName>Brigalow</LocalName>
        <SoilType>Grey Vertosol</SoilType>
        <NearestTown>Dalby, Q 4405</NearestTown>
        <NaturalVegetation>Brigalow, belah, wilga</NaturalVegetation>
        <profile>
          <layer>
            <thickness>150</thickness>
            <bd>1.4</bd>
            <ll15>0.21</ll15>
            <airdry>0.105</airdry>
            <dul>0.39</dul>
            <sat>0.44</sat>
            <sw>9999.99</sw>
            <swcon>0.3</swcon>
            <fbiom>0.03</fbiom>
            <finert>0.4</finert>
            <no3>6.5</no3>
            <nh4>0.6</nh4>
            <oc>1.24</oc>
            <ph>7</ph>
            <ll name="Chickpea">0.21</ll>
            <kl name="Chickpea">0.1</kl>
            <xf name="Chickpea">1</xf>
            <ll name="Cotton">0.21</ll>
            <kl name="Cotton">0.1</kl>
            <xf name="Cotton">1</xf>
            <ll name="Sorghum">0.21</ll>
            <kl name="Sorghum">0.1</kl>
            <xf name="Sorghum">1</xf>
            <ll name="Wheat">0.21</ll>
            <kl name="Wheat">0.1</kl>
            <xf name="Wheat">1</xf>
          </layer>
          <layer>
            <thickness>150</thickness>
            <bd>1.39</bd>
            <ll15>0.21</ll15>
            <airdry>0.189</airdry>
            <dul>0.39</dul>
            <sat>0.44</sat>
            <sw>9999.99</sw>
            <swcon>0.3</swcon>
            <fbiom>0.02</fbiom>
            <finert>0.6</finert>
            <no3>2.1</no3>
            <nh4>0.1</nh4>
            <oc>1.24</oc>
            <ph>7</ph>
            <ll name="Chickpea">0.21</ll>
            <kl name="Chickpea">0.1</kl>
            <xf name="Chickpea">1</xf>
            <ll name="Cotton">0.21</ll>
            <kl name="Cotton">0.1</kl>
            <xf name="Cotton">1</xf>
            <ll name="Sorghum">0.21</ll>
            <kl name="Sorghum">0.1</kl>
            <xf name="Sorghum">1</xf>
            <ll name="Wheat">0.21</ll>
            <kl name="Wheat">0.1</kl>
            <xf name="Wheat">1</xf>
          </layer>
          <layer>
            <thickness>300</thickness>
            <bd>1.37</bd>
            <ll15>0.22</ll15>
            <airdry>0.22</airdry>
            <dul>0.4</dul>
            <sat>0.45</sat>
            <sw>9999.99</sw>
            <swcon>0.3</swcon>
            <fbiom>0.01</fbiom>
            <finert>0.8</finert>
            <no3>2.1</no3>
            <nh4>0.1</nh4>
            <oc>1.25</oc>
            <ph>7</ph>
            <ll name="Chickpea">0.22</ll>
            <kl name="Chickpea">0.08</kl>
            <xf name="Chickpea">1</xf>
            <ll name="Cotton">0.22</ll>
            <kl name="Cotton">0.1</kl>
            <xf name="Cotton">1</xf>
            <ll name="Sorghum">0.26</ll>
            <kl name="Sorghum">0.1</kl>
            <xf name="Sorghum">1</xf>
            <ll name="Wheat">0.25</ll>
            <kl name="Wheat">0.08</kl>
            <xf name="Wheat">1</xf>
          </layer>
          <layer>
            <thickness>300</thickness>
            <bd>1.36</bd>
            <ll15>0.25</ll15>
            <airdry>0.25</airdry>
            <dul>0.41</dul>
            <sat>0.46</sat>
            <sw>9999.99</sw>
            <swcon>0.3</swcon>
            <fbiom>0.01</fbiom>
            <finert>0.9</finert>
            <no3>1.7</no3>
            <nh4>0.1</nh4>
            <oc>1.1</oc>
            <ph>7</ph>
            <ll name="Chickpea">0.27</ll>
            <kl name="Chickpea">0.06</kl>
            <xf name="Chickpea">1</xf>
            <ll name="Cotton">0.25</ll>
            <kl name="Cotton">0.1</kl>
            <xf name="Cotton">1</xf>
            <ll name="Sorghum">0.26</ll>
            <kl name="Sorghum">0.08</kl>
            <xf name="Sorghum">1</xf>
            <ll name="Wheat">0.28</ll>
            <kl name="Wheat">0.06</kl>
            <xf name="Wheat">1</xf>
          </layer>
          <layer>
            <thickness>300</thickness>
            <bd>1.38</bd>
            <ll15>0.27</ll15>
            <airdry>0.27</airdry>
            <dul>0.4</dul>
            <sat>0.45</sat>
            <sw>9999.99</sw>
            <swcon>0.3</swcon>
            <fbiom>0.01</fbiom>
            <finert>0.95</finert>
            <no3>1.7</no3>
            <nh4>0.1</nh4>
            <oc>0.71</oc>
            <ph>7</ph>
            <ll name="Chickpea">0.29</ll>
            <kl name="Chickpea">0.04</kl>
            <xf name="Chickpea">1</xf>
            <ll name="Cotton">0.27</ll>
            <kl name="Cotton">0.09</kl>
            <xf name="Cotton">1</xf>
            <ll name="Sorghum">0.28</ll>
            <kl name="Sorghum">0.06</kl>
            <xf name="Sorghum">1</xf>
            <ll name="Wheat">0.31</ll>
            <kl name="Wheat">0.04</kl>
            <xf name="Wheat">1</xf>
          </layer>
          <layer>
            <thickness>300</thickness>
            <bd>1.39</bd>
            <ll15>0.31</ll15>
            <airdry>0.31</airdry>
            <dul>0.39</dul>
            <sat>0.44</sat>
            <sw>9999.99</sw>
            <swcon>0.3</swcon>
            <fbiom>0.01</fbiom>
            <finert>0.95</finert>
            <no3>1.7</no3>
            <nh4>0.1</nh4>
            <oc>0.34</oc>
            <ph>7</ph>
            <ll name="Chickpea">0.34</ll>
            <kl name="Chickpea">0.02</kl>
            <xf name="Chickpea">1</xf>
            <ll name="Cotton">0.31</ll>
            <kl name="Cotton">0.07</kl>
            <xf name="Cotton">1</xf>
            <ll name="Sorghum">0.34</ll>
            <kl name="Sorghum">0.04</kl>
            <xf name="Sorghum">1</xf>
            <ll name="Wheat">0.37</ll>
            <kl name="Wheat">0.02</kl>
            <xf name="Wheat">1</xf>
          </layer>
          <layer>
            <thickness>300</thickness>
            <bd>1.42</bd>
            <ll15>0.36</ll15>
            <airdry>0.36</airdry>
            <dul>0.38</dul>
            <sat>0.43</sat>
            <sw>9999.99</sw>
            <swcon>0.3</swcon>
            <fbiom>0.01</fbiom>
            <finert>0.95</finert>
            <no3>1.7</no3>
            <nh4>0.1</nh4>
            <oc>0.26</oc>
            <ph>7</ph>
            <ll name="Chickpea">0.38</ll>
            <kl name="Chickpea">0.01</kl>
            <xf name="Chickpea">1</xf>
            <ll name="Cotton">0.36</ll>
            <kl name="Cotton">0.05</kl>
            <xf name="Cotton">1</xf>
            <ll name="Sorghum">0.36</ll>
            <kl name="Sorghum">0.02</kl>
            <xf name="Sorghum">1</xf>
            <ll name="Wheat">0.38</ll>
            <kl name="Wheat">0.01</kl>
            <xf name="Wheat">1</xf>
          </layer>
        </profile>
        <Cona>3.5</Cona>
        <DiffusConst>40</DiffusConst>
        <DiffusSlope>16</DiffusSlope>
        <U>6</U>
        <Salb>0.13</Salb>
        <Cn2Bare>73</Cn2Bare>
        <CnRed>20</CnRed>
        <CnCov>0.8</CnCov>
        <CnCanopyFact>1</CnCanopyFact>
        <RootCn>40</RootCn>
        <RootWt>200</RootWt>
        <SoilCn>12.5</SoilCn>
        <EnrACoeff>7.4</EnrACoeff>
        <EnrBCoeff>0.2</EnrBCoeff>
        <Comment>oc and ph not measured</Comment>
        <InitWater>
          <percentmethod>

            <percent>1</percent>
            <distributed>filled from top</distributed>
          </percentmethod>
        </InitWater>
        <InitNitrogen>
          <profile>
            <layer>
              <no3>6.500</no3>
              <nh4>0.600</nh4>
              <thickness>150</thickness>
            </layer>
            <layer>
              <no3>2.100</no3>
              <nh4>0.100</nh4>
              <thickness>150</thickness>
            </layer>
            <layer>
              <no3>2.100</no3>
              <nh4>0.100</nh4>
              <thickness>300</thickness>
            </layer>
            <layer>
              <no3>1.700</no3>
              <nh4>0.100</nh4>
              <thickness>300</thickness>
            </layer>
            <layer>
              <no3>1.700</no3>
              <nh4>0.100</nh4>
              <thickness>300</thickness>
            </layer>
            <layer>
              <no3>1.700</no3>
              <nh4>0.100</nh4>
              <thickness>300</thickness>
            </layer>
            <layer>
              <no3>1.700</no3>
              <nh4>0.100</nh4>
              <thickness>300</thickness>
            </layer>
          </profile>
        </InitNitrogen>
      </soil>
      <fertiliser />
      <chickpea />
      <cotton />
      <wheat />
      <tclmanager name="Manager">
        <tclui name="Rotation Initialisation">
          <rule name="Rotation Sample (Directed Graph) Rotation Initialisation.out - Rotation Initialisation UI1" condition="init" invisible="yes">source $apsuite/UserInterface/APSFarm/RotationInitialisation.tcl
set state "WinterFallow"
</rule>
          <rule name="Rotation Sample (Directed Graph) Rotation Initialisation.out - Rotation Initialisation UI2" condition="process" invisible="yes">checkSetup
doProcess
</rule>
          <rule name="Rotation Sample (Directed Graph) Rotation Initialisation.out - Rotation Initialisation UI3" condition="exit" invisible="yes">exit
</rule>
          <uiscript>source $apsuite/UserInterface/APSFarm/RotationInitialisationUI.tcl</uiscript>
          <initialState>WinterFallow</initialState>
          <simpleLogging>0</simpleLogging>
        </tclui>
        <tclui name="Rotation Management">
          <uiscript><![CDATA[source $apsuite/UserInterface/APSFarm/RotationsUI.tcl]]></uiscript>
          <canvas_height>496</canvas_height>
          <rules_height>40</rules_height>
          <graph_name>stateGraph</graph_name>
          <node>
            <x1>238.0</x1>
            <name>SummerFallow2</name>
            <y1>325.0</y1>
            <x2>338.0</x2>
            <desc>New state</desc>
            <fill>gray</fill>
            <y2>425.0</y2>
          </node>
          <node>
            <x1>560.0</x1>
            <name>Chickpea</name>
            <y1>21.0</y1>
            <x2>660.0</x2>
            <desc>Chickpea</desc>
            <fill>lightgreen</fill>
            <y2>121.0</y2>
          </node>
          <node>
            <x1>445.0</x1>
            <name>Wheat</name>
            <y1>326.0</y1>
            <x2>545.0</x2>
            <desc>Wheat Crop</desc>
            <fill>darkgreen</fill>
            <y2>426.0</y2>
          </node>
          <node>
            <x1>180.0</x1>
            <name>WinterFallow</name>
            <y1>192.0</y1>
            <x2>280.0</x2>
            <desc>New state</desc>
            <fill>gray</fill>
            <y2>292.0</y2>
          </node>
          <node>
            <x1>508.0</x1>
            <name>SummerFallow1</name>
            <y1>195.0</y1>
            <x2>608.0</x2>
            <desc>New state</desc>
            <fill>maroon</fill>
            <y2>295.0</y2>
          </node>
          <node>
            <x1>368.0</x1>
            <name>F1</name>
            <y1>4.0</y1>
            <x2>468.0</x2>
            <desc>New state</desc>
            <fill>gray</fill>
            <y2>104.0</y2>
          </node>
          <node>
            <x1>204.0</x1>
            <name>Cotton</name>
            <y1>32.0</y1>
            <x2>304.0</x2>
            <desc>A Cotton Crop</desc>
            <fill>purple</fill>
            <y2>132.0</y2>
          </node>
          <arc>
            <name>arc2</name>
            <source>SummerFallow1</source>
            <target>WinterFallow</target>
            <x>388.5</x>
            <y>362.0</y>
            <rules>[apsimGet day]  == 192</rules>
            <rules />
            <actions />
          </arc>
          <arc>
            <name>arc6</name>
            <source>WinterFallow</source>
            <target>Cotton</target>
            <x>197.5</x>
            <actions>sow_cotton</actions>
            <y>155.5</y>
            <rules>[canPlant_cotton]</rules>
            <rules />
            <actions />
          </arc>
          <arc>
            <name>arc3</name>
            <source>Wheat</source>
            <target>SummerFallow2</target>
            <x>394.0</x>
            <actions>apsimSendMessage wheat harvest</actions>
            <actions>apsimSendMessage wheat end_crop</actions>
            <y>416.5</y>
            <rules>{[apsimGet wheat.stageName] == "harvest_ripe" || [apsimGet wheat.plant_status] == "dead"}</rules>
            <rules />
            <actions />
          </arc>
          <arc>
            <name>arc7</name>
            <source>F1</source>
            <target>SummerFallow1</target>
            <x>542.5</x>
            <y>78.0</y>
            <rules>[apsimGet day]  == 192</rules>
            <rules />
            <actions />
          </arc>
          <arc>
            <name>arc0</name>
            <source>F1</source>
            <target>Chickpea</target>
            <x>500.0</x>
            <actions>sow_chickpea</actions>
            <y>29.0</y>
            <rules>[canPlant_chickpea]</rules>
            <rules />
            <actions />
          </arc>
          <arc>
            <name>arc8</name>
            <source>Chickpea</source>
            <target>SummerFallow1</target>
            <x>633.0</x>
            <actions>apsimSendMessage chickpea harvest</actions>
            <actions>apsimSendMessage chickpea end_crop</actions>
            <y>162.5</y>
            <rules>{[apsimGet chickpea.stageName] == "harvest_ripe" || [apsimGet chickpea.plant_status] == "dead"}</rules>
            <rules />
            <actions />
          </arc>
          <arc>
            <name>arc1</name>
            <source>SummerFallow1</source>
            <target>Wheat</target>
            <x>550.5</x>
            <actions>sow_wheat</actions>
            <y>321.5</y>
            <rules>[canPlant_wheat]</rules>
            <rules />
            <actions />
          </arc>
          <arc>
            <name>arc5</name>
            <source>Cotton</source>
            <target>F1</target>
            <x>326.5</x>
            <actions>apsimSendMessage cotton harvest</actions>
            <y>37.5</y>
            <rules>[apsimGet ozcot_status] &gt; 0</rules>
            <rules />
            <actions />
          </arc>
          <arc>
            <name>arc9</name>
            <source>SummerFallow2</source>
            <target>WinterFallow</target>
            <x>244.0</x>
            <y>319.5</y>
            <rules>[apsimGet day]  == 74</rules>
            <rules />
            <actions />
          </arc>
          <paddock>
            <name>toplevel</name>
            <isManaged>0</isManaged>
            <initialState>
            </initialState>
          </paddock>
          <paddock>
            <name>Paddock</name>
            <isManaged>0</isManaged>
            <initialState>
            </initialState>
          </paddock>
          <rule name="Rotation Management Init rule" invisible="yes" condition="init"><![CDATA[package require struct
::struct::graph stateGraph
stateGraph node insert "SummerFallow2"
set colour(SummerFallow2) "gray"
stateGraph node insert "Chickpea"
set colour(Chickpea) "lightgreen"
stateGraph node insert "Wheat"
set colour(Wheat) "darkgreen"
stateGraph node insert "WinterFallow"
set colour(WinterFallow) "gray"
stateGraph node insert "SummerFallow1"
set colour(SummerFallow1) "maroon"
stateGraph node insert "F1"
set colour(F1) "gray"
stateGraph node insert "Cotton"
set colour(Cotton) "purple"
stateGraph arc insert "SummerFallow1" "WinterFallow" "arc2"
stateGraph arc lappend "arc2" rules {[apsimGet day]  == 192}
stateGraph arc lappend "arc2" actions {}
stateGraph arc insert "WinterFallow" "Cotton" "arc6"
stateGraph arc lappend "arc6" actions {sow_cotton}
stateGraph arc lappend "arc6" rules {[canPlant_cotton]}
stateGraph arc lappend "arc6" actions {}
stateGraph arc insert "Wheat" "SummerFallow2" "arc3"
stateGraph arc lappend "arc3" actions {apsimSendMessage wheat harvest}
stateGraph arc lappend "arc3" actions {apsimSendMessage wheat end_crop}
stateGraph arc lappend "arc3" rules {{[apsimGet wheat.stageName] == "harvest_ripe" || [apsimGet wheat.plant_status] == "dead"}}
stateGraph arc lappend "arc3" actions {}
stateGraph arc insert "F1" "SummerFallow1" "arc7"
stateGraph arc lappend "arc7" rules {[apsimGet day]  == 192}
stateGraph arc lappend "arc7" actions {}
stateGraph arc insert "F1" "Chickpea" "arc0"
stateGraph arc lappend "arc0" actions {sow_chickpea}
stateGraph arc lappend "arc0" rules {[canPlant_chickpea]}
stateGraph arc lappend "arc0" actions {}
stateGraph arc insert "Chickpea" "SummerFallow1" "arc8"
stateGraph arc lappend "arc8" actions {apsimSendMessage chickpea harvest}
stateGraph arc lappend "arc8" actions {apsimSendMessage chickpea end_crop}
stateGraph arc lappend "arc8" rules {{[apsimGet chickpea.stageName] == "harvest_ripe" || [apsimGet chickpea.plant_status] == "dead"}}
stateGraph arc lappend "arc8" actions {}
stateGraph arc insert "SummerFallow1" "Wheat" "arc1"
stateGraph arc lappend "arc1" actions {sow_wheat}
stateGraph arc lappend "arc1" rules {[canPlant_wheat]}
stateGraph arc lappend "arc1" actions {}
stateGraph arc insert "Cotton" "F1" "arc5"
stateGraph arc lappend "arc5" actions {apsimSendMessage cotton harvest}
stateGraph arc lappend "arc5" rules {[apsimGet ozcot_status] > 0}
stateGraph arc lappend "arc5" actions {}
stateGraph arc insert "SummerFallow2" "WinterFallow" "arc9"
stateGraph arc lappend "arc9" rules {[apsimGet day]  == 74}
stateGraph arc lappend "arc9" actions {}
]]></rule>
        </tclui>
        <tclui name="Cotton Sowing Rule">
          <rule name="Rotation Sample (Directed Graph) Cotton Sowing Rule.out - Sowing rule - initialisation" condition="init" invisible="yes">
# Support procedures
# Can we plant a crop today?
proc canPlant_cotton {} {
  if {"variable" == "variable"} {
     set year [apsimGet year]; set day [apsimGet day]
     set d1 [clock format [clock scan "15-oct-$year"] -format %j]
     set d2 [clock format [clock scan "15-dec-$year"] -format %j]

     if {"yes" == "yes" &amp;&amp; $day == $d2} {return 1}

     if {$d1 &gt; $d2} {
        set dateOK [expr $day &gt;= $d1 || $day &lt;= $d2]
     } else {
        set dateOK [expr $day &gt;= $d1 &amp;&amp; $day &lt;= $d2]
     }
     set rainOK [expr [apsimGet rain\[3\]] &gt;= 10]
     set eswOK [expr [apsimGet esw] &gt;= 100]
     return [expr $dateOK &amp;&amp; $rainOK &amp;&amp; $eswOK]
  } elseif {"variable" == "fixed"} {
     set year [apsimGet year]; set day [apsimGet day]
     set d1 [clock format [clock scan "15-oct-$year"] -format %j]
     return [expr $day == $d1]
  } else {
     error "Unknown sowing criteria \"variable\"."
  }
  return "notreached"
}

# Plant a crop now
proc sow_cotton {} {
  if {"ozcot" == "plant"} {
     apsimSendMessage cotton sow {plants 100} {sowing_depth 30} \
             {cultivar Siok} {row_spacing 1000} \
             {skipplant 0} {skiprow 0} {crop_class plant}
  } elseif {"ozcot" == "cropmod"} {
     apsimSendMessage cotton sow {plants [density]} {sowing_depth [depth]} \
             {cultivar Siok} {row_spacing 1000} {skiprow 0}
  } elseif {"ozcot" == "growth"} {
     apsimSendMessage cotton ???
  } elseif {"ozcot" == "ozcot"} {
     apsimSendMessage cotton sow {plants_pm 10} {sowing_depth 30} \
             {row_spacing 1000} {skiprow 0} {cultivar Siok}
  } elseif {"ozcot" == "oryza"} {
     apsimSendMessage cotton sow {cultivar Siok}
  } elseif {"ozcot" == "sorghum"} {
     apsimSendMessage cotton sow {plants 100} {sowing_depth 30} \
             {cultivar Siok} {row_spacing 1000} {skiprow 0} \
             {tiller_no_fertile [tiller_no_fertile]}
  } elseif {"ozcot" == "sugar"} {
     apsimSendMessage cotton sow {plants 100} {cultivar Siok} {sowing_depth 30}
  } else {
    error "Unknown crop module \"ozcot\"."
  }
}







</rule>
          <ruletemplate name="Sowing rule - initialisation" condition="init">
# Support procedures
# Can we plant a crop today?
proc canPlant_[crop] {} {
  if {"[criteria]" == "variable"} {
     set year [apsimGet year]; set day [apsimGet day]
     set d1 [clock format [clock scan "[date1]-$year"] -format %j]
     set d2 [clock format [clock scan "[date2]-$year"] -format %j]

     if {"[must_sow]" == "yes" &amp;&amp; $day == $d2} {return 1}

     if {$d1 &gt; $d2} {
        set dateOK [expr $day &gt;= $d1 || $day &lt;= $d2]
     } else {
        set dateOK [expr $day &gt;= $d1 &amp;&amp; $day &lt;= $d2]
     }
     set rainOK [expr [apsimGet rain\[[rainnumdays]\]] &gt;= [raincrit]]
     set eswOK [expr [apsimGet esw] &gt;= [esw_amount]]
     return [expr $dateOK &amp;&amp; $rainOK &amp;&amp; $eswOK]
  } elseif {"[criteria]" == "fixed"} {
     set year [apsimGet year]; set day [apsimGet day]
     set d1 [clock format [clock scan "[date1]-$year"] -format %j]
     return [expr $day == $d1]
  } else {
     error "Unknown sowing criteria \"[criteria]\"."
  }
  return "notreached"
}

# Plant a crop now
proc sow_[crop] {} {
  if {"[module]" == "plant"} {
     apsimSendMessage [crop] sow {plants [plants]} {sowing_depth [sowing_depth]} \
             {cultivar [cultivar]} {row_spacing [row_spacing]} \
             {skipplant [skipplant]} {skiprow [skiprow]} {crop_class [class]}
  } elseif {"[module]" == "cropmod"} {
     apsimSendMessage [crop] sow {plants [density]} {sowing_depth [depth]} \
             {cultivar [cultivar]} {row_spacing [row_spacing]} {skiprow [skiprow]}
  } elseif {"[module]" == "growth"} {
     apsimSendMessage [crop] ???
  } elseif {"[module]" == "ozcot"} {
     apsimSendMessage [crop] sow {plants_pm [plants_pm]} {sowing_depth [sowing_depth]} \
             {row_spacing [row_spacing]} {skiprow [skiprow]} {cultivar [cultivar]}
  } elseif {"[module]" == "oryza"} {
     apsimSendMessage [crop] sow {cultivar [cultivar]}
  } elseif {"[module]" == "sorghum"} {
     apsimSendMessage [crop] sow {plants [plants]} {sowing_depth [sowing_depth]} \
             {cultivar [cultivar]} {row_spacing [row_spacing]} {skiprow [skiprow]} \
             {tiller_no_fertile [tiller_no_fertile]}
  } elseif {"[module]" == "sugar"} {
     apsimSendMessage [crop] sow {plants [plants]} {cultivar [cultivar]} {sowing_depth [sowing_depth]}
  } else {
    error "Unknown crop module \"[module]\"."
  }
}







</ruletemplate>
          <uiscript>source $apsuite/UserInterface/APSFarm/GenericSowingUI.tcl</uiscript>
          <state>Cotton</state>
          <crop>cotton</crop>
          <date1>15-oct</date1>
          <date2>15-dec</date2>
          <raincrit>10</raincrit>
          <rainnumdays>3</rainnumdays>
          <esw_amount>100</esw_amount>
          <must_sow>yes</must_sow>
          <cultivar>Siok</cultivar>
          <plants>100</plants>
          <sowing_depth>30</sowing_depth>
          <row_spacing>1000</row_spacing>
          <sowing_costs>
          </sowing_costs>
          <sow_tractor>
          </sow_tractor>
          <sow_implement>
          </sow_implement>
          <fert_type>
          </fert_type>
          <fert_cost>???</fert_cost>
          <target_n>
          </target_n>
          <harvest_costs>
          </harvest_costs>
          <price>
          </price>
          <moisture>
          </moisture>
          <harv_tractor>
          </harv_tractor>
          <harv_implement>
          </harv_implement>
          <criteria>variable</criteria>
          <plants_pm>10</plants_pm>
          <skiprow>0</skiprow>
          <module>ozcot</module>
          <skipplant>0</skipplant>
          <class>plant</class>
        </tclui>
        <tclui name="Chickpea Sowing Rule">
          <rule name="Rotation Sample (Directed Graph) Chickpea Sowing Rule.out - Sowing rule - initialisation" condition="init" invisible="yes">
# Support procedures
# Can we plant a crop today?
proc canPlant_chickpea {} {
  if {"variable" == "variable"} {
     set year [apsimGet year]; set day [apsimGet day]
     set d1 [clock format [clock scan "15-may-$year"] -format %j]
     set d2 [clock format [clock scan "10-jul-$year"] -format %j]

     if {"no" == "yes" &amp;&amp; $day == $d2} {return 1}

     if {$d1 &gt; $d2} {
        set dateOK [expr $day &gt;= $d1 || $day &lt;= $d2]
     } else {
        set dateOK [expr $day &gt;= $d1 &amp;&amp; $day &lt;= $d2]
     }
     set rainOK [expr [apsimGet rain\[3\]] &gt;= 15]
     set eswOK [expr [apsimGet esw] &gt;= 50]
     return [expr $dateOK &amp;&amp; $rainOK &amp;&amp; $eswOK]
  } elseif {"variable" == "fixed"} {
     set year [apsimGet year]; set day [apsimGet day]
     set d1 [clock format [clock scan "15-may-$year"] -format %j]
     return [expr $day == $d1]
  } else {
     error "Unknown sowing criteria \"variable\"."
  }
  return "notreached"
}

# Plant a crop now
proc sow_chickpea {} {
  if {"plant" == "plant"} {
     apsimSendMessage chickpea sow {plants 25} {sowing_depth 30} \
             {cultivar amethyst} {row_spacing 500} \
             {skipplant 0} {skiprow 0} {crop_class plant}
  } elseif {"plant" == "cropmod"} {
     apsimSendMessage chickpea sow {plants [density]} {sowing_depth [depth]} \
             {cultivar amethyst} {row_spacing 500} {skiprow 0}
  } elseif {"plant" == "growth"} {
     apsimSendMessage chickpea ???
  } elseif {"plant" == "ozcot"} {
     apsimSendMessage chickpea sow {plants_pm } {sowing_depth 30} \
             {row_spacing 500} {skiprow 0} {cultivar amethyst}
  } elseif {"plant" == "oryza"} {
     apsimSendMessage chickpea sow {cultivar amethyst}
  } elseif {"plant" == "sorghum"} {
     apsimSendMessage chickpea sow {plants 25} {sowing_depth 30} \
             {cultivar amethyst} {row_spacing 500} {skiprow 0} \
             {tiller_no_fertile [tiller_no_fertile]}
  } elseif {"plant" == "sugar"} {
     apsimSendMessage chickpea sow {plants 25} {cultivar amethyst} {sowing_depth 30}
  } else {
    error "Unknown crop module \"plant\"."
  }
}






</rule>
          <ruletemplate name="Sowing rule - initialisation" condition="init">
# Support procedures
# Can we plant a crop today?
proc canPlant_[crop] {} {
  if {"[criteria]" == "variable"} {
     set year [apsimGet year]; set day [apsimGet day]
     set d1 [clock format [clock scan "[date1]-$year"] -format %j]
     set d2 [clock format [clock scan "[date2]-$year"] -format %j]

     if {"[must_sow]" == "yes" &amp;&amp; $day == $d2} {return 1}

     if {$d1 &gt; $d2} {
        set dateOK [expr $day &gt;= $d1 || $day &lt;= $d2]
     } else {
        set dateOK [expr $day &gt;= $d1 &amp;&amp; $day &lt;= $d2]
     }
     set rainOK [expr [apsimGet rain\[[rainnumdays]\]] &gt;= [raincrit]]
     set eswOK [expr [apsimGet esw] &gt;= [esw_amount]]
     return [expr $dateOK &amp;&amp; $rainOK &amp;&amp; $eswOK]
  } elseif {"[criteria]" == "fixed"} {
     set year [apsimGet year]; set day [apsimGet day]
     set d1 [clock format [clock scan "[date1]-$year"] -format %j]
     return [expr $day == $d1]
  } else {
     error "Unknown sowing criteria \"[criteria]\"."
  }
  return "notreached"
}

# Plant a crop now
proc sow_[crop] {} {
  if {"[module]" == "plant"} {
     apsimSendMessage [crop] sow {plants [plants]} {sowing_depth [sowing_depth]} \
             {cultivar [cultivar]} {row_spacing [row_spacing]} \
             {skipplant [skipplant]} {skiprow [skiprow]} {crop_class [class]}
  } elseif {"[module]" == "cropmod"} {
     apsimSendMessage [crop] sow {plants [density]} {sowing_depth [depth]} \
             {cultivar [cultivar]} {row_spacing [row_spacing]} {skiprow [skiprow]}
  } elseif {"[module]" == "growth"} {
     apsimSendMessage [crop] ???
  } elseif {"[module]" == "ozcot"} {
     apsimSendMessage [crop] sow {plants_pm [plants_pm]} {sowing_depth [sowing_depth]} \
             {row_spacing [row_spacing]} {skiprow [skiprow]} {cultivar [cultivar]}
  } elseif {"[module]" == "oryza"} {
     apsimSendMessage [crop] sow {cultivar [cultivar]}
  } elseif {"[module]" == "sorghum"} {
     apsimSendMessage [crop] sow {plants [plants]} {sowing_depth [sowing_depth]} \
             {cultivar [cultivar]} {row_spacing [row_spacing]} {skiprow [skiprow]} \
             {tiller_no_fertile [tiller_no_fertile]}
  } elseif {"[module]" == "sugar"} {
     apsimSendMessage [crop] sow {plants [plants]} {cultivar [cultivar]} {sowing_depth [sowing_depth]}
  } else {
    error "Unknown crop module \"[module]\"."
  }
}






</ruletemplate>
          <uiscript>source $apsuite/UserInterface/APSFarm/GenericSowingUI.tcl</uiscript>
          <state>Chickpea</state>
          <crop>chickpea</crop>
          <date1>15-may</date1>
          <date2>10-jul</date2>
          <raincrit>15</raincrit>
          <rainnumdays>3</rainnumdays>
          <esw_amount>50</esw_amount>
          <must_sow>no</must_sow>
          <cultivar>amethyst</cultivar>
          <plants>25</plants>
          <sowing_depth>30</sowing_depth>
          <row_spacing>500</row_spacing>
          <sowing_costs>
          </sowing_costs>
          <sow_tractor>
          </sow_tractor>
          <sow_implement>
          </sow_implement>
          <fert_type>
          </fert_type>
          <fert_cost>???</fert_cost>
          <target_n>
          </target_n>
          <harvest_costs>
          </harvest_costs>
          <price>
          </price>
          <moisture>
          </moisture>
          <harv_tractor>
          </harv_tractor>
          <harv_implement>
          </harv_implement>
          <criteria>variable</criteria>
          <skipplant>0</skipplant>
          <skiprow>0</skiprow>
          <class>plant</class>
          <module>plant</module>
          <plants_pm>
          </plants_pm>
        </tclui>
        <tclui name="Wheat Sowing Rule">
          <rule name="Rotation Sample (Directed Graph) Wheat Sowing Rule.out - Sowing rule - initialisation" condition="init" invisible="yes">
# Support procedures
# Can we plant a crop today?
proc canPlant_wheat {} {
  if {"variable" == "variable"} {
     set year [apsimGet year]; set day [apsimGet day]
     set d1 [clock format [clock scan "15-may-$year"] -format %j]
     set d2 [clock format [clock scan "10-jul-$year"] -format %j]

     if {"no" == "yes" &amp;&amp; $day == $d2} {return 1}

     if {$d1 &gt; $d2} {
        set dateOK [expr $day &gt;= $d1 || $day &lt;= $d2]
     } else {
        set dateOK [expr $day &gt;= $d1 &amp;&amp; $day &lt;= $d2]
     }
     set rainOK [expr [apsimGet rain\[3\]] &gt;= 25]
     set eswOK [expr [apsimGet esw] &gt;= 50]
     return [expr $dateOK &amp;&amp; $rainOK &amp;&amp; $eswOK]
  } elseif {"variable" == "fixed"} {
     set year [apsimGet year]; set day [apsimGet day]
     set d1 [clock format [clock scan "15-may-$year"] -format %j]
     return [expr $day == $d1]
  } else {
     error "Unknown sowing criteria \"variable\"."
  }
  return "notreached"
}

# Plant a crop now
proc sow_wheat {} {
  if {"plant" == "plant"} {
     apsimSendMessage wheat sow {plants 100} {sowing_depth 30} \
             {cultivar hartog} {row_spacing 250} \
             {skipplant 0} {skiprow 0} {crop_class plant}
  } elseif {"plant" == "cropmod"} {
     apsimSendMessage wheat sow {plants [density]} {sowing_depth [depth]} \
             {cultivar hartog} {row_spacing 250} {skiprow 0}
  } elseif {"plant" == "growth"} {
     apsimSendMessage wheat ???
  } elseif {"plant" == "ozcot"} {
     apsimSendMessage wheat sow {plants_pm [plants_pm]} {sowing_depth 30} \
             {row_spacing 250} {skiprow 0} {cultivar hartog}
  } elseif {"plant" == "oryza"} {
     apsimSendMessage wheat sow {cultivar hartog}
  } elseif {"plant" == "sorghum"} {
     apsimSendMessage wheat sow {plants 100} {sowing_depth 30} \
             {cultivar hartog} {row_spacing 250} {skiprow 0} \
             {tiller_no_fertile [tiller_no_fertile]}
  } elseif {"plant" == "sugar"} {
     apsimSendMessage wheat sow {plants 100} {cultivar hartog} {sowing_depth 30}
  } else {
    error "Unknown crop module \"plant\"."
  }
}







</rule>
          <ruletemplate name="Sowing rule - initialisation" condition="init">
# Support procedures
# Can we plant a crop today?
proc canPlant_[crop] {} {
  if {"[criteria]" == "variable"} {
     set year [apsimGet year]; set day [apsimGet day]
     set d1 [clock format [clock scan "[date1]-$year"] -format %j]
     set d2 [clock format [clock scan "[date2]-$year"] -format %j]

     if {"[must_sow]" == "yes" &amp;&amp; $day == $d2} {return 1}

     if {$d1 &gt; $d2} {
        set dateOK [expr $day &gt;= $d1 || $day &lt;= $d2]
     } else {
        set dateOK [expr $day &gt;= $d1 &amp;&amp; $day &lt;= $d2]
     }
     set rainOK [expr [apsimGet rain\[[rainnumdays]\]] &gt;= [raincrit]]
     set eswOK [expr [apsimGet esw] &gt;= [esw_amount]]
     return [expr $dateOK &amp;&amp; $rainOK &amp;&amp; $eswOK]
  } elseif {"[criteria]" == "fixed"} {
     set year [apsimGet year]; set day [apsimGet day]
     set d1 [clock format [clock scan "[date1]-$year"] -format %j]
     return [expr $day == $d1]
  } else {
     error "Unknown sowing criteria \"[criteria]\"."
  }
  return "notreached"
}

# Plant a crop now
proc sow_[crop] {} {
  if {"[module]" == "plant"} {
     apsimSendMessage [crop] sow {plants [plants]} {sowing_depth [sowing_depth]} \
             {cultivar [cultivar]} {row_spacing [row_spacing]} \
             {skipplant [skipplant]} {skiprow [skiprow]} {crop_class [class]}
  } elseif {"[module]" == "cropmod"} {
     apsimSendMessage [crop] sow {plants [density]} {sowing_depth [depth]} \
             {cultivar [cultivar]} {row_spacing [row_spacing]} {skiprow [skiprow]}
  } elseif {"[module]" == "growth"} {
     apsimSendMessage [crop] ???
  } elseif {"[module]" == "ozcot"} {
     apsimSendMessage [crop] sow {plants_pm [plants_pm]} {sowing_depth [sowing_depth]} \
             {row_spacing [row_spacing]} {skiprow [skiprow]} {cultivar [cultivar]}
  } elseif {"[module]" == "oryza"} {
     apsimSendMessage [crop] sow {cultivar [cultivar]}
  } elseif {"[module]" == "sorghum"} {
     apsimSendMessage [crop] sow {plants [plants]} {sowing_depth [sowing_depth]} \
             {cultivar [cultivar]} {row_spacing [row_spacing]} {skiprow [skiprow]} \
             {tiller_no_fertile [tiller_no_fertile]}
  } elseif {"[module]" == "sugar"} {
     apsimSendMessage [crop] sow {plants [plants]} {cultivar [cultivar]} {sowing_depth [sowing_depth]}
  } else {
    error "Unknown crop module \"[module]\"."
  }
}







</ruletemplate>
          <uiscript>source $apsuite/UserInterface/APSFarm/GenericSowingUI.tcl</uiscript>
          <state>Wheat</state>
          <crop>wheat</crop>
          <date1>15-may</date1>
          <date2>10-jul</date2>
          <raincrit>25</raincrit>
          <rainnumdays>3</rainnumdays>
          <esw_amount>50</esw_amount>
          <must_sow>no</must_sow>
          <cultivar>hartog</cultivar>
          <plants>100</plants>
          <sowing_depth>30</sowing_depth>
          <row_spacing>250</row_spacing>
          <sowing_costs>
          </sowing_costs>
          <sow_tractor>
          </sow_tractor>
          <sow_implement>
          </sow_implement>
          <fert_type>
          </fert_type>
          <fert_cost>???</fert_cost>
          <target_n>
          </target_n>
          <harvest_costs>
          </harvest_costs>
          <price>
          </price>
          <moisture>
          </moisture>
          <harv_tractor>
          </harv_tractor>
          <harv_implement>
          </harv_implement>
          <criteria>variable</criteria>
          <skipplant>0</skipplant>
          <skiprow>0</skiprow>
          <class>plant</class>
          <module>plant</module>
        </tclui>
      </tclmanager>
      <outputfile>
        <variables name="Variables">
          <variable name="dd/mm/yyyy as Date" array="?" description="Date (dd/mm/yyyy)" />
          <variable name="yield" />
          <variable name="biomass" />
        </variables>
        <events name="Reporting Frequency">
          <event name="harvesting" description="" />
        </events>
      </outputfile>
    </area>
  </simulation>
</folder>
