<folder version="36" creator="Apsim 7.8-r3892" name="simulations">
  <simulation name="Rotation Sample">
    <metfile name="met">
      <filename name="filename" input="yes">%apsim%/Examples/MetFiles/Goond.met</filename>
    </metfile>
    <clock>
      <start_date name="start_date" description="Enter the start date of the simulation" type="date">1/01/1940</start_date>
      <end_date name="end_date" description="Enter the end date of the simulation" type="date">31/12/1950</end_date>
    </clock>
    <summaryfile />
    <area name="paddock">
      <cotton />
      <Soil>
        <Comment type="multiedit" description="Comments">oc and ph not measured</Comment>
        <SoilType description="Soil description">Grey Vertosol</SoilType>
        <LocalName>Brigalow</LocalName>
        <Site>Kupunn</Site>
        <NearestTown description="Nearest town">Dalby, Q 4405</NearestTown>
        <Region>South East Queensland</Region>
        <NaturalVegetation description="Natural vegetation">Brigalow, belah, wilga</NaturalVegetation>
        <InitialWater name="Initial water">
          <FractionFull>1</FractionFull>
          <PercentMethod>FilledFromTop</PercentMethod>
        </InitialWater>
        <Water>
          <SoilCrop name="Chickpea">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.21</double>
              <double>0.21</double>
              <double>0.22</double>
              <double>0.27</double>
              <double>0.29</double>
              <double>0.34</double>
              <double>0.38</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Cotton">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.21</double>
              <double>0.21</double>
              <double>0.22</double>
              <double>0.25</double>
              <double>0.27</double>
              <double>0.31</double>
              <double>0.36</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.09</double>
              <double>0.07</double>
              <double>0.05</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Sorghum">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.21</double>
              <double>0.21</double>
              <double>0.26</double>
              <double>0.26</double>
              <double>0.28</double>
              <double>0.34</double>
              <double>0.36</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Wheat">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.21</double>
              <double>0.21</double>
              <double>0.25</double>
              <double>0.28</double>
              <double>0.31</double>
              <double>0.37</double>
              <double>0.38</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <BD>
            <double>1.4</double>
            <double>1.39</double>
            <double>1.37</double>
            <double>1.36</double>
            <double>1.38</double>
            <double>1.39</double>
            <double>1.42</double>
          </BD>
          <AirDry>
            <double>0.105</double>
            <double>0.189</double>
            <double>0.22</double>
            <double>0.25</double>
            <double>0.27</double>
            <double>0.31</double>
            <double>0.36</double>
          </AirDry>
          <LL15>
            <double>0.21</double>
            <double>0.21</double>
            <double>0.22</double>
            <double>0.25</double>
            <double>0.27</double>
            <double>0.31</double>
            <double>0.36</double>
          </LL15>
          <DUL>
            <double>0.39</double>
            <double>0.39</double>
            <double>0.4</double>
            <double>0.41</double>
            <double>0.4</double>
            <double>0.39</double>
            <double>0.38</double>
          </DUL>
          <SAT>
            <double>0.44</double>
            <double>0.44</double>
            <double>0.45</double>
            <double>0.46</double>
            <double>0.45</double>
            <double>0.44</double>
            <double>0.43</double>
          </SAT>
        </Water>
        <SoilWater>
          <SummerCona>3.5</SummerCona>
          <SummerU>6</SummerU>
          <SummerDate>1-Nov</SummerDate>
          <WinterCona>3.5</WinterCona>
          <WinterU>6</WinterU>
          <WinterDate>1-Apr</WinterDate>
          <DiffusConst>40</DiffusConst>
          <DiffusSlope>16</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <SWCON>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
        </SoilWater>
        <SoilOrganicMatter>
          <RootCN>40</RootCN>
          <RootWt>200</RootWt>
          <SoilCN>12.5</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <OC>
            <double>1.24</double>
            <double>1.24</double>
            <double>1.25</double>
            <double>1.1</double>
            <double>0.71</double>
            <double>0.34</double>
            <double>0.26</double>
          </OC>
          <FBiom>
            <double>0.03</double>
            <double>0.02</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
          </FBiom>
          <FInert>
            <double>0.4</double>
            <double>0.6</double>
            <double>0.8</double>
            <double>0.9</double>
            <double>0.95</double>
            <double>0.95</double>
            <double>0.95</double>
          </FInert>
        </SoilOrganicMatter>
        <Analysis>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <PH>
            <double>7</double>
            <double>7</double>
            <double>7</double>
            <double>7</double>
            <double>7</double>
            <double>7</double>
            <double>7</double>
          </PH>
        </Analysis>
        <Sample name="Initial nitrogen">
          <Date type="date" description="Sample date:" />
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <NO3>
            <double>6.500</double>
            <double>2.100</double>
            <double>2.100</double>
            <double>1.700</double>
            <double>1.700</double>
            <double>1.700</double>
            <double>1.700</double>
          </NO3>
          <NH4>
            <double>0.600</double>
            <double>0.100</double>
            <double>0.100</double>
            <double>0.100</double>
            <double>0.100</double>
            <double>0.100</double>
            <double>0.100</double>
          </NH4>
        </Sample>
      </Soil>
      <surfaceom name="SurfaceOrganicMatter">
        <PoolName type="text" description="Organic Matter pool name">wheat_stubble</PoolName>
        <type type="list" listvalues="bambatsi,barley,base_type,broccoli,camaldulensis,canola,centro,chickpea,chikenmanure_base,cm,cmA,cmB,constants,cotton,cowpea,danthonia,fababean,fieldpea,fym,gbean,globulus,goatmanure,grandis,grass,horsegram,inert,lablab,lentil,lucerne,lupin,maize,manB,manure,medic,millet,mucuna,nativepasture,navybean,oats,orobanche,peanut,pigeonpea,potato,rice,sorghum,soybean,stylo,sugar,sunflower,sweetcorn,sweetsorghum,tillage,tithonia,vetch,weed,wheat" description="Organic Matter type">wheat</type>
        <mass type="text" description="Initial surface residue (kg/ha)">1000</mass>
        <cnr type="text" description="C:N ratio of initial residue">80</cnr>
        <standing_fraction type="text" description="Fraction of residue standing">0</standing_fraction>
      </surfaceom>
      <fertiliser />
      <chickpea />
      <wheat />
      <folder name="Manager folder">
        <rotplot name="Rotation Management">
          <canvas_height>500</canvas_height>
          <rules_height>293</rules_height>
          <graph_name>stateGraph</graph_name>
          <language>C#</language>
          <node>
            <name>chickpea</name>
            <x1>191</x1>
            <y1>319</y1>
            <desc>
            </desc>
            <fill>-8323328</fill>
          </node>
          <node>
            <name>wheat</name>
            <x1>190</x1>
            <y1>10</y1>
            <desc>
            </desc>
            <fill>-16744320</fill>
          </node>
          <node>
            <name>summer_fallow2</name>
            <x1>10</x1>
            <y1>160</y1>
            <desc>
            </desc>
            <fill>-4144960</fill>
          </node>
          <node>
            <name>summer_fallow</name>
            <x1>358</x1>
            <y1>170</y1>
            <desc>
            </desc>
            <fill>-657956</fill>
          </node>
          <arc>
            <name>arc2</name>
            <source>wheat</source>
            <target>summer_fallow2</target>
            <x>50</x>
            <y>55</y>
            <actions>Wheat Management.Leave</actions>
            <actions>SummerFallow.Enter</actions>
            <rules>Wheat Management.canLeave</rules>
          </arc>
          <arc>
            <name>arc6</name>
            <source>summer_fallow</source>
            <target>wheat</target>
            <x>419</x>
            <y>56</y>
            <actions>SummerFallow.Leave</actions>
            <actions>Wheat Management.Enter</actions>
            <rules>SummerFallow.canLeave</rules>
            <rules>Wheat Management.canEnter</rules>
          </arc>
          <arc>
            <name>arc8</name>
            <source>chickpea</source>
            <target>summer_fallow</target>
            <x>417</x>
            <y>385</y>
            <actions>Chickpea Management.Leave</actions>
            <actions>SummerFallow.Enter</actions>
            <rules>Chickpea Management.canLeave</rules>
          </arc>
          <arc>
            <name>arc0</name>
            <source>summer_fallow2</source>
            <target>chickpea</target>
            <x>51</x>
            <y>386</y>
            <actions>SummerFallow.Leave</actions>
            <actions>Chickpea Management.Enter</actions>
            <rules>SummerFallow.CanLeave</rules>
            <rules>Chickpea Management.canEnter</rules>
          </arc>
          <InitialState>summer_fallow</InitialState>
          <component name="Rotation Management_" executable="%apsim%/Model/Manager2.dll">
            <executable>%apsim%/Model/Manager2.dll</executable>
            <initdata>
              <text><![CDATA[using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Text;
using ModelFramework;
using CSGeneral;
public class Script {
[Link] public Simulation MySimulation;
private List<string> paddocks = new List<string>();
private List<dynamic> paddockStates = new List<dynamic>();
private Graph g = new Graph();
private Dictionary<string,string> _currentState = new Dictionary<string,string>();
[Output, Description("Current State of DG")] public string currentState {
  get {string[] r = new string[_currentState.Count]; _currentState.Values.CopyTo(r,0);  
       return(String.Join(" ", r));} 
}
private void setState(string p, string s) {
  _currentState[p] = s;
}
private string getState(string p) {
  return(_currentState[p]);
}
[Output, Description("Current paddock")] public string currentPaddock = "";
[Output] public string [] states = new string[0]; 
[EventHandler] public void OnInitialised()
{
g = new Graph();
states = new string[4];
int i = 0;
g.AddNode("chickpea");
states[i++] = "chickpea";
g.AddNode("wheat");
states[i++] = "wheat";
g.AddNode("summer_fallow2");
states[i++] = "summer_fallow2";
g.AddNode("summer_fallow");
states[i++] = "summer_fallow";
ruleAction arc2 = new ruleAction();
arc2.testCondition.Add("Wheat Management.canLeave");
arc2.action.Add("Wheat Management.Leave");
arc2.action.Add("SummerFallow.Enter");
g.AddDirectedEdge("wheat","summer_fallow2",arc2);
ruleAction arc6 = new ruleAction();
arc6.testCondition.Add("SummerFallow.canLeave");
arc6.testCondition.Add("Wheat Management.canEnter");
arc6.action.Add("SummerFallow.Leave");
arc6.action.Add("Wheat Management.Enter");
g.AddDirectedEdge("summer_fallow","wheat",arc6);
ruleAction arc8 = new ruleAction();
arc8.testCondition.Add("Chickpea Management.canLeave");
arc8.action.Add("Chickpea Management.Leave");
arc8.action.Add("SummerFallow.Enter");
g.AddDirectedEdge("chickpea","summer_fallow",arc8);
ruleAction arc0 = new ruleAction();
arc0.testCondition.Add("SummerFallow.CanLeave");
arc0.testCondition.Add("Chickpea Management.canEnter");
arc0.action.Add("SummerFallow.Leave");
arc0.action.Add("Chickpea Management.Enter");
g.AddDirectedEdge("summer_fallow2","chickpea",arc0);
}
[EventHandler] public void OnStart_Simulation()
{
paddocks.Add("");
setState("","summer_fallow");
   MySimulation.Publish("transition");
}
private string modname(string x) {
  if (x.Contains(".")) return(x.Split('.')[0]);
  return("");
}
private string varname(string x) {
  if (x.Contains(".")) return(x.Split('.')[1]);
  return(x);
}
[EventHandler] public void OnProcess()
{
   bool more = true;
   while (more) {
      more = false;
      double bestScore = -1.0; string bestArc = ""; string bestPaddock = "";
      foreach (string p in paddocks) {
         Node s = g.FindNode(getState(p));
         // Console.WriteLine(" state=" + s.Name);
         foreach (string _arc in s.arcs.Keys) {
            double score = 1;
            foreach (string testCondition in s.arcs[_arc].testCondition){
               double c = 0.0;
               currentPaddock = p;
               if (MySimulation.Get(testCondition, out c))
                  score *= c;
               else
                  throw new Exception("Nothing returned from expression '" + testCondition + "'");
               //Console.WriteLine(" p=" + p +" a=" + _arc + "cond=" + testCondition + " score=" + score);
            }
            if (score > bestScore) {
               bestScore = score;
               bestArc = _arc;
               bestPaddock = p;
            }
         }
      }
      currentPaddock = "";
      if (bestScore > 0.0) {
         Node s = g.FindNode(getState(bestPaddock));
         if( bestPaddock != "")
            currentPaddock = bestPaddock;
         if (getState(bestPaddock) != "") MySimulation.Publish("transition_from_" + getState(bestPaddock));
         MySimulation.Publish("transition");
         setState (bestPaddock, g.FindArcTarget(bestArc));
         foreach (string action in s.arcs[bestArc].action ) {
            MySimulation.Publish(action);
            //Console.WriteLine(" best=" + bestPaddock + " action=" + action);
         }
         MySimulation.Publish("transition_to_" + getState(bestPaddock));
         more = true;
      }
   }
}
  public class ruleAction
  {
     public string Target;
     public List<string> testCondition = new List<string>();
     public List<string> action = new List<string>();
  }
   public class Node : IEquatable<Node>
   {
      private string data /*, alias*/;
      public Node(string _data) { data = _data; }
      public Dictionary<string, ruleAction> arcs = new Dictionary<string, ruleAction>();
      public bool Equals(Node other)
      {
         return ( this.data == other.data );
      }
      public string Name { get { return (data); } }
   }

   class Graph
   {
      public List<Node> vertices;
      public void print() {
         foreach (Node n in vertices) {
            Console.WriteLine(n.Name + ":"); 
            foreach (string k in n.arcs.Keys) {
               Console.WriteLine("  " + k); 
            }
         }
      }
      public Graph() { vertices = new List<Node>(); }
      public Node AddNode(Node node)
      {
         if (vertices.Find(delegate(Node n) { return (n.Equals(node)); }) == null)
            vertices.Add(node);
         return (vertices.Find(delegate(Node n) { return (n.Equals(node)); }));
      }
      public Node AddNode(string value)
      {
         return (AddNode(new Node(value)));
      }
      public Node FindNode(string value)
      {
         return (FindNode(AddNode(value)));
      }
      public Node FindNode(Node node)
      {
         return (vertices.Find(delegate(Node n) { return (n.Equals(node)); }));
      }
      public void AddDirectedEdge(string source, string dest, ruleAction value)
      {
         int i = 0;
         foreach (Node n in vertices) {
            foreach (string arc in n.arcs.Keys) {
               i++;
            }
         }
         Node node1 = AddNode(source);
         AddNode(dest);
         value.Target = dest;
         node1.arcs.Add("arc" + i.ToString(), value);
      }
      public string FindArcTarget(string arc)
      {
         foreach (Node n in vertices) {
            foreach (string a in n.arcs.Keys) {
               if (a == arc) { return (n.arcs[a].Target); }
            }
         }
         Console.WriteLine("Aiee - no target for arc " + arc ); 
         return("");
      }
   }
}
]]></text>
            </initdata>
          </component>
        </rotplot>
        <manager2 name="Chickpea Management">
          <ui>
            <category type="category" description="Crop properties" />
            <crop type="crop" description="Name of this crop">chickpea</crop>
            <category type="category" description="Sowing criteria" />
            <date1 type="ddmmmdate" description="Enter sowing window START date (dd-mmm)">15-may</date1>
            <date3 type="ddmmmdate" description="Enter cultivar change date (na if not in use)">na</date3>
            <date2 type="ddmmmdate" description="Enter sowing window END date (dd-mmm)">10-jul</date2>
            <must_sow type="yesno" description="Must Sow">no</must_sow>
            <rain_amount type="text" description="Enter amount of cumulative rainfall (mm)">25</rain_amount>
            <rain_days type="text" description="Enter number of days to accumulate rainfall (days)">3</rain_days>
            <esw_amount type="text" description="Enter amount of soil water (mm)">50</esw_amount>
            <category type="category" description="Sowing Parameters" />
            <cultivar1 type="cultivars" description="Enter cultivar : ">amethyst</cultivar1>
            <cultivar2 type="cultivars" description="Enter 2nd Cultivar (na if not using a second cultivar)">na</cultivar2>
            <density1 type="text" description="Enter sowing density  (plants/m2)">25</density1>
            <depth1 type="text" description="Enter sowing depth  (mm)">30</depth1>
            <row_spacing1 type="text" description="Enter row spacing  (mm)">500</row_spacing1>
            <category type="category" description="Extra Parameters" />
            <ftn1 type="text" description="Enter Fertile Tiller Number (na for auto) : ">na</ftn1>
            <skiprow1 type="list" listvalues="solid, single, double" description="Skip row : ">solid</skiprow1>
            <tillageImplement type="text" description="Name of tillage implement (na if not in use): ">na</tillageImplement>
          </ui>
          <text>using System;
using ModelFramework;
using CSGeneral;

// Basic crop management: sowing &amp; harvesting.
// Multi-paddock aware.
// This component DOES NOT require a trigger from the sequencer.
// It will assume it is the only crop in the system if it doesnt find a sequencer.
// If it does find a sequencer, it will do nothing until told to (via Enter/Leave).
public class Script 
{      
   [Link()]  public Simulation MySimulation;
   
   [Param()] private string crop;         // The module name of this crop
   [Param()] private string date1;         //Start of sowing window
   [Param()] private string date2;         //End of sowing window
   [Param()] private string date3;         //date to change to different cultivar
   [Param()] int esw_amount;
   [Param()] private string must_sow;

   [Input()] private DateTime today;

   // Rainfall accumulator
   [Param()] int rain_days;              //check for rain over this period
   [Param()] int rain_amount;            //this much rain over that period

   // Daily rainfall from the system
   [Input] private double rain;
   private ManagerUtility.Tracker&lt;double&gt; rainTracker; 

   private bool inWindow = false;
   private bool endOfWindow = false;
   private bool ChangeCultivar = false;

   //initialise tracker, telling it how many days to track
   [EventHandler] public void OnInitialised()
   {
      rainTracker = new ManagerUtility.Tracker&lt;double&gt;(rain_days); 
   }

   // Daily tests common to all paddocks
   [EventHandler] public void OnPrepare()
   {
      bool startOfWindow = DateUtility.DatesEqual(date1, today);

      inWindow = DateUtility.WithinDates(date1, today, date2);
      ChangeCultivar = false;
      if(date3 != "na")  
         ChangeCultivar = DateUtility.WithinDates(date3, today, date2);
      endOfWindow = DateUtility.DatesEqual(date2, today);

      rainTracker.Add(rain);
      string currentPaddock = "";
      if (MySimulation.Get("currentPaddock", out currentPaddock) == false) 
      {
         // If there is no sequencer plugged in then we are it..
         if (canEnter &gt; 0) {
            OnEnter();
         }
         if (canLeave &gt; 0) {
            OnLeave();
         }
      }
   }
   // Test whether we can sow a crop today
   // +ve number - yes
   // 0          - no
   // -ve number - no, out of scope (planting window)
   [Output, Description("Test whether we can sow a crop today")] public int canEnter  {
      get {
         bool isPossibleToday = false;
         
         string currentPaddock;
         MySimulation.Get("currentPaddock", out currentPaddock);
         //Console.WriteLine("1. '" + currentPaddock + "'");

         Component paddockModule;
         if (currentPaddock != "")
            paddockModule = (Component) MySimulation.LinkByName(currentPaddock);
         else
            paddockModule = (Component) MySimulation.ChildPaddocks[0];
         //Console.WriteLine("2. " + paddockModule.Name);

         Component cropModule = (Component) paddockModule.LinkByName( crop );

         //Console.WriteLine("3. " + cropModule.Name);
         string plantStatus = "";
         cropModule.Get("plant_status", out plantStatus);

         double esw = 0.0;
         Component soilModule = (Component) paddockModule.LinkByType("SoilWat");
         soilModule.Get("esw", out esw);
         if (plantStatus == "out" &amp;&amp;
             inWindow &amp;&amp;
             rainTracker.Sum() &gt;= rain_amount &amp;&amp;
             esw &gt; esw_amount) 
         {
             isPossibleToday = true;
         } 

	     if (isPossibleToday)
            return 1;
         
         if (plantStatus == "out" &amp;&amp; endOfWindow &amp;&amp; must_sow == "yes")
            return 1;

         if (plantStatus == "out" &amp;&amp; !inWindow)
            return -1;
         
         return 0;
      }
   }  
   [Output, Description("Test whether we have passed the end of the window")] public int pastWindow  {
      get {
         return( (DateUtility.CompareDates(date2, today) &gt; 0) ? 1 : 0);
      }
   }

   
   // Sow a crop
   [Param()] private string cultivar1;
   [Param()] private string cultivar2;
   [Param()] private double density1;
   [Param()] private double depth1;
   [Param()] private double row_spacing1;
   [Param()] private string ftn1;
   [Param()] private string skiprow1;
   [Param()] private string tillageImplement;
   
   [EventHandler, Description("Sow the crop")] public void OnEnter()
   {
      Console.WriteLine(today + " Sowing Crop");
      SowType data = new SowType();
      data.Cultivar = cultivar1;
      if(ChangeCultivar)
         data.Cultivar = cultivar2;

      data.plants = density1;
      data.sowing_depth = depth1;
      data.row_spacing = row_spacing1;
      data.tiller_no_fertile = (ftn1 == "na") ? "" : ftn1;
      data.SkipRow = 0 ;
      if (skiprow1 == "single")
         data.SkipRow = 1;
      else if (skiprow1 == "double")
         data.SkipRow = 2;

      string currentPaddock;
      MySimulation.Get("currentPaddock", out currentPaddock);
      Component cropModule;
      if (currentPaddock != "")
         cropModule = (Component) MySimulation.LinkByName(currentPaddock + "." + crop);
      else 
         cropModule = (Component) MySimulation.ChildPaddocks[0].LinkByName(crop);

      cropModule.Publish("Sow", data);
      if (tillageImplement.ToLower() != "na") 
	  {
         TillageType t = new TillageType();
         t.type = tillageImplement;
         Component paddockModule;
         if (currentPaddock != "")
            paddockModule = (Component) MySimulation.LinkByName(currentPaddock);
         else
            paddockModule = MySimulation.ChildPaddocks[0];
         paddockModule.Publish("tillage", t);
      }		 
   }

   // Test whether we can harvest a crop today
   // +ve number - yes
   // 0          - no
   // -ve        - out of scope
   [Output] public int canLeave  
   {
      get 
      {
         string currentPaddock;
         MySimulation.Get("currentPaddock", out currentPaddock);

         string plantStatus = "";
         MySimulation.Get((currentPaddock != "" ? currentPaddock + "." : "") + crop + ".plant_status", out plantStatus);
         if (plantStatus == "out")
            return -1;

         string StageName = "";
         MySimulation.Get((currentPaddock != "" ? currentPaddock + "." : "") + crop + ".StageName", out StageName);
         if (StageName == "harvest_ripe" || plantStatus == "dead")
            return 1;
         return 0;
      }
   }

   [EventHandler] public void OnLeave()
   {
      Console.WriteLine(today + " Harvesting Crop");
      HarvestType hdata = new HarvestType();
      hdata.Remove = 0.0;
      string currentPaddock;
      MySimulation.Get("currentPaddock", out currentPaddock);
      Component cropModule;
      if (currentPaddock != "")
         cropModule = (Component) MySimulation.LinkByName(currentPaddock + "." + crop);
      else 
         cropModule = (Component) MySimulation.ChildPaddocks[0].LinkByName(crop);

      cropModule.Publish("harvest", hdata);

      KillCropType kdata = new KillCropType();
      kdata.KillFraction = 0.0F;
      cropModule.Publish("killcrop", kdata);
      cropModule.Publish("end_crop");
   } 
}
       </text>
        </manager2>
        <manager2 name="Wheat Management">
          <ui>
            <category type="category" description="Crop properties" />
            <crop type="crop" description="Name of this crop">wheat</crop>
            <category type="category" description="Sowing criteria" />
            <date1 type="ddmmmdate" description="Enter sowing window START date (dd-mmm)">15-may</date1>
            <date3 type="ddmmmdate" description="Enter cultivar change date (na if not in use)">na</date3>
            <date2 type="ddmmmdate" description="Enter sowing window END date (dd-mmm)">10-jul</date2>
            <must_sow type="yesno" description="Must Sow">no</must_sow>
            <rain_amount type="text" description="Enter amount of cumulative rainfall (mm)">25</rain_amount>
            <rain_days type="text" description="Enter number of days to accumulate rainfall (days)">3</rain_days>
            <esw_amount type="text" description="Enter amount of soil water (mm)">50</esw_amount>
            <category type="category" description="Sowing Parameters" />
            <cultivar1 type="cultivars" description="Enter cultivar : ">hartog</cultivar1>
            <cultivar2 type="cultivars" description="Enter 2nd Cultivar (na if not using a second cultivar)">na</cultivar2>
            <density1 type="text" description="Enter sowing density  (plants/m2)">100</density1>
            <depth1 type="text" description="Enter sowing depth  (mm)">30</depth1>
            <row_spacing1 type="text" description="Enter row spacing  (mm)">250</row_spacing1>
            <category type="category" description="Extra Parameters" />
            <ftn1 type="text" description="Enter Fertile Tiller Number (na for auto) : ">na</ftn1>
            <skiprow1 type="list" listvalues="solid, single, double" description="Skip row : ">solid</skiprow1>
            <tillageImplement type="text" description="Name of tillage implement (na if not in use): ">na</tillageImplement>
          </ui>
          <text>using System;
using ModelFramework;
using CSGeneral;

// Basic crop management: sowing &amp; harvesting.
// Multi-paddock aware.
// This component DOES NOT require a trigger from the sequencer.
// It will assume it is the only crop in the system if it doesnt find a sequencer.
// If it does find a sequencer, it will do nothing until told to (via Enter/Leave).
public class Script 
{      
   [Link()]  public Simulation MySimulation;
   
   [Param()] private string crop;         // The module name of this crop
   [Param()] private string date1;         //Start of sowing window
   [Param()] private string date2;         //End of sowing window
   [Param()] private string date3;         //date to change to different cultivar
   [Param()] int esw_amount;
   [Param()] private string must_sow;

   [Input()] private DateTime today;

   // Rainfall accumulator
   [Param()] int rain_days;              //check for rain over this period
   [Param()] int rain_amount;            //this much rain over that period

   // Daily rainfall from the system
   [Input] private double rain;
   private ManagerUtility.Tracker&lt;double&gt; rainTracker; 

   private bool inWindow = false;
   private bool endOfWindow = false;
   private bool ChangeCultivar = false;

   //initialise tracker, telling it how many days to track
   [EventHandler] public void OnInitialised()
   {
      rainTracker = new ManagerUtility.Tracker&lt;double&gt;(rain_days); 
   }

   // Daily tests common to all paddocks
   [EventHandler] public void OnPrepare()
   {
      bool startOfWindow = DateUtility.DatesEqual(date1, today);

      inWindow = DateUtility.WithinDates(date1, today, date2);
      ChangeCultivar = false;
      if(date3 != "na")  
         ChangeCultivar = DateUtility.WithinDates(date3, today, date2);
      endOfWindow = DateUtility.DatesEqual(date2, today);

      rainTracker.Add(rain);
      string currentPaddock = "";
      if (MySimulation.Get("currentPaddock", out currentPaddock) == false) 
      {
         // If there is no sequencer plugged in then we are it..
         if (canEnter &gt; 0) {
            OnEnter();
         }
         if (canLeave &gt; 0) {
            OnLeave();
         }
      }
   }
   // Test whether we can sow a crop today
   // +ve number - yes
   // 0          - no
   // -ve number - no, out of scope (planting window)
   [Output, Description("Test whether we can sow a crop today")] public int canEnter  {
      get {
         bool isPossibleToday = false;
         
         string currentPaddock;
         MySimulation.Get("currentPaddock", out currentPaddock);
         //Console.WriteLine("1. '" + currentPaddock + "'");

         Component paddockModule;
         if (currentPaddock != "")
            paddockModule = (Component) MySimulation.LinkByName(currentPaddock);
         else
            paddockModule = (Component) MySimulation.ChildPaddocks[0];
         //Console.WriteLine("2. " + paddockModule.Name);

         Component cropModule = (Component) paddockModule.LinkByName( crop );

         //Console.WriteLine("3. " + cropModule.Name);
         string plantStatus = "";
         cropModule.Get("plant_status", out plantStatus);

         double esw = 0.0;
         Component soilModule = (Component) paddockModule.LinkByType("SoilWat");
         soilModule.Get("esw", out esw);
         if (plantStatus == "out" &amp;&amp;
             inWindow &amp;&amp;
             rainTracker.Sum() &gt;= rain_amount &amp;&amp;
             esw &gt; esw_amount) 
         {
             isPossibleToday = true;
         } 

	     if (isPossibleToday)
            return 1;
         
         if (plantStatus == "out" &amp;&amp; endOfWindow &amp;&amp; must_sow == "yes")
            return 1;

         if (plantStatus == "out" &amp;&amp; !inWindow)
            return -1;
         
         return 0;
      }
   }  
   [Output, Description("Test whether we have passed the end of the window")] public int pastWindow  {
      get {
         return( (DateUtility.CompareDates(date2, today) &lt; 0) ? 1 : 0);
      }
   }
   
   // Sow a crop
   [Param()] private string cultivar1;
   [Param()] private string cultivar2;
   [Param()] private double density1;
   [Param()] private double depth1;
   [Param()] private double row_spacing1;
   [Param()] private string ftn1;
   [Param()] private string skiprow1;
   [Param()] private string tillageImplement;
   
   [EventHandler, Description("Sow the crop")] public void OnEnter()
   {
      Console.WriteLine(today + " Sowing Crop");
      SowType data = new SowType();
      data.Cultivar = cultivar1;
      if(ChangeCultivar)
         data.Cultivar = cultivar2;

      data.plants = density1;
      data.sowing_depth = depth1;
      data.row_spacing = row_spacing1;
      data.tiller_no_fertile = (ftn1 == "na") ? "" : ftn1;
      data.SkipRow = 0 ;
      if (skiprow1 == "single")
         data.SkipRow = 1;
      else if (skiprow1 == "double")
         data.SkipRow = 2;

      string currentPaddock;
      MySimulation.Get("currentPaddock", out currentPaddock);
      Component cropModule;
      if (currentPaddock != "")
         cropModule = (Component) MySimulation.LinkByName(currentPaddock + "." + crop);
      else 
         cropModule = (Component) MySimulation.ChildPaddocks[0].LinkByName(crop);

      cropModule.Publish("Sow", data);
      if (tillageImplement.ToLower() != "na") 
	  {
         TillageType t = new TillageType();
         t.type = tillageImplement;
         Component paddockModule;
         if (currentPaddock != "")
            paddockModule = (Component) MySimulation.LinkByName(currentPaddock);
         else
            paddockModule = MySimulation.ChildPaddocks[0];
         paddockModule.Publish("tillage", t);
      }		 
   }

   // Test whether we can harvest a crop today
   // +ve number - yes
   // 0          - no
   // -ve        - out of scope
   [Output] public int canLeave  
   {
      get 
      {
         string currentPaddock;
         MySimulation.Get("currentPaddock", out currentPaddock);

         string plantStatus = "";
         MySimulation.Get((currentPaddock != "" ? currentPaddock + "." : "") + crop + ".plant_status", out plantStatus);
         if (plantStatus == "out")
            return -1;

         string StageName = "";
         MySimulation.Get((currentPaddock != "" ? currentPaddock + "." : "") + crop + ".StageName", out StageName);
         if (StageName == "harvest_ripe" || plantStatus == "dead")
            return 1;
         return 0;
      }
   }

   [EventHandler] public void OnLeave()
   {
      Console.WriteLine(today + " Harvesting Crop");
      HarvestType hdata = new HarvestType();
      hdata.Remove = 0.0;
      string currentPaddock;
      MySimulation.Get("currentPaddock", out currentPaddock);
      Component cropModule;
      if (currentPaddock != "")
         cropModule = (Component) MySimulation.LinkByName(currentPaddock + "." + crop);
      else 
         cropModule = (Component) MySimulation.ChildPaddocks[0].LinkByName(crop);

      cropModule.Publish("harvest", hdata);

      KillCropType kdata = new KillCropType();
      kdata.KillFraction = 0.0F;
      cropModule.Publish("killcrop", kdata);
      cropModule.Publish("end_crop");
   } 
}
       </text>
        </manager2>
        <manager2 name="Wheat Sowing Fertiliser">
          <ui>
            <fertType type="text" description="The type of fertiliser">Urea_N</fertType>
            <fertAmt type="text" description="Amout of fertiliser to apply (kg/ha)">150</fertAmt>
            <tag type="category" description="Event details" />
            <ModuleName type="modulename" description="On which module should the event come from: ">wheat</ModuleName>
            <EventName type="text" description="On which event should spraying be triggered">sowing</EventName>
          </ui>
          <text>using System;
using System.Linq;
using System.Collections.Generic;
using ModelFramework;

// Crop management: fertilise at sowing
// Multi-paddock aware.
// This component DOES NOT require a trigger from the sequencer.

public class Script 
{      
   [Link]  public Simulation MySimulation;
   [Param] string fertType;
   [Param] float fertAmt;
   [Param] string ModuleName;
   [Param] string EventName;
   
   [EventHandler] public void OnStart_Simulation()
   {
      foreach (Paddock paddock in MySimulation.ChildPaddocks) 
      {
         foreach (Component child in paddock.Children) {
            if(child.Name == ModuleName){
               RuntimeEventHandler.NullFunction curried = () =&gt; OnTrigger(paddock.Name);
               MySimulation.Subscribe(child.FullName + "." + EventName, curried);
               Console.WriteLine("Subscribed '" + child.FullName + "." + EventName + " =&gt; " + paddock.Name + "'"); 
            }
         }
      }
   }

   public void OnTrigger(string paddock)
   {
      Console.WriteLine("Fertiliser OnTrigger called, paddock='" + paddock + "'"); 
      if (fertAmt &gt; 0) 
      {         
         Component paddockModule;
         if (paddock != "")
            paddockModule = (Component) MySimulation.LinkByName(paddock);
         else
            paddockModule = (Component) MySimulation.ChildPaddocks[0];
         //Console.WriteLine("2. " + paddockModule.Name);

         Fertiliser fertModule = (Fertiliser) paddockModule.LinkByName("Fertiliser");
         fertModule.Apply(fertAmt, 50, fertType);
      }
   }
}
       </text>
        </manager2>
        <manager2 name="SummerFallow">
          <ui>
            <endDate type="text" description="Enter the end date of the pause">15-mar</endDate>
          </ui>
          <text>using System;
using System.Collections.Generic;
using ModelFramework;
using CSGeneral;

// A "blocking" period that waits until a specified date.
// Multi-paddock aware.

public class Script 
{  
   [Link()] public Simulation MySimulation;

   [Input] private DateTime today; 
   [Param] private string endDate; 

   private Dictionary&lt;string,bool&gt; flag = new Dictionary&lt;string,bool&gt;();

   // +ve number - yes
   // 0          - no
   [Output, Description("Test whether we can enter the pause")] public int canEnter  
   {
      get {return (1);}
   }

   // Set the flag to say that we cannot leave until the end of the period is passed
   [EventHandler, Description("Enter the pause period")] public void OnEnter()
   {
      string currentPaddock;
      MySimulation.Get("currentPaddock", out currentPaddock);
      flag[currentPaddock] = false;
   } 
   
   [Output, Description("Test whether we can leave the pause")] public int canLeave  
   {get 
      {
         string currentPaddock;
         MySimulation.Get("currentPaddock", out currentPaddock);
         //Console.WriteLine("CanLeave called, p=" + currentPaddock + ",c=" + counter[currentPaddock]);
         if (flag[currentPaddock]) {
            return (1);
         }   
         return (0);

      }
   }
   
   [EventHandler, Description("Leave the pause")] public void OnLeave()
   {
       // Nothing
   } 

   // Setup
   [EventHandler] public void OnStart_Simulation()
   {
      flag.Add("", true);
      foreach (Paddock paddock in MySimulation.ChildPaddocks) 
         flag.Add(paddock.Name, true);
   }

   // Set the flag to say that the end of the period has passed
   [EventHandler] public void OnPost()
   {
      if (DateUtility.DatesEqual(endDate, today)) {
         List &lt;string&gt; paddocks = new List&lt;string&gt;(flag.Keys);
         foreach (string p in paddocks) 
            flag[p] = true;
      }
   }
}

</text>
        </manager2>
        <manager2 name="PaddockAccumulator">
          <ui />
          <text>using System; 
using System.Collections.Generic;
using ModelFramework; 
using CSGeneral;

// This captures and accumulates the states of several paddock variables
// to be reported on a single report line. 

// Multi-paddock aware.

public class Script 
{ 
   [Link] public Simulation MySimulation;

   // Cumulative Ep
   [Output, Description("The total transpiration since the last transition"), Units("mm")] public double TEp {
      get {setup(); string s = currentPaddock() + "_Ep"; return(me[s]);}
   }
   // Cumulative Drainage
   [Output, Description("The total drainage since the last transition"), Units("mm")] public double TDrainage {
      get {setup(); string s = currentPaddock() + "_drainage"; return(me[s]);}
   }
   // Cumulative Runoff
   [Output, Description("The total runoff since the last transition"), Units("mm")] public double TRunoff {
      get {setup(); string s = currentPaddock() + "_runoff"; return(me[s]);}
   }
   // Cumulative Es
   [Output, Description("The total soil evaporation since the last transition"), Units("mm")] public double TEs {
      get {setup(); string s = currentPaddock() + "_evaporation"; return(me[s]);}
   }
   // Cumulative fertiliser
   [Output, Description("The total fertiliser applied since the last transition"), Units("kg/ha")] public double applied_fert {
      get {setup(); string s = currentPaddock() + "_applied_fert"; return(me[s]);}
   }
   // Instantaneous sw at start
   [Output, Description("The soil water on the first day of a rotation"), Units("mm")] public double swStart {
      get {setup(); string s = currentPaddock() + "_swStart"; return(me[s]);}
   }
   // Instantaneous sw at end
   [Output, Description("The soil water on the last day of a rotation"), Units("mm")] public double swYesterday {
      get {setup(); string s = currentPaddock() + "_swYesterday"; return(me[s]);}
   }
   // Instantaneous no3 at start
   [Output, Description("The soil NO3 on the first day of a rotation"), Units("kg/ha")] public double no3Start {
      get {setup(); string s = currentPaddock() + "_no3Start"; return(me[s]);}
   }
   // Instantaneous no3 at end
   [Output, Description("The soil NO3 on the last day of a rotation"), Units("kg/ha")] public double no3Yesterday {
      get {setup(); string s = currentPaddock() + "_no3Yesterday"; return(me[s]);}
   }
   // Instantaneous carbon at end
   [Output, Description("The soil carbon on the last day of a rotation"), Units("kg/ha")] public double carbonYesterday {
      get {setup(); string s = currentPaddock() + "_carbon"; return(me[s]);}
   }
   // Instantaneous yield of all crops
   [Output, Description("Crop Yield"), Units("kg/ha")] public double yield_kgha {
      get{
         double yld2 = 0;
         Paddock p = (Paddock) MySimulation.LinkByName(currentPaddock());
         foreach (Component crop in p.Crops)
         {
            double yld = 0;
            crop.Get("yield", out yld);
            yld2 = yld2 + yld;
         }
         return yld2 ;}
   }
   // Instantaneous yield of all crops
   [Output, Description("Crop Yield"), Units("kg")] public double yield_kg {
      get{
         double yld2 = 0, area = 1.0;
         Paddock p = (Paddock) MySimulation.LinkByName(currentPaddock());
         MySimulation.Get(p.Name + ".area", out area);
         foreach (Component crop in p.Crops)
         {
            double yld = 0;
            crop.Get("yield", out yld);
            yld2 = yld2 + yld * area;
         }
         return yld2 ;}
   }
   // Instantaneous biomass of all crops
   [Output, Description("Crop biomass"), Units("kg/ha")] public double biomass_kgha {
      get{
         double biomass2 = 0;
         Paddock p = (Paddock) MySimulation.LinkByName(currentPaddock());
         foreach (Component crop in p.Crops)
         {
            double biomass = 0;
            crop.Get("biomass", out biomass);
            biomass2 = biomass2 + biomass;
         }
         return biomass2 ;}
   }
   // Instantaneous yield of all crops
   [Output, Description("Crop Biomass"), Units("kg")] public double biomass_kg {
      get{
         double biomass2 = 0, area = 1.0;
         Paddock p = (Paddock) MySimulation.LinkByName(currentPaddock());
         MySimulation.Get(p.Name + ".area", out area);
         foreach (Component crop in p.Crops)
         {
            double biomass = 0;
            crop.Get("biomass", out biomass);
            biomass2 = biomass2 + biomass * area;
         }
         return biomass2 ;}
   }
   // Instantaneous protein of all crops
   [Output, Description("Grain Protein"), Units("%")] public double protein {
      get{
         double pro2 = 0;
         Paddock p = (Paddock) MySimulation.LinkByName(currentPaddock());
         foreach (Component crop in p.Crops)
         {
            double pro = 0;
            crop.Get("grain_protein", out pro);
            pro2 = pro2 + pro;
         }
        
         return pro2 ;}
   }
   
   // Instantaneous N of all crops
   [Output, Description("Grain N"), Units("g/m2")] public double GrainN_gm2 {
      get{
         double GN2 = 0;
         Paddock p = (Paddock) MySimulation.LinkByName(currentPaddock());
         foreach (Component crop in p.Crops)
         {
            double GN = 0;
            if (crop.Get("grain_N", out GN))
               GN2 = GN2 + GN;
            else if (crop.Get("GrainGreenN", out GN))
               GN2 = GN2 + GN;
         }
         return GN2 ;}
   }
   
   
   [Output, Description("The state of the current paddock"), Units("")] public string paddockState {
      get {
         string cs = "";
         string cp = currentPaddock();
         MySimulation.Get(cp + "_state", out cs);
         return(cs);
      }
   }
   [Output, Description("The number of days in a rotation"), Units("")] public int daysInPhase = 0;
 
   private string currentPaddock() {
      string result = "";
      MySimulation.Get("currentPaddock", out result);
      if (result != "")
         return(result);
      else
         return(MySimulation.ChildPaddocks[0].Name);
   }


   // An accumulator for each thing in each paddock
   private Dictionary&lt;string, double&gt; me = new Dictionary&lt;string, double&gt;();

   private void setup() {
      if (me.Keys.Count == 0) { OnStart_Simulation(); }
   }
   
   [EventHandler] public void OnStart_Simulation() { 
      if (me.Keys.Count == 0) {
         foreach (Paddock paddock in MySimulation.ChildPaddocks) 
         {
            Component soil = (Component) paddock.LinkByType("soilwat");
            double [] swdep = new double[15];
            soil.Get("sw_dep", out swdep);
            me.Add(paddock.Name + "_swStart", MathUtility.Sum(swdep));
            me.Add(paddock.Name + "_swYesterday", MathUtility.Sum(swdep));
         
            Component soilN = (Component) paddock.LinkByType("soiln");
            double [] no3dep = new double[15];
            soilN.Get("no3", out no3dep);
            me.Add(paddock.Name + "_no3Start", MathUtility.Sum(no3dep));
            me.Add(paddock.Name + "_no3Yesterday", MathUtility.Sum(no3dep));
            me.Add(paddock.Name + "_Ep", 0);
            me.Add(paddock.Name + "_drainage", 0);
            me.Add(paddock.Name + "_runoff", 0);
            me.Add(paddock.Name + "_evaporation", 0);
            me.Add(paddock.Name + "_applied_fert", 0);
            double[] carbon = new double[15];
            soilN.Get("carbon_tot", out carbon);
            me.Add(paddock.Name + "_carbon", MathUtility.Sum(carbon));
         }
      }
   } 
   [EventHandler] public void OnTransition() {
      setup();   
      string s = currentPaddock();
      me[s + "_swStart"] = me[s+"_swYesterday"]; 
      me[s + "_no3Start"] = me[s + "_no3Yesterday"];
      me[s + "_Ep"] = 0;
      me[s + "_drainage"] = 0;
      me[s + "_runoff"] = 0;
      me[s + "_evaporation"] = 0;
      me[s + "_applied_fert"] = 0;
      me[s + "_carbon"] = 0;
      daysInPhase = 0;
   } 
   [EventHandler] public void OnPost() { 
      foreach (Paddock paddock in MySimulation.ChildPaddocks) 
      {
         Component soil = (Component) paddock.LinkByType("soilwat");
         Component soilN = (Component) paddock.LinkByType("soiln");
         Component fertiliser = (Component) paddock.LinkByType("fertiliser");
         double [] swdep = new double[15];
         soil.Get("sw_dep", out swdep);
         me[paddock.Name + "_swYesterday"] = MathUtility.Sum(swdep);

         double [] no3dep = new double[15];
         soilN.Get("no3", out no3dep);
         me[paddock.Name + "_no3Yesterday"] = MathUtility.Sum(no3dep);

         double drain = 0;
         soil.Get("drain", out drain);
         me[paddock.Name + "_drainage"] += drain;

         double runoff = 0;
         soil.Get("runoff", out runoff);
         me[paddock.Name + "_runoff"] += runoff;

         double es = 0;
         soil.Get("es", out es);
         me[paddock.Name + "_evaporation"] += es;

         double applied_fert = 0;
         fertiliser.Get("fertiliser", out applied_fert);
         me[paddock.Name + "_applied_fert"] += applied_fert;

         double[] carbon = new double[15];
         soilN.Get("carbon_tot", out carbon);
         me[paddock.Name + "_carbon"] = MathUtility.Sum(carbon);

         foreach (Component crop in paddock.Crops)
         {
            double Ep = 0.0;
            if(crop.Get("Ep", out Ep))
               me[paddock.Name + "_Ep"] += Ep;
         }
      }
      daysInPhase++;
   }
} 
</text>
        </manager2>
        <manager2 name="RotationCounter">
          <ui />
          <text>using System; 
using ModelFramework; 

// Counts the number of times a rotation has completed (ie gone back to the starting point)
 
public class Script 
{ 
   [Link()] public Paddock myPaddock;   

   [Output, Description("Number of times the rotation has cycled"), Units("n")] public int rotationNumber = 0; 
  
   private string initialState = ""; 
   [EventHandler] public void OnStart_Simulation() { 
      myPaddock.Get("currentState", out initialState);  
   }    
 
   private bool needsCheck = false; 
   [EventHandler] public void OnPrepare() { needsCheck = false; } 
   [EventHandler] public void OnTransition() { needsCheck = true; } 
   [EventHandler] public void OnPost() { 
      if (needsCheck)  { 
         string currentState = ""; 
         myPaddock.Get("currentstate", out currentState);  
         if (currentState == initialState)  
            rotationNumber++; 
      } 
   } 
} 
</text>
        </manager2>
        <tracker>
          <variable>sum of rain on end_of_day from transition to now as TRainfall</variable>
          <variable>count of clock.simulation_days on end_of_day from transition to now as days_in_stage</variable>
        </tracker>
      </folder>
      <outputfile name="Harvest">
        <filename output="yes">Rotation Sample Harvest.out</filename>
        <title>Rotation Sample Harvest</title>
        <variables name="Variables">
          <variable>dd/mm/yyyy as Date</variable>
          <variable>yield</variable>
          <variable>biomass</variable>
        </variables>
        <events name="Reporting Frequency">
          <event>harvesting</event>
        </events>
      </outputfile>
      <outputfile name="Phases">
        <filename output="yes">Rotation Sample Phases.out</filename>
        <title>Rotation Sample Phases</title>
        <variables name="Variables">
          <variable>dd/mm/yyyy as Date</variable>
          <variable>currentState</variable>
          <variable>TRainfall as Rainfall</variable>
          <variable>Trunoff as runoff</variable>
          <variable>Tes as evap</variable>
          <variable>Tdrainage as drainage</variable>
          <variable>TEp as Ep</variable>
          <variable>swStart</variable>
          <variable>swYesterday as swEnd</variable>
          <variable>no3Start</variable>
          <variable>no3Yesterday as no3End</variable>
          <variable>biomass_kgha as Biomass</variable>
          <variable>yield_kgha as Yield</variable>
          <variable>GrainN_gm2 as grainN</variable>
          <variable>carbonYesterday as carbon</variable>
          <variable>applied_fert</variable>
          <variable>rotationNumber</variable>
          <variable>simulation_days</variable>
          <variable>daysInPhase</variable>
        </variables>
        <events name="Reporting Frequency">
          <event>transition</event>
        </events>
        <RGraphics name="Rugplot Graph">
          <script>
            <text>library(ggplot2)

apsim.input&lt;- inputFiles 
aps1 &lt;- read.table(apsim.input,skip=2,header=T) 
aps.name &lt;- names(aps1)
df &lt;- read.table(apsim.input,skip=3,header=T,col.names=aps.name,na.strings = "?")
df$Date&lt;-as.Date(df$Date, format="%d/%m/%Y")

# sort out the beginning and ending dates of each phase
x1 &lt;- df$Date[-1*nrow(df)]
x2 &lt;- df$Date[-1] 
df &lt;- df[-1,]  # throw away the first - it's from Start_Simulation
df$x1&lt;-x1
df$x2&lt;-x2

#lower bound of rectangles at bottom
df$ymin &lt;- -0.25 * max(df$Yield)
 
jpeg(file=imageFileName, width=width, height=height)
g&lt;- ggplot(df) +
 geom_bar(aes(x=Date, y=Yield, fill= currentState), stat="identity") +
 geom_rect(aes(xmin = x1 , xmax = x2, ymin= ymin, ymax=0, fill= currentState ) ) +
 scale_x_date() + scale_fill_discrete(name="state") + theme(
       axis.line = element_line(colour = "black"),
       panel.grid.major = element_blank(),
       panel.grid.minor = element_blank(),
       panel.border = element_blank(),
       panel.background = element_blank() )
print(g)

dev.off()
</text>
          </script>
        </RGraphics>
      </outputfile>
    </area>
  </simulation>
</folder>