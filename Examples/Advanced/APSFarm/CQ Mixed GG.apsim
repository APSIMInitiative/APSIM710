<folder version="36" name="Grazing simulations">
  <memo name="notes for CQ Mixed GG simulations">* 4000 ha property size
* cattle numbers: 1100 to 1500
* all cattle are on adjistment
* one class of stock on each pasture type
* all cattle in at 250 kg, and out at  400kg (weight gain = 150kg)
* Paid on weight gain - so essentially makes profit on 150kg of liveweight gain per beast

sowing window:
-------------------------
forage oats = 1st marc to 30 April (I extended it to 1 Jul)
forage sorghum = 1 sep - 31 dec

stocking rates
---------------------
buffel = 0.3 beasts/ha (set stocking rate)
leucaena = 
forage oats 1 beast per ha (initial stocking rate for 3 months, then reduce to stock by taking 30% off)
forage sorghum = 1 beast/ha


ready for grazing:
-------------------------
buffel = all year (leave most animals on this paddock, but move to other +paddocks when feed is available, eg oats)
leucaena = all year
forage oats = winter
forage sorghum = summer

rules for moving animals around:
-----------------------------------------------
buffel: cattle always grazing buffel all year around.
            if biomass &lt; 800 kg/ha, then move stock out to leucaena paddock


oats : if biomass &gt; 1500 kg/ha, then ready for grazing
            if biomass &lt; 1000 kg/ha, then move stock out


sorghum : if biomass &gt; 2500 kg/ha, then ready for grazing
            if biomass &lt; 1000 kg/ha, then move stock out


sell rule - sell in lotsof 120 when weight &gt; 400kg.
------
</memo>
  <folder name="common stuff">
    <clock>
      <start_date type="date" description="Enter the start date of the simulation">1/1/1980</start_date>
      <end_date type="date" description="Enter the end date of the simulation">31/12/1989</end_date>
    </clock>
    <metfile name="met">
      <filename name="filename" input="yes">%apsim%\Examples\MetFiles\Goond.met</filename>
    </metfile>
    <Soil name="Grey Vertosol-Belah-Brigalow (Inglestone No093)">
      <Comment type="multiedit" description="Comments">Soil naming structure: \State\Region\Classification-Local Name (Site/district and locator number)</Comment>
      <SoilType description="Soil description">Grey Vertosol</SoilType>
      <Site>+</Site>
      <NearestTown description="Nearest town">Meandarra, Q 4422</NearestTown>
      <Region>Maranoa</Region>
      <State>Queensland</State>
      <NaturalVegetation description="Natural vegetation">Belah, Brigalow</NaturalVegetation>
      <ApsoilNumber description="Apsoil number">93</ApsoilNumber>
      <Latitude description="Latitude (WGS84)">-27.723</Latitude>
      <Longitude>149.813</Longitude>
      <LocationAccuracy description="Location accuracy">+-20m</LocationAccuracy>
      <DataSource type="multiedit" description="Data source">CSIRO Sustainable Ecosystems, Toowoomba</DataSource>
      <Water>
        <SoilCrop name="wheat">
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <LL>
            <double>0.22</double>
            <double>0.22</double>
            <double>0.24</double>
            <double>0.26</double>
            <double>0.29</double>
            <double>0.3</double>
            <double>0.34</double>
          </LL>
          <KL>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.04</double>
            <double>0.04</double>
            <double>0.02</double>
            <double>0.02</double>
          </KL>
          <XF>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
          </XF>
        </SoilCrop>
        <SoilCrop name="oats">
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <LL>
            <double>0.22</double>
            <double>0.22</double>
            <double>0.24</double>
            <double>0.26</double>
            <double>0.29</double>
            <double>0.3</double>
            <double>0.34</double>
          </LL>
          <KL>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.04</double>
            <double>0.04</double>
            <double>0.02</double>
            <double>0.02</double>
          </KL>
          <XF>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
          </XF>
        </SoilCrop>
        <SoilCrop name="chickpea">
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <LL>
            <double>0.22</double>
            <double>0.22</double>
            <double>0.25</double>
            <double>0.3</double>
            <double>0.31</double>
            <double>0.31</double>
            <double>0.34</double>
          </LL>
          <KL>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.06</double>
          </KL>
          <XF>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
          </XF>
        </SoilCrop>
        <SoilCrop name="cotton">
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <LL>
            <double>0.22</double>
            <double>0.22</double>
            <double>0.23</double>
            <double>0.26</double>
            <double>0.28</double>
            <double>0.3</double>
            <double>0.32</double>
          </LL>
          <KL>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.09</double>
            <double>0.07</double>
            <double>0.05</double>
          </KL>
          <XF>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
          </XF>
        </SoilCrop>
        <SoilCrop name="sorghum">
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <LL>
            <double>0.22</double>
            <double>0.22</double>
            <double>0.23</double>
            <double>0.24</double>
            <double>0.27</double>
            <double>0.33</double>
            <double>0.34</double>
          </LL>
          <KL>
            <double>0.07</double>
            <double>0.07</double>
            <double>0.07</double>
            <double>0.05</double>
            <double>0.05</double>
            <double>0.04</double>
            <double>0.03</double>
          </KL>
          <XF>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
          </XF>
        </SoilCrop>
        <SoilCrop name="mungbean">
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <LL>
            <double>0.22</double>
            <double>0.22</double>
            <double>0.29</double>
            <double>0.36</double>
            <double>0.35</double>
            <double>0.37</double>
            <double>0.35</double>
          </LL>
          <KL>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.04</double>
            <double>0.04</double>
            <double>0.01</double>
            <double>0.01</double>
          </KL>
          <XF>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
          </XF>
        </SoilCrop>
        <SoilCrop name="SweetSorghum">
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <LL>
            <double>0.22</double>
            <double>0.22</double>
            <double>0.24</double>
            <double>0.26</double>
            <double>0.29</double>
            <double>0.3</double>
            <double>0.34</double>
          </LL>
          <KL>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.04</double>
            <double>0.04</double>
            <double>0.02</double>
            <double>0.02</double>
          </KL>
          <XF>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
          </XF>
        </SoilCrop>
        <Thickness>
          <double>150</double>
          <double>150</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
        </Thickness>
        <BD>
          <double>1.36</double>
          <double>1.33</double>
          <double>1.32</double>
          <double>1.32</double>
          <double>1.37</double>
          <double>1.46</double>
          <double>1.5</double>
        </BD>
        <AirDry>
          <double>0.11</double>
          <double>0.176</double>
          <double>0.23</double>
          <double>0.23</double>
          <double>0.23</double>
          <double>0.23</double>
          <double>0.23</double>
        </AirDry>
        <LL15>
          <double>0.22</double>
          <double>0.22</double>
          <double>0.23</double>
          <double>0.23</double>
          <double>0.23</double>
          <double>0.23</double>
          <double>0.23</double>
        </LL15>
        <DUL>
          <double>0.41</double>
          <double>0.42</double>
          <double>0.42</double>
          <double>0.42</double>
          <double>0.4</double>
          <double>0.37</double>
          <double>0.35</double>
        </DUL>
        <SAT>
          <double>0.46</double>
          <double>0.47</double>
          <double>0.47</double>
          <double>0.47</double>
          <double>0.45</double>
          <double>0.42</double>
          <double>0.4</double>
        </SAT>
      </Water>
      <SoilWater>
        <SummerCona>3.5</SummerCona>
        <SummerU>6</SummerU>
        <SummerDate>1-Nov</SummerDate>
        <WinterCona>2.5</WinterCona>
        <WinterU>4</WinterU>
        <WinterDate>1-apr</WinterDate>
        <DiffusConst>40</DiffusConst>
        <DiffusSlope>16</DiffusSlope>
        <Salb>0.12</Salb>
        <CN2Bare>73</CN2Bare>
        <CNRed>20</CNRed>
        <CNCov>0.8</CNCov>
        <Thickness>
          <double>150</double>
          <double>150</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
        </Thickness>
        <SWCON>
          <double>0.3</double>
          <double>0.3</double>
          <double>0.3</double>
          <double>0.3</double>
          <double>0.3</double>
          <double>0.3</double>
          <double>0.3</double>
        </SWCON>
      </SoilWater>
      <SoilOrganicMatter>
        <RootCN>40</RootCN>
        <RootWt>1000</RootWt>
        <SoilCN>12</SoilCN>
        <EnrACoeff>7.4</EnrACoeff>
        <EnrBCoeff>0.2</EnrBCoeff>
        <Thickness>
          <double>150</double>
          <double>150</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
        </Thickness>
        <OC>
          <double>1.19</double>
          <double>1.01</double>
          <double>0.45</double>
          <double>0.3</double>
          <double>0.2</double>
          <double>0.16</double>
          <double>0.17</double>
        </OC>
        <FBiom>
          <double>0.04</double>
          <double>0.02</double>
          <double>0.02</double>
          <double>0.02</double>
          <double>0.01</double>
          <double>0.01</double>
          <double>0.01</double>
        </FBiom>
        <FInert>
          <double>0.4</double>
          <double>0.6</double>
          <double>0.8</double>
          <double>1</double>
          <double>1</double>
          <double>1</double>
          <double>1</double>
        </FInert>
      </SoilOrganicMatter>
      <Analysis>
        <Thickness>
          <double>150</double>
          <double>150</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
        </Thickness>
        <PH>
          <double>8.2</double>
          <double>8.5</double>
          <double>8.6</double>
          <double>8.6</double>
          <double>7.4</double>
          <double>5.3</double>
          <double>5.3</double>
        </PH>
      </Analysis>
      <Sample name="Initial nitrogen">
        <Date type="date" description="Sample date:" />
        <Thickness>
          <double>150</double>
          <double>150</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
        </Thickness>
        <NO3>
          <double>5.99945459503682</double>
          <double>4.99954549586402</double>
          <double>2.9997272975184</double>
          <double>1.99981819834561</double>
          <double>0.999909099172802</double>
          <double>0.999909099172802</double>
          <double>0.999909099172802</double>
        </NO3>
        <NH4>
          <double>0.942103460089073</double>
          <double>0.94210346008907</double>
          <double>0.847893114080164</double>
          <double>0.659472422062351</double>
          <double>0.188420692017814</double>
          <double>0.0942103460089073</double>
          <double>0.00942103460089072</double>
        </NH4>
      </Sample>
      <InitialWater name="Initial water">
        <RelativeTo>oats</RelativeTo>
        <FractionFull>1.00</FractionFull>
        <PercentMethod>EvenlyDistributed</PercentMethod>
      </InitialWater>
    </Soil>
    <Soil name="Grey Vertosol Brigalow (Wallumbilla No100)">
      <Comment type="multiedit" description="Comments">Soil naming structure: \State\Region\Classification-Local Name (Site/district and locator number)</Comment>
      <SoilType description="Soil description">Grey Vertosol</SoilType>
      <Site>Wallumbilla</Site>
      <NearestTown description="Nearest town">Wallumbilla, Q 4428</NearestTown>
      <Region>Maranoa</Region>
      <State>Queensland</State>
      <NaturalVegetation description="Natural vegetation">Brigalow, Belah scrub</NaturalVegetation>
      <ApsoilNumber description="Apsoil number">100</ApsoilNumber>
      <Latitude description="Latitude (WGS84)">-26.647</Latitude>
      <Longitude>149.047</Longitude>
      <LocationAccuracy description="Location accuracy">+-20m</LocationAccuracy>
      <DataSource type="multiedit" description="Data source">CSIRO Sustainable Ecosystems, Toowoomba</DataSource>
      <Water>
        <SoilCrop name="wheat">
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <LL>
            <double>0.22</double>
            <double>0.22</double>
            <double>0.25</double>
            <double>0.26</double>
            <double>0.26</double>
            <double>0.3</double>
            <double>0.34</double>
          </LL>
          <KL>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.04</double>
            <double>0.04</double>
            <double>0.02</double>
            <double>0.02</double>
          </KL>
          <XF>
            <double>1</double>
            <double>1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.08</double>
            <double>0.22</double>
            <double>0.26</double>
          </XF>
        </SoilCrop>
        <SoilCrop name="chickpea">
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <LL>
            <double>0.22</double>
            <double>0.22</double>
            <double>0.25</double>
            <double>0.26</double>
            <double>0.26</double>
            <double>0.3</double>
            <double>0.34</double>
          </LL>
          <KL>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.04</double>
            <double>0.04</double>
            <double>0.02</double>
            <double>0.02</double>
          </KL>
          <XF>
            <double>1</double>
            <double>1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.08</double>
            <double>0.22</double>
            <double>0.26</double>
          </XF>
        </SoilCrop>
        <SoilCrop name="weed">
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <LL>
            <double>0.22</double>
            <double>0.22</double>
            <double>0.25</double>
            <double>0.26</double>
            <double>0.26</double>
            <double>0.3</double>
            <double>0.34</double>
          </LL>
          <KL>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.06</double>
            <double>0.04</double>
            <double>0.04</double>
            <double>0.02</double>
            <double>0.02</double>
          </KL>
          <XF>
            <double>1</double>
            <double>1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.08</double>
            <double>0.22</double>
            <double>0.26</double>
          </XF>
        </SoilCrop>
        <Thickness>
          <double>150</double>
          <double>150</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
        </Thickness>
        <BD>
          <double>1.36</double>
          <double>1.37</double>
          <double>1.38</double>
          <double>1.43</double>
          <double>1.47</double>
          <double>1.53</double>
          <double>1.53</double>
        </BD>
        <AirDry>
          <double>0.11</double>
          <double>0.176</double>
          <double>0.25</double>
          <double>0.25</double>
          <double>0.25</double>
          <double>0.25</double>
          <double>0.25</double>
        </AirDry>
        <LL15>
          <double>0.22</double>
          <double>0.22</double>
          <double>0.25</double>
          <double>0.25</double>
          <double>0.25</double>
          <double>0.25</double>
          <double>0.25</double>
        </LL15>
        <DUL>
          <double>0.41</double>
          <double>0.4</double>
          <double>0.4</double>
          <double>0.38</double>
          <double>0.37</double>
          <double>0.34</double>
          <double>0.34</double>
        </DUL>
        <SAT>
          <double>0.46</double>
          <double>0.45</double>
          <double>0.45</double>
          <double>0.43</double>
          <double>0.42</double>
          <double>0.39</double>
          <double>0.39</double>
        </SAT>
      </Water>
      <SoilWater>
        <SummerCona>3.5</SummerCona>
        <SummerU>6</SummerU>
        <SummerDate>1-Nov</SummerDate>
        <WinterCona>2.5</WinterCona>
        <WinterU>4</WinterU>
        <WinterDate>1-apr</WinterDate>
        <DiffusConst>40</DiffusConst>
        <DiffusSlope>16</DiffusSlope>
        <Salb>0.12</Salb>
        <CN2Bare>73</CN2Bare>
        <CNRed>20</CNRed>
        <CNCov>0.8</CNCov>
        <Thickness>
          <double>150</double>
          <double>150</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
        </Thickness>
        <SWCON>
          <double>0.3</double>
          <double>0.3</double>
          <double>0.3</double>
          <double>0.3</double>
          <double>0.3</double>
          <double>0.3</double>
          <double>0.3</double>
        </SWCON>
      </SoilWater>
      <SoilOrganicMatter>
        <RootCN>40</RootCN>
        <RootWt>1000</RootWt>
        <SoilCN>12</SoilCN>
        <EnrACoeff>7.4</EnrACoeff>
        <EnrBCoeff>0.2</EnrBCoeff>
        <Thickness>
          <double>150</double>
          <double>150</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
        </Thickness>
        <OC>
          <double>1.5</double>
          <double>1</double>
          <double>0.6</double>
          <double>0.4</double>
          <double>0.1</double>
          <double>0.07</double>
          <double>0.07</double>
        </OC>
        <FBiom>
          <double>0.04</double>
          <double>0.02</double>
          <double>0.02</double>
          <double>0.02</double>
          <double>0.01</double>
          <double>0.01</double>
          <double>0.01</double>
        </FBiom>
        <FInert>
          <double>0.4</double>
          <double>0.6</double>
          <double>0.8</double>
          <double>1</double>
          <double>1</double>
          <double>1</double>
          <double>1</double>
        </FInert>
      </SoilOrganicMatter>
      <Analysis>
        <Thickness>
          <double>150</double>
          <double>150</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
        </Thickness>
        <EC>
          <double>0.2</double>
          <double>0.3</double>
          <double>3.4</double>
          <double>3.8</double>
          <double>1.9</double>
          <double>1.3</double>
          <double>1.2</double>
        </EC>
        <PH>
          <double>8.7</double>
          <double>8.8</double>
          <double>7.7</double>
          <double>7.7</double>
          <double>7.1</double>
          <double>5.8</double>
          <double>5.8</double>
        </PH>
        <CL>
          <double>21</double>
          <double>3</double>
          <double>17</double>
          <double>112</double>
          <double>403</double>
          <double>872</double>
          <double>1047</double>
        </CL>
      </Analysis>
      <Sample name="Initial nitrogen">
        <Date type="date" description="Sample date:" />
        <Thickness>
          <double>150</double>
          <double>150</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
          <double>300</double>
        </Thickness>
        <NO3>
          <double>5.74382538770821</double>
          <double>5.74382538770821</double>
          <double>5.74382538770822</double>
          <double>5.74382538770822</double>
          <double>5.74382538770822</double>
          <double>5.74382538770821</double>
          <double>5.74382538770821</double>
        </NO3>
        <NH4>
          <double>0.100019146084626</double>
          <double>0.100019146084626</double>
          <double>0.100019146084626</double>
          <double>0.100019146084626</double>
          <double>0.100019146084626</double>
          <double>0.100019146084626</double>
          <double>0.100019146084626</double>
        </NH4>
      </Sample>
      <InitialWater name="Initial water">
        <FractionFull>1</FractionFull>
        <PercentMethod>FilledFromTop</PercentMethod>
      </InitialWater>
    </Soil>
    <tclmanager name="Farm Manager">
      <rule name="Empty rule">
        <script name="init">
          <text>
          </text>
          <event>init</event>
        </script>
      </rule>
      <rule name="Initialisation logic">
        <script name="init">
          <text>

set config(toplevel,initialState)         {}

set config(p1,initialState)         Fallow
set config(p1,history)              {sorghum sorghum}
set config(p1,daysSinceLastHarvest) 365              ;# A long time
set config(p1,area)                 200.0
</text>
          <event>init</event>
        </script>
      </rule>
      <rule name="Rugplot stuff">
        <script>
          <text>
# Rug plotting facility

# 2 areas of interest:
# - logState - called when a graph is changing state, called just after the "actions" have been evaluated

# a logfile is used to generate the rugplots of farm activities. There are 2 parts:
# an xml of paddocks, states &amp; times,
# a binary of decision rules on each evaluation cycle
proc log {msg} {
   #puts $msg
}

package require cdftcl
package require tdom

proc setupLogging {} {
   global simName config 

   # Find the number of graphs - 1 file for each. Delete each.
   set config(graphs) {}
   foreach paddock $config(paddocks) {
     foreach graph $config($paddock,graphNames) {
        if {[lsearch $config(graphs) $graph] &lt; 0} {
           lappend config(graphs) $graph
        }
     }
  }
  foreach graph $config(graphs) {
    apsimWriteToSummaryFile "deleting $simName.$graph.\[xml,nc\]"
    file delete -force $simName.$graph.xml
    file delete -force $simName.$graph.nc
    foreach paddock $config(paddocks) {
       set config(history,$paddock,$graph) {}
    }
  }
  set config(states) {}
  set config(rules) {}
  set config(historyDays) {}
}

# Log a set of rule evaluations
proc logRules {paddock graph rules values } {
   global config history

   set data {}
   for {set i 0} {$i &lt; [llength $rules]} {incr i} {
      lappend data [lindex $rules $i] [lindex $values $i]
   }

   set today [apsimGet today]

   lappend history($paddock,$graph,$today) $data

   if {[lsearch $config(historyDays) $today] &lt; 0} {
       lappend config(historyDays) $today
       set config($today,ddmmyyyy) [apsimGet clock.dd/mm/yyyy]
   }
}

# Log a state transition
proc logState {graph paddock state} {
   global config
   set today [apsimGet today]
   lappend config(history,$paddock,$graph) $today $state
   if {[lsearch $config(states) $state] &lt; 0} {lappend config(states) $state}
}

# Write the files. 
proc closeLogging {} {
   global config history simName

   set config(xmldoc) [dom parse [apsimGetComponentXML]]
   set config(docroot) [$config(xmldoc) documentElement]

   foreach graph $config(graphs) {
      set ncfp [ncdf create $simName.$graph.nc] 
      ncdfdim $ncfp create index [llength $config(historyDays)]
      ncdfdim $ncfp create time -1

      ncdfvar $ncfp create position long {index}
      ncdfvar $ncfp create daynum float {index}

      ncdfvar $ncfp create day     float {time}
      ncdfvar $ncfp create paddock short {time}
      ncdfvar $ncfp create rule    short {time}
      ncdfvar $ncfp create value   float {time}

      set day [lindex $config(historyDays) 0]
      ncdfatt $ncfp GLOBAL put startdate float $day
      ncdfatt $ncfp GLOBAL put startddmmyyyy char $config($day,ddmmyyyy)

      set day [lindex $config(historyDays) end]
      ncdfatt $ncfp GLOBAL put enddate float $day
      ncdfatt $ncfp GLOBAL put endddmmyyyy char $config($day,ddmmyyyy)

      ncdf enddef $ncfp
      set id 0
      foreach p $config(paddocks) {
         set pid($p) $id; incr id
      }   
	    catch {unset pos}
      set i 0
      foreach day $config(historyDays) {
         foreach paddock $config(paddocks) {
            if {[info exists history($paddock,$graph,$day)]} {
               set pos($paddock,$day) $i
               foreach data $history($paddock,$graph,$day) {
                  foreach {rule value} $data {
                     ncdfvar $ncfp put day     $i $day
                     ncdfvar $ncfp put paddock $i $pid($paddock)
                     ncdfvar $ncfp put rule    $i $rule
                     ncdfvar $ncfp put value   $i $value
                     incr i
                  } 
               }
            }
         }
      }

	    #Positions
      for {set i 0} {$i &lt; [llength $config(historyDays)]} {incr i} {
         set day [lindex $config(historyDays) $i]
         set f 0
         foreach paddock $config(paddocks) {
            if {[info exists pos($paddock,$day)]} {
               ncdfvar $ncfp put position  $i $pos($paddock,$day)
               set f 1
               break
            } 
         }
         if {!$f} {
            ncdfvar $ncfp put position  $i -1
         }   
      }
      
      for {set j 0} {$j &lt; [llength $config(historyDays)]} {incr j} {
         ncdfvar $ncfp put daynum $j [lindex $config(historyDays) $j]
      }   

      ncdf close $ncfp

      set fp [open $simName.$graph.xml w]
      puts $fp "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;simulation&gt;"
      set id 0
      foreach paddock $config(paddocks) {
         puts $fp "&lt;history id=\"$id\" name=\"$paddock\"&gt;"
         foreach {day state} $config(history,$paddock,$graph) {
            if {[info exists pos($paddock,$day)]} {
               puts $fp "&lt;transition day=\"$day\" to=\"$state\" position=\"$pos($paddock,$day)\" /&gt;"
            } 
         }
         puts $fp "&lt;/history&gt;"
         incr id
      }

      foreach paddock $config(paddocks) {
         puts $fp "&lt;paddock id=\"$pid($paddock)\" name=\"$paddock\" /&gt;"
      }   
      set id 0
      foreach rule $config(rules) {
         set rule [string map {\&lt; "&amp;lt;"  \&gt; "&amp;gt;"     
                               \&amp; "&amp;amp;" \" "&amp;quot;"  
                               \[ "&amp;#91;" \] "&amp;#93;"    } $rule]
         puts $fp "&lt;rule id=\"$id\" name=\"$rule\" /&gt;"
         incr id
      }

      # Colours
      foreach node [$config(docroot) selectNodes //node] {
          set state [getValue $node "name"]
          set colour [getValue $node "fill"]
          puts $fp "&lt;state name=\"$state\" colour=\"$colour\" /&gt;"
      }

      set day [lindex $config(historyDays) 0]
      puts $fp "&lt;startdate ddmmyyyy=\"$config($day,ddmmyyyy)\" day=\"$day\" /&gt;"
      set day [lindex $config(historyDays) end]
      puts $fp "&lt;enddate ddmmyyyy=\"$config($day,ddmmyyyy)\" day=\"$day\" /&gt;"

      puts $fp "&lt;/simulation&gt;"
      close $fp
   }  
   # $config(xmldoc) delete
}

# Override the "standard" decision routine to keep track of state info
proc checkRules {thisPaddock} {
  global config 
  uplevel #0 set paddock $thisPaddock
  set bestScore -1.0; set bestTarget {}; set bestArc {}; set bestGraph {}
  foreach graph $config($thisPaddock,graphNames) {
     foreach arc [$graph arcs -out [currentState $thisPaddock]] {
        set values {}; set rules {}
        set target [$graph arc target $arc]
        if {[$graph arc keyexists $arc window]} {set inWindow [uplevel #0 expr [$graph arc get $arc window]]} else {set inWindow 0}
        foreach rule [$graph arc get $arc rules] {
           set value [uplevel #0 expr $rule]
           lappend values $value
           lappend rules [enCodeRule $target $rule]
        }
        logRules $thisPaddock $graph $rules $values
        if {[llength $values] &gt; 0} {
           set score [expr [join $values "*"]]
           if {$score &gt; $bestScore} {
              set bestScore  $score
              set bestTarget $target
              set bestArc    $arc
              set bestGraph  $graph
           }
        }
     }
  }   
  return [list  $bestScore $bestGraph $bestTarget $bestArc]
}

proc enCodeRule {target ruleText} {
  global config
  regsub -all "\," $ruleText "\-" ruleText

  for {set i 0} {$i &lt; [llength $config(rules)]} {incr i} {
     set rule [lindex $config(rules) $i]
     if {[string equal $rule "$target,$ruleText"]} {
        return $i
     }
  }
  lappend config(rules) "$target,$ruleText"
  return [expr [llength $config(rules)] - 1]
}


# Get the value of an objects 'thing'
proc getValue {id thing} {
   foreach node [$id childNodes] {
      if {[string equal -nocase [$node nodeName] $thing]} {
         return [$node text]
      }
   }
   return ""
}

</text>
          <event>init</event>
        </script>
        <script>
          <text>
setupLogging

foreach paddock $config(paddocks) {
   logState stateGraph $paddock [currentState $paddock]
}
</text>
          <event>start_simulation</event>
        </script>
        <script>
          <text>
closeLogging
</text>
          <event>end_simulation</event>
        </script>
      </rule>
      <RotPlot name="Rotation Management">
        <canvas_height>339</canvas_height>
        <rules_height>189</rules_height>
        <graph_name>GrainCrops</graph_name>
        <node>
          <name>Chickpea</name>
          <x1>386</x1>
          <y1>281</y1>
          <desc>New state</desc>
          <fill>-16711872</fill>
        </node>
        <node>
          <name>Fallow_4</name>
          <x1>233</x1>
          <y1>294</y1>
          <desc>New state</desc>
          <fill>-657956</fill>
        </node>
        <node>
          <name>Wheat_1</name>
          <x1>71</x1>
          <y1>10</y1>
          <desc>New state</desc>
          <fill>-256</fill>
        </node>
        <node>
          <name>Wheat</name>
          <x1>10</x1>
          <y1>290</y1>
          <desc>New state</desc>
          <fill>-128</fill>
        </node>
        <node>
          <name>Fallow</name>
          <x1>80</x1>
          <y1>152</y1>
          <desc>yyy</desc>
          <fill>-657956</fill>
        </node>
        <node>
          <name>Fallow_1</name>
          <x1>217</x1>
          <y1>19</y1>
          <desc>New state</desc>
          <fill>-657956</fill>
        </node>
        <node>
          <name>Fallow_2</name>
          <x1>487</x1>
          <y1>29</y1>
          <desc>New state</desc>
          <fill>-657956</fill>
        </node>
        <node>
          <name>Wheat_2</name>
          <x1>354</x1>
          <y1>20</y1>
          <desc>New state</desc>
          <fill>-32704</fill>
        </node>
        <node>
          <name>Spray</name>
          <x1>600</x1>
          <y1>304</y1>
          <desc>Spray chickpeas</desc>
          <fill>-657956</fill>
        </node>
        <node>
          <name>Fallow_3</name>
          <x1>556</x1>
          <y1>180</y1>
          <desc>New state</desc>
          <fill>-657956</fill>
        </node>
        <node>
          <name>Wheat_3</name>
          <x1>600</x1>
          <y1>22</y1>
          <desc>New state</desc>
          <fill>-32768</fill>
        </node>
        <arc>
          <name>arc11</name>
          <source>Fallow_1</source>
          <target>Fallow_2</target>
          <x>407</x>
          <y>195</y>
          <actions>set config($paddock,yr)   [apsimGet year]</actions>
          <rules>[apsimGet day] == 153</rules>
          <rules>[apsimGet year] &gt; $config($paddock,yr) </rules>
        </arc>
        <arc>
          <name>arc12</name>
          <source>Fallow_2</source>
          <target>Fallow_3</target>
          <x>496</x>
          <y>207</y>
          <actions>set config($paddock,yr)   [apsimGet year]</actions>
          <rules>[apsimGet day] == 153</rules>
          <rules>[apsimGet year] &gt; $config($paddock,yr) </rules>
        </arc>
        <arc>
          <name>arc13</name>
          <source>Fallow_4</source>
          <target>Fallow</target>
          <x>235</x>
          <y>240</y>
          <actions>set config($paddock,yr)   [apsimGet year]</actions>
          <rules>[apsimGet day] == 153</rules>
          <rules>[apsimGet year]  &gt; $config($paddock,yr) </rules>
        </arc>
        <arc>
          <name>arc14</name>
          <source>Fallow_3</source>
          <target>Fallow_4</target>
          <x>353</x>
          <y>249</y>
          <actions>set config($paddock,yr)   [apsimGet year]</actions>
          <rules>[apsimGet day] == 153</rules>
          <rules>[apsimGet year] &gt; $config($paddock,yr) </rules>
        </arc>
        <arc>
          <name>arc16</name>
          <source>Chickpea</source>
          <target>Spray</target>
          <x>558</x>
          <y>329</y>
          <actions>sprayChickpeas $paddock</actions>
          <actions>set numChickSprays($paddock) 1</actions>
          <rules>[set chickPeaRain($paddock) [expr $chickPeaRain($paddock) + [apsimGet rain]]] &gt; 150</rules>
          <rules>$numChickSprays($paddock) == 0</rules>
        </arc>
        <arc>
          <name>arc0</name>
          <source>Wheat_1</source>
          <target>Fallow_1</target>
          <x>195</x>
          <y>22</y>
          <actions>harvestAndEndCrop $paddock wheat</actions>
          <rules>[canHarvestCrop $paddock wheat]</rules>
        </arc>
        <arc>
          <name>arc17</name>
          <source>Spray</source>
          <target>Chickpea</target>
          <x>473</x>
          <y>378</y>
          <rules>1</rules>
        </arc>
        <arc>
          <name>arc1</name>
          <source>Chickpea</source>
          <target>Fallow_4</target>
          <x>341</x>
          <y>337</y>
          <actions>harvestAndEndCrop $paddock chickpea</actions>
          <actions>set config($paddock,yr)   [apsimGet year]</actions>
          <rules>[canHarvestCrop $paddock chickpea]</rules>
        </arc>
        <arc>
          <name>arc2</name>
          <source>Wheat</source>
          <target>Fallow</target>
          <x>68</x>
          <y>273</y>
          <actions>harvestAndEndCrop $paddock wheat</actions>
          <rules>[canHarvestCrop $paddock wheat]</rules>
        </arc>
        <arc>
          <name>arc3</name>
          <source>Fallow</source>
          <target>Wheat_1</target>
          <x>74</x>
          <y>145</y>
          <actions>sowCrop $paddock wheat</actions>
          <rules>[dayWithin 129 152]</rules>
          <rules>[getEsw $paddock] &gt; 183</rules>
          <rules>[getMSeek2 $paddock] &gt; 0.65</rules>
          <rules>$daysSinceLastHarvest($paddock) &gt; 30</rules>
          <rules>[machineryAvailable tractor1_planter]</rules>
          <rules>[areaPlanted wheat]  &lt;=1</rules>
          <rules>[getEsw $paddock]</rules>
        </arc>
        <arc>
          <name>arc4</name>
          <source>Wheat_2</source>
          <target>Fallow_2</target>
          <x>474</x>
          <y>19</y>
          <actions>harvestAndEndCrop $paddock wheat</actions>
          <rules>[canHarvestCrop $paddock wheat]</rules>
        </arc>
        <arc>
          <name>arc5</name>
          <source>Fallow_1</source>
          <target>Wheat_2</target>
          <x>342</x>
          <y>25</y>
          <actions>sowCrop $paddock wheat</actions>
          <rules>[dayWithin 129 152]</rules>
          <rules>[getEsw $paddock] &gt; 183</rules>
          <rules>[getMSeek2 $paddock] &gt; 0.65</rules>
          <rules>$daysSinceLastHarvest($paddock) &gt; 30</rules>
          <rules>[machineryAvailable tractor1_planter]</rules>
          <rules>[areaPlanted wheat]  &lt;=1</rules>
          <rules>[getEsw $paddock]</rules>
        </arc>
        <arc>
          <name>arc6</name>
          <source>Fallow_3</source>
          <target>Chickpea</target>
          <x>475</x>
          <y>263</y>
          <actions>sowCrop $paddock chickpea</actions>
          <actions>set chickPeaRain($paddock) 0.0</actions>
          <actions>set numChickSprays($paddock) 0</actions>
          <rules>[dayWithin 135 151]</rules>
          <rules>[getEsw $paddock] &gt; 183                 ;# is on LL15 not crop</rules>
          <rules>$daysSinceLastHarvest($paddock) &gt;30</rules>
          <rules>[areaPlanted Chickpea] &lt;0.2</rules>
          <rules>[getMSeek2 $paddock] &gt; 0.65</rules>
          <rules>[machineryAvailable tractor1_planter]</rules>
          <rules>[getEsw $paddock]</rules>
        </arc>
        <arc>
          <name>arc7</name>
          <source>Fallow_4</source>
          <target>Wheat</target>
          <x>176</x>
          <y>402</y>
          <actions>sowCrop $paddock wheat</actions>
          <rules>[dayWithin 129 152]</rules>
          <rules>[getEsw $paddock] &gt; 183</rules>
          <rules>[getMSeek2 $paddock] &gt; 0.65</rules>
          <rules>$daysSinceLastHarvest($paddock) &gt; 30</rules>
          <rules>[machineryAvailable tractor1_planter]</rules>
          <rules>[areaPlanted wheat]  &lt;=1</rules>
          <rules>[getEsw $paddock]</rules>
        </arc>
        <arc>
          <name>arc8</name>
          <source>Fallow_2</source>
          <target>Wheat_3</target>
          <x>586</x>
          <y>22</y>
          <actions>sowCrop $paddock wheat</actions>
          <rules>[dayWithin 129 152]</rules>
          <rules>[getEsw $paddock] &gt; 183</rules>
          <rules>[getMSeek2 $paddock] &gt; 0.65</rules>
          <rules>$daysSinceLastHarvest($paddock) &gt; 30</rules>
          <rules>[machineryAvailable tractor1_planter]</rules>
          <rules>[areaPlanted wheat]  &lt;=1</rules>
          <rules>[getEsw $paddock]</rules>
        </arc>
        <arc>
          <name>arc9</name>
          <source>Wheat_3</source>
          <target>Fallow_3</target>
          <x>674</x>
          <y>169</y>
          <actions>harvestAndEndCrop $paddock wheat</actions>
          <rules>[canHarvestCrop $paddock wheat]</rules>
        </arc>
        <arc>
          <name>arc10</name>
          <source>Fallow</source>
          <target>Fallow_1</target>
          <x>193</x>
          <y>119</y>
          <actions>set config($paddock,yr)   [apsimGet year]</actions>
          <rules>[apsimGet day] == 153</rules>
          <rules>[apsimGet year] &gt; $config($paddock,yr) </rules>
        </arc>
        <paddock>
          <name>p1</name>
          <isManaged>1</isManaged>
          <initialState>Fallow</initialState>
        </paddock>
        <paddock>
          <name>p2</name>
          <isManaged>1</isManaged>
          <initialState>Fallow</initialState>
        </paddock>
        <paddock>
          <name>p3</name>
          <isManaged>1</isManaged>
          <initialState>Fallow</initialState>
        </paddock>
        <paddock>
          <name>p4</name>
          <isManaged>1</isManaged>
          <initialState>Fallow</initialState>
        </paddock>
        <paddock>
          <name>p5</name>
          <isManaged>1</isManaged>
          <initialState>Fallow</initialState>
        </paddock>
        <rule name="GrainCrops Init rule" invisible="yes" condition="init"><![CDATA[package require struct
::struct::graph GrainCrops
GrainCrops node insert "Chickpea"
set colour(Chickpea) "-16711872"
GrainCrops node insert "Fallow_4"
set colour(Fallow_4) "-657956"
GrainCrops node insert "Wheat_1"
set colour(Wheat_1) "-256"
GrainCrops node insert "Wheat"
set colour(Wheat) "-128"
GrainCrops node insert "Fallow"
set colour(Fallow) "-657956"
GrainCrops node insert "Fallow_1"
set colour(Fallow_1) "-657956"
GrainCrops node insert "Fallow_2"
set colour(Fallow_2) "-657956"
GrainCrops node insert "Wheat_2"
set colour(Wheat_2) "-32704"
GrainCrops node insert "Spray"
set colour(Spray) "-657956"
GrainCrops node insert "Fallow_3"
set colour(Fallow_3) "-657956"
GrainCrops node insert "Wheat_3"
set colour(Wheat_3) "-32768"
GrainCrops arc insert "Fallow_1" "Fallow_2" "arc11"
GrainCrops arc lappend "arc11" actions {set config($paddock,yr)   [apsimGet year]}
GrainCrops arc lappend "arc11" rules {[apsimGet day] == 153}
GrainCrops arc lappend "arc11" rules {[apsimGet year] > $config($paddock,yr) }
GrainCrops arc insert "Fallow_2" "Fallow_3" "arc12"
GrainCrops arc lappend "arc12" actions {set config($paddock,yr)   [apsimGet year]}
GrainCrops arc lappend "arc12" rules {[apsimGet day] == 153}
GrainCrops arc lappend "arc12" rules {[apsimGet year] > $config($paddock,yr) }
GrainCrops arc insert "Fallow_4" "Fallow" "arc13"
GrainCrops arc lappend "arc13" actions {set config($paddock,yr)   [apsimGet year]}
GrainCrops arc lappend "arc13" rules {[apsimGet day] == 153}
GrainCrops arc lappend "arc13" rules {[apsimGet year]  > $config($paddock,yr) }
GrainCrops arc insert "Fallow_3" "Fallow_4" "arc14"
GrainCrops arc lappend "arc14" actions {set config($paddock,yr)   [apsimGet year]}
GrainCrops arc lappend "arc14" rules {[apsimGet day] == 153}
GrainCrops arc lappend "arc14" rules {[apsimGet year] > $config($paddock,yr) }
GrainCrops arc insert "Chickpea" "Spray" "arc16"
GrainCrops arc lappend "arc16" actions {sprayChickpeas $paddock}
GrainCrops arc lappend "arc16" actions {set numChickSprays($paddock) 1}
GrainCrops arc lappend "arc16" rules {[set chickPeaRain($paddock) [expr $chickPeaRain($paddock) + [apsimGet rain]]] > 150}
GrainCrops arc lappend "arc16" rules {$numChickSprays($paddock) == 0}
GrainCrops arc insert "Wheat_1" "Fallow_1" "arc0"
GrainCrops arc lappend "arc0" actions {harvestAndEndCrop $paddock wheat}
GrainCrops arc lappend "arc0" rules {[canHarvestCrop $paddock wheat]}
GrainCrops arc insert "Spray" "Chickpea" "arc17"
GrainCrops arc lappend "arc17" actions {}
GrainCrops arc lappend "arc17" rules {1}
GrainCrops arc insert "Chickpea" "Fallow_4" "arc1"
GrainCrops arc lappend "arc1" actions {harvestAndEndCrop $paddock chickpea}
GrainCrops arc lappend "arc1" actions {set config($paddock,yr)   [apsimGet year]}
GrainCrops arc lappend "arc1" rules {[canHarvestCrop $paddock chickpea]}
GrainCrops arc insert "Wheat" "Fallow" "arc2"
GrainCrops arc lappend "arc2" actions {harvestAndEndCrop $paddock wheat}
GrainCrops arc lappend "arc2" rules {[canHarvestCrop $paddock wheat]}
GrainCrops arc insert "Fallow" "Wheat_1" "arc3"
GrainCrops arc lappend "arc3" actions {sowCrop $paddock wheat}
GrainCrops arc lappend "arc3" rules {[dayWithin 129 152]}
GrainCrops arc lappend "arc3" rules {[getEsw $paddock] > 183}
GrainCrops arc lappend "arc3" rules {[getMSeek2 $paddock] > 0.65}
GrainCrops arc lappend "arc3" rules {$daysSinceLastHarvest($paddock) > 30}
GrainCrops arc lappend "arc3" rules {[machineryAvailable tractor1_planter]}
GrainCrops arc lappend "arc3" rules {[areaPlanted wheat]  <=1}
GrainCrops arc lappend "arc3" rules {[getEsw $paddock]}
GrainCrops arc insert "Wheat_2" "Fallow_2" "arc4"
GrainCrops arc lappend "arc4" actions {harvestAndEndCrop $paddock wheat}
GrainCrops arc lappend "arc4" rules {[canHarvestCrop $paddock wheat]}
GrainCrops arc insert "Fallow_1" "Wheat_2" "arc5"
GrainCrops arc lappend "arc5" actions {sowCrop $paddock wheat}
GrainCrops arc lappend "arc5" rules {[dayWithin 129 152]}
GrainCrops arc lappend "arc5" rules {[getEsw $paddock] > 183}
GrainCrops arc lappend "arc5" rules {[getMSeek2 $paddock] > 0.65}
GrainCrops arc lappend "arc5" rules {$daysSinceLastHarvest($paddock) > 30}
GrainCrops arc lappend "arc5" rules {[machineryAvailable tractor1_planter]}
GrainCrops arc lappend "arc5" rules {[areaPlanted wheat]  <=1}
GrainCrops arc lappend "arc5" rules {[getEsw $paddock]}
GrainCrops arc insert "Fallow_3" "Chickpea" "arc6"
GrainCrops arc lappend "arc6" actions {sowCrop $paddock chickpea}
GrainCrops arc lappend "arc6" actions {set chickPeaRain($paddock) 0.0}
GrainCrops arc lappend "arc6" actions {set numChickSprays($paddock) 0}
GrainCrops arc lappend "arc6" rules {[dayWithin 135 151]}
GrainCrops arc lappend "arc6" rules {[getEsw $paddock] > 183                 ;# is on LL15 not crop}
GrainCrops arc lappend "arc6" rules {$daysSinceLastHarvest($paddock) >30}
GrainCrops arc lappend "arc6" rules {[areaPlanted Chickpea] <0.2}
GrainCrops arc lappend "arc6" rules {[getMSeek2 $paddock] > 0.65}
GrainCrops arc lappend "arc6" rules {[machineryAvailable tractor1_planter]}
GrainCrops arc lappend "arc6" rules {[getEsw $paddock]}
GrainCrops arc insert "Fallow_4" "Wheat" "arc7"
GrainCrops arc lappend "arc7" actions {sowCrop $paddock wheat}
GrainCrops arc lappend "arc7" rules {[dayWithin 129 152]}
GrainCrops arc lappend "arc7" rules {[getEsw $paddock] > 183}
GrainCrops arc lappend "arc7" rules {[getMSeek2 $paddock] > 0.65}
GrainCrops arc lappend "arc7" rules {$daysSinceLastHarvest($paddock) > 30}
GrainCrops arc lappend "arc7" rules {[machineryAvailable tractor1_planter]}
GrainCrops arc lappend "arc7" rules {[areaPlanted wheat]  <=1}
GrainCrops arc lappend "arc7" rules {[getEsw $paddock]}
GrainCrops arc insert "Fallow_2" "Wheat_3" "arc8"
GrainCrops arc lappend "arc8" actions {sowCrop $paddock wheat}
GrainCrops arc lappend "arc8" rules {[dayWithin 129 152]}
GrainCrops arc lappend "arc8" rules {[getEsw $paddock] > 183}
GrainCrops arc lappend "arc8" rules {[getMSeek2 $paddock] > 0.65}
GrainCrops arc lappend "arc8" rules {$daysSinceLastHarvest($paddock) > 30}
GrainCrops arc lappend "arc8" rules {[machineryAvailable tractor1_planter]}
GrainCrops arc lappend "arc8" rules {[areaPlanted wheat]  <=1}
GrainCrops arc lappend "arc8" rules {[getEsw $paddock]}
GrainCrops arc insert "Wheat_3" "Fallow_3" "arc9"
GrainCrops arc lappend "arc9" actions {harvestAndEndCrop $paddock wheat}
GrainCrops arc lappend "arc9" rules {[canHarvestCrop $paddock wheat]}
GrainCrops arc insert "Fallow" "Fallow_1" "arc10"
GrainCrops arc lappend "arc10" actions {set config($paddock,yr)   [apsimGet year]}
GrainCrops arc lappend "arc10" rules {[apsimGet day] == 153}
GrainCrops arc lappend "arc10" rules {[apsimGet year] > $config($paddock,yr) }
if {[info exists config(p1,graphNames)]} {lappend config(p1,graphNames) GrainCrops} else {set config(p1,graphNames) GrainCrops}
set config(p1,initialState) "Fallow"
if {[info exists config(p2,graphNames)]} {lappend config(p2,graphNames) GrainCrops} else {set config(p2,graphNames) GrainCrops}
set config(p2,initialState) "Fallow"
if {[info exists config(p3,graphNames)]} {lappend config(p3,graphNames) GrainCrops} else {set config(p3,graphNames) GrainCrops}
set config(p3,initialState) "Fallow"
if {[info exists config(p4,graphNames)]} {lappend config(p4,graphNames) GrainCrops} else {set config(p4,graphNames) GrainCrops}
set config(p4,initialState) "Fallow"
if {[info exists config(p5,graphNames)]} {lappend config(p5,graphNames) GrainCrops} else {set config(p5,graphNames) GrainCrops}
set config(p5,initialState) "Fallow"
]]></rule>
      </RotPlot>
      <rule name="Farm logic">
        <script>
          <text>
# Defaults for a lot of things.
# we use this table to build a list of "name/value" pairs that get fed into
# sow/fertiliser commands etc.
# ***Check the summary file for what it uses, search other files for "gatherArgs"
   set defaults(sow,sowing_depth)              30
   set defaults(fertiliser,calcMethod)         targetN
   set defaults(fertiliser,depth)              50
   set defaults(fertiliser,type)               no3_n

   set defaults(wheat,sow,cultivar)            hartog
   set defaults(wheat,sow,plants)              100       ;# plants per sq mt established
   set defaults(wheat,fertiliser,amount)       75        ;# kg n/ha

   set defaults(chickpea,sow,cultivar)         amethyst
   set defaults(chickpea,sow,plants)           30
   set defaults(chickpea,fertiliser,amount)    0

   set defaults(sow,tractor)                   'tractor1'
   set defaults(sow,implement)                 'planter'
   set defaults(spray,tractor)                 'tractor1'
   set defaults(spray,implement)               'sprayrig'  ;# this is spray rig
   set defaults(herbicide,spray,name)          "Roundup"


####################
########### Support procedures

proc max {a b} { return [expr {($a &gt; $b) ? $a : $b}] }
proc min {a b} { return [expr {($a &gt; $b) ? $b : $a}] }

# Return the current state of the system
proc currentState {paddock} {
   global state
   return $state($paddock)
}

# Gather arguments (eg sowing depth, fert rate etc} from defaults array
# $action: the operation (sow, fert ...
# $what: the module (wheat, sorghum ...
proc gatherArgs {action what} {
   global defaults config

   # 1. "sow,..."
   foreach {index value} [array get defaults $action,*] {
      set args([lindex [split $index ","] end]) $value
   }
   # 2. override above with any "wheat,sow,..."
   foreach {index value} [array get defaults $what,$action,*] {
      set args([lindex [split $index ","] end]) $value
   }
   # 3. override above with any "SpringWheat,sow,..."
   if {[info exists config($what,alias)]} {
      foreach {index value} [array get defaults $config($what,alias),$action,*] {
         set args([lindex [split $index ","] end]) $value
      }
   }
   return [array get args]
}

# Mash a list into name/value pairs to pass via the apsim message system
proc mash {list} {
   set result {}
   foreach {name value} $list {lappend result [list $name $value]}
   return $result
}

# Sum a list
proc lsum {list} {
   set result 0.0
   foreach value $list {set result [expr $result + $value]}
   return $result
}

# Linear interpolation
proc linint {x_coords y_coords value} {
   set y  0.0

   if {[llength $x_coords] &lt;= 0 || [llength $y_coords] &lt;= 0 || [llength $x_coords] != [llength $y_coords]} {
      error "bad coordinates in linear_interp_real"
   }

   for {set indx 0} {$indx &lt; [llength $x_coords]} {incr indx} {
      if {$value &lt;= [lindex $x_coords $indx]} {
         if {$indx == 0} {
            set y [lindex $y_coords $indx]
         } else {
            if {abs($value - [lindex $x_coords $indx]) &lt; 1.0E-4} {
               set y [lindex $y_coords $indx]
            } else  {
               set y_part [expr [lindex $y_coords $indx] - [lindex $y_coords [expr $indx-1]] ]
               set x_part [expr [lindex $x_coords $indx] - [lindex $x_coords [expr $indx-1]] ]
               set y [expr ($y_part/$x_part) * ($value - [lindex $x_coords [expr $indx - 1]]) + [lindex $y_coords [expr $indx- 1]] ]
            }
         break;
         }
      } elseif {$indx == [lindex $x_coords $indx]-1} {
         set y  [lindex $y_coords $indx]
      } else {
         set y  0.0
      }
   }
   return $y
}
###############Utilities
proc dateWithin {t0 t1} {
   set d0 [date2day $t0]
   set d1 [date2day $t1]
   return [dayWithin $d0 $d1]
}

proc dateIs {t} {
   set d [date2day $t]
   return [dayIs $d]
}

proc dayWithin {t0 t1} {
   set t [apsimGet day]
   if {$t0 &gt; $t1} {
      return [expr $t &gt;= $t0 || $t &lt;= $t1]
   } else {
      return [expr $t &gt;= $t0 &amp;&amp; $t &lt;= $t1]
   }
   # notreached
}

proc dayIs {t} {
   return [expr $t == [apsimGet day]]
}

proc date2day {d} {
   set year [apsimGet year]
   return [string trimleft [clock format [clock scan "$d-$year"] -format %j] "0"]
}

# Return the fraction planted under a crop
proc areaPlanted {what} {
   global config
   set sum 0; set n 0
   foreach paddock $config(cropPaddocks) {
      set state [currentState $paddock]
      if {[info exists config($state,alias)]} {set state $config($state,alias)}
      if {"$state" == "$what"} {
        incr sum
      }
      incr n
   }
   return [expr $sum/$n.0 ]
}

proc machineryAvailable {what} {
   return [apsimGet available_$what]
}

#############################
############### The decision routine(s).
#############################
# Return the score for planting "what"
proc checkRules {thisPaddock} {
  global config

  uplevel #0 set paddock \"$thisPaddock\"
  set bestScore -1.0; set bestTarget {}; set bestArc {}; set bestGraph {}
  foreach graph $config($thisPaddock,graphNames) {
     foreach arc [$graph arcs -out [currentState $thisPaddock]] {
        set expr {}
        set target [$graph arc target $arc]
        foreach rule [$graph arc get $arc rules] {
           set value [uplevel #0 expr $rule]
           lappend expr $value
           if {$value == 0} {break} ;# no need to continue evaluating subsequent rules
        }
        if {[llength $expr] &gt; 0} {
           set score [expr [join $expr "*"]]
           if {$score &gt; $bestScore} {
              set bestScore  $score
              set bestTarget $target
              set bestArc    $arc
              set bestGraph  $graph
           }
        }
     }
  }   
  return [list  $bestScore $bestGraph $bestTarget $bestArc]
}

# A place holder function to monitor state transitions
proc logState {graph paddock state} {}

# Change state to another
proc changeState {paddock graph arc} {
   global state
   uplevel #0 set paddock \"$paddock\"
   foreach action [$graph arc get $arc actions] { uplevel #0 $action }
   set state($paddock) [$graph arc target $arc]
   logState $graph $paddock $state($paddock)
}

# Do daily process at top level
proc doProcess {} {
   global date config daysSinceLastHarvest
   
   set date "[apsimGet day],[apsimGet year]"

   set more 1
   while {$more} {
      set more 0
      # 1. Find out what's possible
      set bestPaddock {}; set bestScore -1.0
      foreach paddock $config(paddocks) {
         foreach {score graph target arc} [checkRules $paddock] {break}
         if {$score &gt; $bestScore} {
            set bestPaddock $paddock; set bestScore $score; set bestGraph $graph; set bestTarget $target; set bestArc $arc
         }
      }
      if {$bestScore &gt; 0.0} {
         changeState $bestPaddock $bestGraph $bestArc
         set more 1
      }
   }
   
   foreach paddock $config(paddocks) {
      incr daysSinceLastHarvest($paddock)
   }   
}

# pass events to various output files
proc reportEvent {from what} {
   foreach {event args} [split $what "-"] {break}
}

</text>
          <event>init</event>
        </script>
        <script>
          <text>
# Housekeeping
if {[catch {doProcess } msg]} {
   puts "$errorInfo"
   error "$msg\n$errorInfo"
}

</text>
          <event>process</event>
        </script>
        <script>
          <text>
          </text>
          <event>end_simulation</event>
        </script>
        <script>
          <text>
foreach paddock $config(paddocks) {
  set state($paddock)         $config($paddock,initialState) ;# Should get this from xml
  set history($paddock)       $config($paddock,history)
  set daysSinceLastHarvest($paddock) 60
}

# All our sols are called "Soil.." 
foreach paddock $config(paddocks) {
   set config($paddock,watBal)   "$paddock.Soil Water"
   set config($paddock,nModule)  "$paddock.Soil Nitrogen"
}


</text>
          <event>start_simulation</event>
        </script>
      </rule>
      <rule name="Farm logic - moonggoo">
        <script name="init">
          <text><![CDATA[##UNUSED - Dont change it - for reference only..


# Initial conditions
set simName _SIMNAME_
set myName  "FarmManager"
source ./FarmManager.tcl

set paddocks [list toplevel p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 ]
set config(cropPaddocks)    [list p1 p2 p3 p4 p5 p6 p7 p8 p9 p10]
set config(foragePaddocks)  {}

set config(toplevel,graphNames)  {}
foreach p $config(cropPaddocks) {
   set config($p,graphNames)  stateGraph
   set config($p,area)        200.0
   set weeds($p,Events)       0                      ;# number of weed germination events
   set weeds($p,GermDay)      {}                     ;# date of next weed spraying

   foreach {accumulator} {runoff drain soil_loss es} {
      set $p.$accumulator 0.0
   }
}
set accRain 0.0

foreach p {p1 p2} {
  set config($p,watBal)   "$p.Moongoo low Water"
  set config($p,nModule)   "$p.Moongoo low Nitrogen"
}
foreach p {p3 p4 p5 p6 p7} {
  set config($p,watBal)   "$p.Moongoo medium Water"
  set config($p,nModule)   "$p.Moongoo medium Nitrogen"
}
foreach p {p8 p9 p10} {
  set config($p,watBal)   "$p.Moongoo high Water"
  set config($p,nModule)   "$p.Moongoo high Nitrogen"
}

# Initialisation for Moongoo


   # Delete any old logfile so we dont get confused..
   catch {file delete -force $simName.log}

   # The 10 day rainfall accumulator - should be the 10 days of rain prior to start of simulation
   set rainList {0.2 1.0 0 0 0 0 15 12 0 0 0 0}

   # A list of variables to report from each paddock on each "event"
   set reportVariables [list esw no3() ]

   set crops {sorghum wheat maize chickpea}
   # Crop variables - name/event/value triplets
   set reportCropVariables [list sorghum  harvest yield \
                                 wheat    harvest yield \
                                 maize    harvest yield \
                                 chickpea harvest yield]

   # Manager variables to report from each paddock on each "event"
   set reportManagerVariables [list weeds(Events) annRunoff annDrain annSoil_loss annEvap annRain state]


# Defaults for a lot of things.
# we use this table to build a list of "name/value" pairs that get fed into
# sow/fertiliser commands etc.
# ***Check the summary file for what it uses, search other files for "gatherArgs"
   set defaults(sow,sowing_depth)              30
   set defaults(fertiliser,calcMethod)         targetN
   set defaults(fertiliser,depth)              50
   set defaults(fertiliser,type)               urea

   set defaults(wheat,sow,cultivar)            hartog
   set defaults(wheat,sow,plants)              100       ;# plants per sq mt established
   set defaults(wheat,fertiliser,amount)       150       ;# kg urea/ha

   # (same as chickpea)
   set defaults(wheat,sowingCosts)             {{category seedcost    name Wheat            rate 40  comment  "Wheat seed"} 
                                                {category fertilisercost  name map              rate 20  comment  "Wheat MAP starter"} 
                                                {category herbicide name "MCPA LVE"       rate 0.5 comment  "Wheat mcpa starter"}
                                                {category herbicide name "Ally"           rate 5   comment  "Wheat metsulfuran starter"}}

   set defaults(wheat,harvestingCosts)         {{category contract   name generic          rate 0.16666  comment  "Wheat contract harvest"} 
                                                {category fuelcosts  name fuelcosts        rate 8.1      comment  "Wheat contract harvest fuel"}}

 
   set defaults(sorghum,sow,tiller_no_fertile) 0
   set defaults(sorghum,sow,skip)              "solid"
   set defaults(sorghum,sow,region)            "CQ"
   set defaults(sorghum,sow,row_spacing)       1.0
   set defaults(sorghum,sow,plants)            4.5
   set defaults(sorghum,fertiliser,amount)     160
   set defaults(sorghum,sowingCosts)           {{category seedcost   name sorghum   rate 4 comment "Sorghum seed"}}
## NBNB needs atrazine @3.5lt/ha in wet seasons
   set defaults(sorghum,harvestingCosts)       {{category contract   name generic         rate 0.16666 comment  "Sorghum contract harvest"} 
                                                {category herbicide  name Roundup         rate 1.5     comment  "Sorghum spray out"} 
                                                {category fuelcosts  name fuelcosts       rate 8.1     comment  "Sorghum contract harvest fuel"}}
   set defaults(sorghum,sow,cultivar)          medium
   set defaults(springSorghum,sow,cultivar)    late
   set defaults(earlySorghum,sow,cultivar)     late
   set defaults(lateSorghum,sow,cultivar)      early
   set defaults(lateSorghum,fertiliser,amount) 100


   set defaults(CoverCrop,fertiliser,amount)   0

   set defaults(maize,sow,cultivar)            dekalb_xl82
   set defaults(maize,sow,plants)              4
   set defaults(maize,fertiliser,calcMethod)   constant_rate
   set defaults(maize,fertiliser,type)         urea
   set defaults(maize,fertiliser,amount)       200
   set defaults(maize,sowingCosts)             {{category seedcost   name maize     rate 8    comment "Maize Seed"}}
   set defaults(maize,harvestingCosts)         {{category contract   name generic   rate 0.25 comment  "Maize contract harvest"} 
                                                {category fuelcosts  name fuelcosts rate 12.1  comment  "Maize contract harvest fuel"}}


   set defaults(chickpea,sow,cultivar)         amethyst
   set defaults(chickpea,sow,plants)           30
   set defaults(chickpea,fertiliser,amount)    0
   set defaults(chickpea,sowingCosts)          {{category seedcost    name Chickpea         rate 45   comment "Chickpea Seed"}              
                                                {category herbicide   name Roundup          rate 1.3  comment "Pre plant roundup"}
                                                {category herbicide   name Amicide625       rate 0.2  comment "Pre plant 2,4D"} 
                                                {category herbicide   name "simazine"     rate 1.1    comment "Post Simazine"}
                                                {category insecticide name "Larvin LV"    rate 0.75   comment "Insecticide"}}      
   set defaults(chickpea,harvestingCosts)      {{category contract    name generic        rate 0.1851 comment  "Chickpea contract harvest"} 
                                                {category fuelcosts   name fuelcosts      rate 9.0    comment  "Chickpea contract harvest fuel"}}

   set defaults(weed,sow,cultivar)             late
   set defaults(weed,sow,plants)               15
   set defaults(weed,sow,crop_class)           summer_grass
   set defaults(weed,fertiliser,amount)        0

   set defaults(sow,tractor)                   'tractor1'
   set defaults(sow,implement)                 'planter'
   set defaults(spray,tractor)                 'tractor1'
   set defaults(spray,implement)               'sprayrig'  ;# this is spray rig
   set defaults(herbicide,spray,name)          "Roundup"

   set config(CoverCrop,alias) wheat
   set config(springSorghum,alias) sorghum
   set config(earlySorghum,alias) sorghum
   set config(lateSorghum,alias) sorghum
  

# Initial conditions for each paddock
set config(p1,initialState)         Fallow
set config(p1,history)              {sorghum sorghum}
set config(p1,daysSinceLastHarvest) 365              ;# A long time
set config(p2,initialState)         Fallow
set config(p2,history)              {wheat sorghum}
set config(p2,daysSinceLastHarvest) 365              ;# A long time
set config(p3,initialState)         Fallow
set config(p3,history)              {wheat wheat}
set config(p3,daysSinceLastHarvest) 365              ;# A long time
set config(p4,initialState)         Fallow
set config(p4,history)              {wheat maize}
set config(p4,daysSinceLastHarvest) 365              ;# A long time
set config(p5,initialState)         Fallow
set config(p5,history)              {maize maize}
set config(p5,daysSinceLastHarvest) 365              ;# A long time
set config(p6,initialState)         Fallow
set config(p6,history)              {sorghum sorghum}
set config(p6,daysSinceLastHarvest) 365              ;# A long time
set config(p7,initialState)         Fallow
set config(p7,history)              {wheat sorghum}
set config(p7,daysSinceLastHarvest) 365              ;# A long time
set config(p8,initialState)         Fallow
set config(p8,history)              {wheat wheat}
set config(p8,daysSinceLastHarvest) 365              ;# A long time
set config(p9,initialState)         Fallow
set config(p9,history)              {wheat maize}
set config(p9,daysSinceLastHarvest) 365              ;# A long time
set config(p10,initialState)         Fallow
set config(p10,history)              {maize maize}
set config(p10,daysSinceLastHarvest) 365              ;# A long time

foreach p $config(cropPaddocks) {
   set state($p)   $config($p,initialState) ;# Should get this from xml
   set history($p) $config($p,history)
   set daysSinceLastHarvest($p) 60
}
set state(toplevel) {}
set daysSinceLastHarvest(toplevel) 0

# Return our reluctance to plant sorghum in the current paddock
#  -> no more than 3 in a row.
proc sorghumHistory {paddock} {
   global history 
   if {"[lindex $history($paddock) end]" == "sorghum" &&
       "[lindex $history($paddock) end-1]" == "sorghum" &&
       "[lindex $history($paddock) end-2]" == "sorghum"} {
      return 0 ;# 3 in a row - no more.
   }
   return 1
}

# Last crop was a failed sorghum crop
## XXX WRONG - should be 1 only if the last sorghum crop failed
proc covercropHistory {paddock} {
   global history
   if {"[lindex $history($paddock) end]" == "sorghum"} {return 1}
   return 0
}

proc maizeHistory {paddock} {
   global history
   if {"[lindex $history($paddock) end]" == "maize" &&
       "[lindex $history($paddock) end-1]" == "maize" &&
       "[lindex $history($paddock) end-2]" == "maize"} {
      return 0 ;# 3 in a row - no more.
   }
   return 1
}

# Return our "reluctance" to plant wheat
proc wheatHistory {paddock} {
   global history
   if {"[lindex $history($paddock) end]" == "wheat" &&
       "[lindex $history($paddock) end-1]" == "wheat" &&
       "[lindex $history($paddock) end-2]" == "wheat"} {
       return 0   ;# 3 in a row - no more.
   }
   return 1
}

# Return our "reluctance" to plant chickpea
proc chickpeaHistory {paddock} {
   global history
   if {[lindex $history($paddock) end] == "chickpea" } {
      return 0   ;# no more than 1 crop
   }
   return 1
}

proc getEsw {paddock} {
   global config
   return [apsimGetOptional $config($paddock,watBal).esw]
}

proc getCover {paddock} {
   global config
   return [apsimGetOptional "$paddock.surface organic matter.surfaceom_cover"]
}

proc mseek2 {paddock} {
   global config
   set ll2   [lindex [apsimGet $config($paddock,watBal).ll15] 1] 
   set swat2 [lindex [apsimGet $config($paddock,watBal).sw] 1]
   set dul2  [lindex [apsimGet $config($paddock,watBal).dul] 1]
   return [expr (($swat2-$ll2)/($dul2-$ll2))]
}


]]></text>
          <event>init</event>
        </script>
        <script name="prepare">
          <text>

   if {[dayIs 181]} {
      do_end_financial_year

      set accRain 0.0
      foreach {accumulator} {runoff drain soil_loss es } {
         foreach paddock $paddocks {
            set $paddock.$accumulator 0.0
         }   
      }
   }
   accumRain
          </text>
          <event>prepare</event>
        </script>
        <script name="process">
          <text>
# Housekeeping
if {[catch {checkWeeds; doProcess} msg]} {
   puts "$errorInfo"
   error "$msg\n$errorInfo"
}
</text>
          <event>process</event>
        </script>
        <script name="post">
          <text>
   set accRain [expr $accRain + [apsimGet rain]]
   
   foreach {accumulator} {runoff drain es } {
      foreach paddock $paddocks {
         if {$paddock != "toplevel"} {
            set $paddock.$accumulator [expr [set $paddock.$accumulator] + [apsimGet $config($paddock,watBal).$accumulator]]
         }
      }   
   }
   foreach {accumulator} {soil_loss} {
      foreach paddock $paddocks {
         if {$paddock != "toplevel"} {
            set $paddock.$accumulator [expr [set $paddock.$accumulator] + [apsimGet $paddock.erosion.$accumulator]]
         }
      }   
   }

          </text>
          <event>post</event>
        </script>
        <script name="start_simulation">
          <text>
 
      set accRain 0.0
      foreach {accumulator} {runoff drain soil_loss es } {
         foreach paddock $paddocks {
            set $paddock.$accumulator 0.0
         }   
      }
 
 foreach p $config(cropPaddocks) {
   set config($p,pawc)        [calcPAWC $p]
}
open_ef_stuff
checkSetup
</text>
          <event>start_simulation</event>
        </script>
        <script name="end_simulation">
          <text>
close_ef_stuff
#closeReporting
#catch {closeLogging}

</text>
          <event>end_simulation</event>
        </script>
      </rule>
      <rule name="Weeds">
        <script>
          <text>
# Newer version of weed germination - spray 2 weeks after a {germination event &amp; swCrit &amp; temp}.
proc checkWeeds {} {
   global daysSinceLastHarvest weeds  config

   foreach paddock $config(cropPaddocks) {
      if {[string match -nocase *fallow* [currentState $paddock]] &amp;&amp; 
          $daysSinceLastHarvest($paddock) &gt; 30} {

         if {$weeds($paddock,GermDay) == {} &amp;&amp; [sumLastRain 4] &gt;= 25} {
            set weeds($paddock,GermDay) [apsimGet day]
            set weeds($paddock,tt) 0.0
            apsimWriteToSummaryFile "Weeds germinating in $paddock"

         } elseif {$weeds($paddock,GermDay) != {}} {
            # Thermal time calc
            set weeds($paddock,tt) [expr $weeds($paddock,tt) + ([apsimGet maxt] + [apsimGet mint])/2.0]
         
            # Surface SW calc
            set ll [lindex [apsimGet $config($paddock,watBal).ll15] 0];
            set sw [lindex [apsimGet $config($paddock,watBal).sw] 0]
            set dul [lindex [apsimGet $config($paddock,watBal).dul] 0]
            set swf [expr (($sw-$ll)/($dul-$ll))]
         
            if {$swf &lt; 0.5} {
               # kill off weeds
               set weeds($paddock,GermDay) {}
               apsimWriteToSummaryFile "Weeds die in $paddock"
         
            } elseif {$weeds($paddock,tt) &gt; 250.0} {
               # Weeds are mature - spray them
               incr weeds($paddock,Events)

               eval apsimSendMessage machinery operate [mash [concat [gatherArgs spray herbicide] \
                      area $config($paddock,area)  paddock $paddock  costtype fallow_cost]]

               apsimWriteToSummaryFile "Weeds mature in $paddock - sprayed out."
            
               reportEvent $paddock "spray-type=roundup,amount=1.5"
         
               set weeds($paddock,GermDay) {}
               set weeds($paddock,tt)      0.0
            }
         }
      }   
   }
}
</text>
          <event>init</event>
        </script>
        <script>
          <text>
checkWeeds</text>
          <event>process</event>
        </script>
        <script>
          <text>
foreach paddock $config(cropPaddocks) {
   set weeds($paddock,GermDay) {}
   set weeds($paddock,Events)  0
}</text>
          <event>start_simulation</event>
        </script>
      </rule>
      <rule name="Special Reports">
        <script name="init">
          <text><![CDATA[# EF - used to be "end of financial" but has a lot more now.
proc open_ef_stuff {} {
   global ef config
   puts "open_ef_stuff called"
   set year [expr [apsimGet year] - 1 ]
   set ef(years) $year
   set ef($year,balance) [apsimGet balance] 

   set ef(accRain) 0.0
   foreach {accumulator} {runoff drain soil_loss es } {
     foreach paddock $config(cropPaddocks) {
       set ef($paddock,$accumulator) 0.0
     }   
   }
}

set ef(states) {}
set ef(rules) {}

proc do_end_financial_year {} {
   global config ef
   puts "do_end_financial_year called"
   set year [apsimGet year]

   foreach {accumulator} {runoff drain soil_loss es} {
     foreach paddock $config(cropPaddocks) {
        set ef($year,$paddock,$accumulator) $ef($paddock,$accumulator)
        set ef($paddock,$accumulator) 0.0
     }
   }

   set ef($year,accRain) $ef(accRain)
   set ef(accRain) 0.0

   set ef($year,balance) [apsimGet balance]
   lappend ef(years) $year
}

proc close_ef_stuff {} {
   global simName config ef
   puts "close_ef_stuff called"

   # Heading
   set fp [open $simName.financial.csv w]
   puts -nonewline $fp "FINANCIAL year to"
   foreach {accumulator} {runoff drain soil_loss es rain} {
      puts -nonewline $fp ",$accumulator"
   }
   foreach state $ef(states) {
      if {$state != {}} {
        puts -nonewline $fp ",$state"
      }
   }
   puts $fp ",profit"

   # Area weighted averages of environmental stuff
   set tfa 0.0
   foreach paddock $config(cropPaddocks) {set tfa [expr $tfa + $config($paddock,area)]}
   
   foreach year [lrange $ef(years) 1 end] {
      puts -nonewline $fp "31/6/$year"
      foreach {accumulator} {runoff drain soil_loss es} {
         set s 0.0
         foreach paddock $config(cropPaddocks) {
            set s [expr $s + $ef($year,$paddock,$accumulator) * $config($paddock,area) / $tfa]
         }
         puts -nonewline $fp ",$s"
      }
      puts -nonewline $fp ",$ef($year,accRain)"

      # Number of "state transitions" made in each year
      foreach state $ef(states) {
         if {$state != {}} {
            if {[info exists ef($year,$state)]} {
              puts -nonewline $fp ",$ef($year,$state)"
            } else {
              puts -nonewline $fp ",0"
            }  
         }
      }

      # profit = change in bank balance each year
      puts -nonewline $fp ",[expr $ef($year,balance) - $ef([expr $year-1],balance)]"
      puts $fp ""
   }
   close $fp
   
   # per-crop yields etc..
   foreach state $ef(states) {
     if {$state != {}} {
         set fp [open $simName.$state.csv w]
         puts $fp "CALENDAR year,paddock,yield"
         if {[info exists ef($state,yield)]} {
            foreach yield $ef($state,yield) {
               puts $fp $yield
            }   
         }  
         close $fp
      }   
   }

}

# Log a state transition
proc logState {graph paddock state} {
   global config ef
   set today [apsimGet today]
   lappend config(history,$paddock,$graph) $today $state
   if {[lsearch $config(states) $state] < 0} {lappend config(states) $state}

   set day [apsimGet day]
   set year [apsimGet year]
   
   if {$day > 181} {incr year}
   if {![info exists ef($year,$state)]} {
     set ef($year,$state) 1
   } else {
     incr ef($year,$state)
   }
   if {[lsearch $ef(states) $state] < 0} {lappend ef(states) $state}

}


# Harvest and end a crop
proc harvestAndEndCrop {paddock crop} {
   global config daysSinceLastHarvest defaults ef

   if {[info exists config($crop,alias)]} {
      set realCrop $config($crop,alias)
   } else {
      set realCrop $crop
   }

   if {[apsimGet $paddock.$realCrop.plant_status] != "dead"} {
      if {$realCrop == "wheat"} {
         apsimSendMessage economics income {category cropprice} "name $realCrop"  \
                          "yield [expr [apsimGet $paddock.$realCrop.yield]/1000.0]" \
                          "protein [apsimGet $paddock.$realCrop.grain_protein]" \
                          "area $config($paddock,area)" "paddock $paddock" "crop $realCrop" \
                          "SW_state [apsimGet $config($paddock,watBal).esw]" \
                          "NO3_state [apsimGet $config($paddock,nModule).no3()]" 
                          
      } else {
         apsimSendMessage economics income {category cropprice} "name $realCrop"  \
                          "yield [expr [apsimGet $paddock.$realCrop.yield]/1000.0]" \
                          "area $config($paddock,area)" "paddock $paddock" "crop $realCrop" \
                          "SW_state [apsimGet $config($paddock,watBal).esw]" \
                          "NO3_state [apsimGet $config($paddock,nModule).no3()]" 
                          
      }  
      # Harvesting costs
      # {{category seedcost} {name cotton} {rate 3.5} {Comment "blah blah"}} ...
      array set costs [array get defaults $realCrop,harvestingCosts]
      array set costs [array get defaults $crop,harvestingCosts]
      foreach {junk items} [array get costs] {
         foreach item $items {
            eval apsimSendMessage economics expenditure \
                       [mash [concat $item area $config($paddock,area)  \
                       paddock $paddock incrop_cost {} crop $crop ]]
         }
      }

      lappend ef([currentState $paddock],yield) "[apsimGet year],$paddock,[expr [apsimGet $paddock.$realCrop.yield]/1000.0]"
      reportEvent $paddock "harvest-crop=$crop"
   } else {
      reportEvent $paddock "fail-crop=$crop"
   }
   apsimSendMessage $paddock.$realCrop harvest
   apsimSendMessage $paddock.$realCrop end_crop
   set daysSinceLastHarvest($paddock) 0
}

]]></text>
          <event>init</event>
        </script>
        <script name="start_simulation">
          <text>
open_ef_stuff

</text>
          <event>start_simulation</event>
        </script>
        <script name="end_simulation">
          <text>
close_ef_stuff

</text>
          <event>end_simulation</event>
        </script>
        <script name="post">
          <text>
   set ef(accRain) [expr $ef(accRain) + [apsimGet rain]]
   
   foreach {accumulator} {runoff drain es } {
      foreach paddock $paddocks {
         if {$paddock != "toplevel"} {
            set ef($paddock,$accumulator) [expr $ef($paddock,$accumulator) + [apsimGet $config($paddock,watBal).$accumulator]]
         }
      }   
   }
   foreach {accumulator} {soil_loss} {
      foreach paddock $paddocks {
         if {$paddock != "toplevel"} {
            set ef($paddock,$accumulator) [expr $ef($paddock,$accumulator) + [apsimGet $paddock.erosion.$accumulator]]
         }
      }   
   }
   
   if {[dayIs 181]} {
      do_end_financial_year
   }
   
</text>
          <event>post</event>
        </script>
      </rule>
      <rule name="Rain Accumulator">
        <script>
          <text>
# The rainfall accumulator - set this list to 
#   the 10 days of rain prior to start of simulation
set rainList {0.2 1.0 0 0 0 0 15 12 0 0 0 0}

# Return the sum of the last n days rainfall
proc sumLastRain {n} {
   global rainList
   return  [expr [join [lrange $rainList end-[expr $n-1] end] "+"]]
}

# Maintain a list of rainfall amounts.
proc accumRain {} {
   global rainList
   set rainList [concat [lrange $rainList 1 end] [apsimGet rain]]
}

</text>
          <event>init</event>
        </script>
        <script>
          <text>
accumRain
</text>
          <event>prepare</event>
        </script>
      </rule>
      <rule name="Economic reporting">
        <script>
          <text>
# Set up an "economic event" based report file

# Write a line to the CSV report file
proc reportEcon {from evt args} {
   global config event
   foreach arg [split $args ","] {
      foreach {name value} [split $arg "="] {break}
      set info($name) $value
   }
   if {[info exists info(crop)]} {set crop $info(crop)} else {set crop ""}
   if {[info exists config($crop,alias)]} {set crop $config($crop,alias)}

   set line "$evt,$from"
   if {[info exists config($from,area)]} {append line ",$config($from,area)"} else {append line ","}
   append line ",[apsimGet year],[apsimGet dd/mm/yyyy]"

   if {[info exists event($from,daysSinceEcon)]} {append line ",$event($from,daysSinceEcon)"} else {append line ","}
   set event($from,daysSinceEcon) 0
   
   if {$crop != ""} {
     append line ",$crop"
     if {$evt == "harvest"} {append line ",[apsimGetOptional $from.$crop.yield]"} else {append line ","}
     if {$evt == "harvest"} {append line ",[apsimGetOptional $from.$crop.biomass]"} else {append line ","}
     if {$evt == "harvest"} {append line ",[apsimGetOptional $from.$crop.grain_protein]"} else {append line ","}
   } else {
     append line ",,,,"
   }  

   if {[info exists info(type)]} {append line ",$info(type)"} else {append line ","}
   if {[info exists info(amount)]} {append line ",$info(amount)"} else {append line ","}
   if {[info exists info(weight)]} {append line ",$info(weight)"} else {append line ","}

   lappend event(econLines) $line
}

rename reportEvent reportEvent_OLDECON
proc reportEvent [info args reportEvent_OLDECON] "[info body reportEvent_OLDECON]; reportEcon \$from \$event \$args"

</text>
          <event>init</event>
        </script>
        <script>
          <text>
   foreach x [array names event  *,daysSinceEcon] {
      incr event($x)
   }

   </text>
          <event>post</event>
        </script>
        <script>
          <text>
set fp [open $simName.economics.csv w]

puts -nonewline $fp "event,paddock,area,year,date,days since last event,crop,"
puts -nonewline $fp "yield (kg/ha dry),biomass (kg/ha dry),protein(%),type,amount,weight"
puts -nonewline $fp "\n"

foreach line $event(econLines) {
  puts $fp $line
}

close $fp
   </text>
          <event>end_simulation</event>
        </script>
        <script>
          <text>
catch {file delete $simName.economics.csv}

set event(econLines) {}

foreach paddock $config(paddocks) {
  set event($paddock,daysSinceEcon) 0
}</text>
          <event>start_simulation</event>
        </script>
      </rule>
      <rule name="Annual Reports">
        <script>
          <text>
# Annual summary of whole farm averages

proc open_annual_stuff {} {
   global annual config

   set year [expr [apsimGet year] - 1 ]
   set annual(years) $year
   set annual(accRain) 0.0
   set annual($year,balance) [apsimGetOptional balance] 
   foreach {accumulator} {runoff drain soil_loss es } {
     foreach paddock $config(paddocks) {
        set annual($paddock,$accumulator) 0.0
     }   
   }
}

set annual(states) {}

proc do_end_year {} {
   global config annual

   set year [apsimGet year]

   foreach {accumulator} {runoff drain soil_loss es} {
     foreach paddock $config(paddocks) {
        set annual($year,$paddock,$accumulator) $annual($paddock,$accumulator)
        set annual($paddock,$accumulator) 0.0
     }
   }

   set annual($year,accRain) $annual(accRain)
   set annual(accRain) 0.0

   set annual($year,balance) [apsimGetOptional balance]
   lappend annual(years) $year
}

proc close_annual_stuff {} {
   global simName config annual

   # Heading
   set fp [open $simName.annual.csv w]
   puts -nonewline $fp "year"
   foreach {accumulator} {runoff drain soil_loss es rain} {
      puts -nonewline $fp ",$accumulator"
   }
   foreach state $annual(states) {
      if {$state != {}} {
        puts -nonewline $fp ",$state"
      }
   }
   puts $fp ",profit"

   # Area weighted averages of environmental stuff
   set tfa 0.0
   foreach paddock $config(paddocks) {set tfa [expr $tfa + $config($paddock,area)]}

   foreach year [lrange $annual(years) 1 end] {
      puts -nonewline $fp "$year"
      foreach {accumulator} {runoff drain soil_loss es} {
         set s 0.0
         foreach paddock $config(cropPaddocks) {
            set s [expr $s + $annual($year,$paddock,$accumulator) * $config($paddock,area) / $tfa]
         }
         puts -nonewline $fp ",$s"
      }
      puts -nonewline $fp ",$annual($year,accRain)"

      # Number of "state transitions" made in each year
      foreach state $annual(states) {
         if {$state != {}} {
            if {[info exists annual($year,$state)]} {
              puts -nonewline $fp ",$annual($year,$state)"
            } else {
              puts -nonewline $fp ",0"
            }  
         }
      }

      # profit = change in bank balance each year
      catch {
         puts -nonewline $fp ",[expr $annual($year,balance) - $annual([expr $year-1],balance)]"
      }
      puts $fp ""
   }
   close $fp
   
}

# Log a state transition
proc logState {graph paddock state} {
   global config annual
   set today [apsimGet today]
   lappend config(history,$paddock,$graph) $today $state
   if {[lsearch $config(states) $state] &lt; 0} {lappend config(states) $state}

   set day [apsimGet day]
   set year [apsimGet year]
   
   if {![info exists annual($year,$state)]} {
     set annual($year,$state) 1
   } else {
     incr annual($year,$state)
   }
   if {[lsearch $annual(states) $state] &lt; 0} {lappend annual(states) $state}
}



</text>
          <event>init</event>
        </script>
        <script>
          <text>
catch {file delete $simName.annual.csv}

open_annual_stuff

</text>
          <event>start_simulation</event>
        </script>
        <script>
          <text>
close_annual_stuff

</text>
          <event>end_simulation</event>
        </script>
        <script>
          <text>
   set annual(accRain) [expr $annual(accRain) + [apsimGet rain]]
   
   foreach {accumulator} {runoff drain es } {
      foreach paddock $config(paddocks) {
         if {$paddock != "toplevel"} {
            set annual($paddock,$accumulator) [expr $annual($paddock,$accumulator) + [apsimGet $config($paddock,watBal).$accumulator]]
         }
      }   
   }
   foreach {accumulator} {soil_loss} {
      foreach paddock $config(paddocks) {
         if {$paddock != "toplevel"} {
            set annual($paddock,$accumulator) [expr $annual($paddock,$accumulator) + [apsimGet $paddock.erosion.$accumulator]]
         }
      }   
   }
   </text>
          <event>post</event>
        </script>
        <script>
          <text>
do_end_year</text>
          <event>end_year</event>
        </script>
      </rule>
      <rule name="Jo's Farm logic">
        <script name="init">
          <text>
# Initial conditions
set simName "Grazing 1"
set myName "FarmManager"
source $apsuite/UserInterface/APSFarm/FarmManager.tcl

# Extra bits (needed to fool animals)
set leafgreenwt 0.0
set stemgreenwt 0.0
set leafsenescedwt 0.0
set stemsenescedwt 0.0
set dlt_dm 0.0
set source {}

set logFile stdout

set animals(culls) {}
set animals(steers1) {}
set animals(steers2) {}
set animals(heifers) {}
set animals(breeders) {}
set animals(stock) {}
set animals(culls,price)       2.0   ;# $/kg live at gate
set animals(steers,price)      2.0   ;# $/kg live at gate
set animals(steers1,price)     2.0   ;# $/kg live at gate
set animals(steers2,price)     2.0   ;# $/kg live at gate
set animals(heifers,price)     2.0   ;# $/kg live at gate
set animals(breeders,price)    2.0   ;# $/kg live at gate
set animals(weaners,price)     1.5   ;# $/kg live at gate

set animals(stock,price)     1.0   ;# $/kg live at gate for backgrounding at CQ Mixed GG
set animals(inCost)            0.0  ;# $/head handling cost
set animals(outCost)          0.15  ;# $/head stock handling cost at CQ Mixed GG

proc OatsAreReady {} {
   set status [apsimGetOptional "OatsPaddock.oats.plant_status"]
   return [string match $status "alive"]
}

proc SorghumIsReady {} {
   set status [apsimGetOptional "SorghumPaddock.SweetSorghum.plant_status"]
   return [string match $status "alive"]
}

</text>
          <event>init</event>
        </script>
        <script name="prepare">
          <text><![CDATA[set beeflwgained 0
set beefincome 0

######## Animal management
# If there's an oats crop ready with no animals on it, put the heaviest mob there


if {[apsimGet "OatsPaddock.oats.biomass"] > 1500 &&
     [numAnimalsIn OatsPaddock] < $config(OatsPaddock,numAnimals) } { ;#if there's no animals on this paddock then
    set heaviest [heaviestMobNotIn OatsPaddock]
    if {$heaviest != {}} {
       moveStockTo $heaviest  OatsPaddock oats  ;# move onto oats paddock
    } else {apsimWriteToSummaryFile "trying to move empty mob onto oats"}
}

# If the oats are flogged, move any animals out.
if {[anyAnimalsIn OatsPaddock] &&
     [apsimGet "OatsPaddock.oats.biomass"] < 1000 } {
   foreach mob [listAnimalsIn OatsPaddock] {
      moveStockTo $mob LeucaenaGrassPaddock leucaena      ;# move
   }
}

if {[apsimGet "SorghumPaddock.SweetSorghum.biomass"] > 2500 &&
     [numAnimalsIn SorghumPaddock] < $config(SorghumPaddock,numAnimals) } {
    set heaviest [heaviestMobNotIn SorghumPaddock]
    if {$heaviest != {}} {
       moveStockTo $heaviest  SorghumPaddock SweetSorghum
    } else {apsimWriteToSummaryFile "trying to move empty mob onto sorg"}
}


if {[anyAnimalsIn SorghumPaddock] &&
    [apsimGet "SorghumPaddock.SweetSorghum.biomass"] < 1000 } {
 foreach mob [listAnimalsIn SorghumPaddock] {
     if {[numAnimalsIn LeucaenaGrassPaddock] < $config(LeucaenaGrassPaddock,numAnimals) } {
         moveStockTo $mob LeucaenaGrassPaddock leucaena      
     } else {    
         moveStockTo $mob BuffelPaddock buffel 
     }
 }    
}

  if {[anyAnimalsIn BuffelPaddock ] &&
     [apsimGet "BuffelPaddock.buffel.tsdm"] < 1000 &&
     [numAnimalsIn LeucaenaGrassPaddock] < $config(LeucaenaGrassPaddock,numAnimals) &&
     [apsimGet "LeucaenaGrassPaddock.leucaena.tsdm"] > 1000 } {
     apsimWriteToSummaryFile "Buffel is scarce!!"
     set mob [lightestMobIn BuffelPaddock ] 
     if {$mob != {}} {
        moveStockTo $mob LeucaenaGrassPaddock leucaena   
     }
  }

# Sell animals if buffel is finished
if {[anyAnimalsIn BuffelPaddock ] &&
     [apsimGet "BuffelPaddock.buffel.tsdm"] < 800 } {
     apsimWriteToSummaryFile "Buffel is flogged!!"
     foreach mob [listAnimalsIn BuffelPaddock ] {
        sell $mob   
     }
}

# Sell if everything gone
if {[anyAnimalsIn LeucaenaGrassPaddock ] &&
     [apsimGet "LeucaenaGrassPaddock.leucaena.tsdm"] < 800 } {
apsimWriteToSummaryFile "Leucaena is flogged!!"
     foreach mob [listAnimalsIn LeucaenaGrassPaddock] {
        sell $mob
     }
}

# Replace stock if pasture becomes available
if { [llength [mobsOnFarm]] < [llength $mobs] } {
apsimWriteToSummaryFile "Only have  [llength [mobsOnFarm]] mobs on farm"
        foreach {paddock pasture} {LeucaenaGrassPaddock leucaena BuffelPaddock buffel} {
             set n [numAnimalsIn $paddock]
apsimWriteToSummaryFile "there are $n animals on $paddock.$pasture, which is [apsimGet $paddock.$pasture.tsdm]kg/ha"
             if {$n <  $config($paddock,numAnimals) && [apsimGet "$paddock.$pasture.tsdm"]  > 1000} {
apsimWriteToSummaryFile "trying to bring 200 animals into $paddock  $pasture"
                 set mob [animalsIn 200 steers 250]       ;# replace sold animals @ 250Kg 
                 moveStockTo $mob $paddock $pasture
             }
    }
}


# Sell any animal > 450kg
foreach mob $mobs {
   if { [animalWeight $mob] > 450 } {    
      sellAndReplace $mob
   }
}

foreach mob $mobs {
  set paddock_$mob [animalPaddock $mob] 
}
]]></text>
          <event>prepare</event>
        </script>
        <script name="process">
          <text>
# Housekeeping
if {[catch {doProcess } msg]} {
   apsimWriteToSummaryFile "$errorInfo"
   error "$msg\n$errorInfo"
}

</text>
          <event>process</event>
        </script>
        <script name="post">
          <text>

   doPostAnimals </text>
          <event>post</event>
        </script>
        <script name="end_simulation">
          <text>

closeAnimals

# close $reportFp
# catch {closeReporting}
# catch {closeLogging}

</text>
          <event>end_simulation</event>
        </script>
        <script name="start_simulation">
          <text>
apsimSendMessage "BuffelPaddock.buffel" establish {init_section establishment}
apsimSendMessage "LeucaenaGrassPaddock.leucaena" establish {init_section establishment}

setupAnimals

# Start simulation in Jan 1978 with 4 mobs of cattle at different growth stages
foreach {mob size num paddock crop} {
       mob1 250 100 BuffelPaddock buffel 
       mob2 250 100 BuffelPaddock buffel
       mob3 300 100 BuffelPaddock buffel
       mob4 300 100 BuffelPaddock buffel
       mob5 325 100 BuffelPaddock buffel
       mob6 325 100 BuffelPaddock buffel
       mob7 350 100 BuffelPaddock buffel
       mob8 350 100 BuffelPaddock buffel
       mob9 400 100 BuffelPaddock buffel
       mob10 400 100 BuffelPaddock buffel} {
     set $mob [animalsIn $num steers $size] 
     moveStockTo $mob  $paddock $crop
}

apsimWriteToSummaryFile "Done Start sim"

</text>
          <event>start_simulation</event>
        </script>
      </rule>
      <rule name="Animal Management">
        <script name="init">
          <text><![CDATA[
###############Animal management

proc OatsAreReady {} {
   set status [apsimGetOptional "OatsPaddock.oats.plant_status"]
   return [string match $status "alive"]
}

proc SorghumIsReady {} {
   set status [apsimGetOptional "SorghumPaddock.SweetSorghum.plant_status"]
   return [string match $status "alive"]
}


# Dummy economic values
set animals(steers,price)     0.0  ;# $/kg live at gate
set animals(inCost)           0.0  ;# $/head handling cost
set animals(outCost)          0.0  ;# $/head stock handling cost at CQ Mixed GG

proc setupAnimals {nMobs} {
   global config animals simName
   catch {file delete ${simName}.livestock.csv}
   set animals(mobs) {}
   for {set mob 1} {$mob <= $nMobs} {incr mob} {
      lappend animals(mobs) "mob$mob"
      set animals(mob$mob,number) 0
      set animals(mob$mob,state) "off"
      set animals(mob$mob,paddock)  {}
      set animals(mob$mob,crop)   {}
      set animals(mob$mob,supplemented) 0
      set animals(mob$mob,id) "mob${mob}"
      apsimSet $animals(mob$mob,id).stocking_rate 0.0
      apsimSet $animals(mob$mob,id).alw 0.0
      apsimSet $animals(mob$mob,id).pasture_source "farm manager"
      apsimSet $animals(mob$mob,id).allow_supplements 0
   }
}

proc closeAnimals {} {
   global animals simName

   set fp [open "${simName}.livestock.csv" w]
   puts $fp "date,mob,number,from,to,weight"
   puts $fp [join $animals(report) "\n"]
   close $fp
}

# Bring some animals into the system
proc animalsIn { number class initialWeight } {
   global config animals

   foreach mob $animals(mobs) {
      if {$animals(${mob},state) == "off"} {break}
   } 
   if {$animals(${mob},state) != "off"} {parray animals; error "Already too many mobs to make $class"}
   
   set animals($mob,state)        on
   set animals($mob,class)        $class
   set animals($mob,alw)          $initialWeight
   set animals($mob,number)       $number
   set animals($mob,age)          0
   set animals($mob,paddock)        {}
   set animals($mob,crop)         {}
   set animals($mob,supplemented) 0
   apsimSet $animals($mob,id).allow_supplements 0

   reportEvent livestock "buy-amount=$number,type=$class,weight=$initialWeight"

   apsimSendMessage economics expenditure {paddock livestock}\
             "cost [expr $number * $initialWeight * $animals($class,price)]" \
             [list comment "purchase of $number $class at $initialWeight kg"]

   apsimSendMessage economics expenditure {paddock livestock}\
             "cost [expr $number * $animals(inCost)]" \
             [list comment "in costs of $number $class"]

   apsimWriteToSummaryFile "[apsimGet dd/mm/yyyy]: animals:In: mob $mob is class $class, weight=$initialWeight"
   # initial stocking rate isn't set until we have a paddock with an area
   return $mob
}

# Take animals out the system
proc animalsOut { mob number } {
   global animals

   if {![info exists animals($mob,state)]} {apsimWriteToSummaryFile "Trying to remove non-existent mob $mob"; return}
   
   if {$number == "all"} { set number $animals($mob,number) }

   set animals(${mob},number) [expr $animals(${mob},number) - $number]
   
   reportEvent livestock "sell-amount=$number,type=$animals($mob,class),weight=[format %.0f $animals($mob,alw)]"
   lappend animals(report) "[apsimGet dd/mm/yyyy],$mob,$number,$animals($mob,paddock).$animals($mob,crop),out,[format %.0f $animals($mob,alw)]"

   apsimSendMessage economics expenditure {paddock livestock}\
             "cost [expr $number * $animals(outCost)]" \
             [list comment "out costs of $number $animals($mob,class)"]

   apsimSendMessage economics income \
       {paddock livestock} "name $animals(${mob},class)" \
       "amount [expr $number * $animals(${mob},alw) * $animals($animals(${mob},class),price)]" \
       [list comment "sale of $number $animals(${mob},class) at $animals(${mob},alw) kg"]

   apsimWriteToSummaryFile "[apsimGet dd/mm/yyyy]: animals:Out: removing $number of mob $mob ($animals(${mob},class))  at [format %.0f $animals(${mob},alw)] kg"

   if {$animals(${mob},number) <= 0} {
      set animals(${mob},state)  off
      set animals(${mob},alw)    0.0
      set animals(${mob},age)    0
      set animals(${mob},paddock)  {}
      set animals(${mob},crop)   {}
      set animals($mob,supplemented) 0
      apsimSet $animals($mob,id).pasture_source "farm manager"
      apsimSet $animals($mob,id).stocking_rate  0.0
      apsimSet $animals($mob,id).alw            0.0
      apsimSet $animals($mob,id).allow_supplements 0
      apsimWriteToSummaryFile "[apsimGet dd/mm/yyyy]: animals:Out: mob $mob is gone"
   } else {
      error "Adjust stocking rate here.."
   }
}

# Keep track of alw and age
proc doPostAnimals {} {
   global animals config

   foreach mob $animals(mobs) {
      if {$animals(${mob},state) != "off"} {

          # keep track of ALW if they're on a 'fake' paddock
          if {$animals(${mob},crop) == "stubble" || $animals(${mob},crop) == "stubble"} {
             set animals($mob,alw) [expr $animals($mob,alw) + 0.9]      ;# 0.9 kg/hd/day
             
          } elseif {$animals(${mob},crop) == "feedlot"} {
             set animals($mob,alw) [expr $animals($mob,alw) + 2.0]      ;# 2.0 kg/hd/day
          } else {
             if {$animals($mob,supplemented)} {
                # Work out pot lwg and ignore feed restrictions
                set month [apsimGet month]
                set season(1) summer
                set season(2) summer
                set season(3) autumn
                set season(4) autumn
                set season(5) autumn
                set season(6) winter
                set season(7) winter
                set season(8) winter
                set season(9) spring
                set season(10) spring
                set season(11) spring
                set season(12) summer
                set lwg [expr $config($animals(${mob},crop),$season($month)_lwg) / 91.25]
                set animals($mob,alw) [expr $animals($mob,alw) + $lwg]
                apsimSet $animals($mob,id).alw $animals($mob,alw)
             } else {
               set animals($mob,alw) [apsimGet $animals($mob,id).alw]
             }  
          }
          incr animals(${mob},age)
      }
   }
}


#Move stock somewhere. 
# mob = name of the animal group
# paddock = the paddock they're going to
# crop = The name of the crop they'll eat
proc moveStockTo {mob paddock crop} {
   global config animals

   set from "$animals($mob,paddock).$animals($mob,crop)"
   if {$crop == "feedlot"} {
      apsimSet $animals($mob,id).pasture_source "farm manager"
   } elseif {$crop == "stubble" || $crop == "Stubble"} {
      apsimSet $animals($mob,id).pasture_source "farm manager"
   } else {
      apsimSet $animals($mob,id).pasture_source "$paddock.$crop"
      set newSr [expr $animals($mob,number) / $config($paddock,area)]

      ##?? need to convert animal equivalents here

      apsimSet $animals($mob,id).stocking_rate $newSr
      apsimSet $animals($mob,id).alw $animals($mob,alw)

      foreach season {summer_lwg winter_lwg autumn_lwg spring_lwg} {
         apsimSet $animals($mob,id).${season} $config($crop,$season)
      }
   }
   set animals($mob,paddock)  $paddock
   set animals($mob,crop)   $crop
   set animals($mob,state)  "$paddock.$crop"
   set animals($mob,age)    0
   set animals($mob,age)    0
   set animals($mob,supplemented) 0
   apsimSet $animals($mob,id).allow_supplements 0
   apsimWriteToSummaryFile "[apsimGet dd/mm/yyyy]: animals:moveStockTo mob=$mob from=$from to=$paddock.$crop wt=[format %.0f $animals($mob,alw)] sr=[format %.2f [apsimGet $animals($mob,id).stocking_rate]]"
   lappend animals(report) "[apsimGet dd/mm/yyyy],$mob,$animals($mob,number),$from,$paddock.$crop,$animals($mob,alw)"
}

# Split a mob.  
proc splitMob { mob num paddock crop } {
   global config animals

   apsimWriteToSummaryFile "[apsimGet dd/mm/yyyy]: animals:split $animals($mob,class) old =$animals($mob,number), new =[expr $animals($mob,number) - $num]"

   foreach newmob $animals(mobs) {
      if {$animals(${newmob},state) == "off"} {break}
   } 
   if {$animals(${newmob},state) != "off"} {parray animals; error "Too many mobs to split"}
   
   foreach what {state class alw number age} {
      set animals($newmob,$what) $animals($mob,$what)  
   }
   set animals($mob,number) [expr $animals($mob,number) - $num]
   if {$animals($mob,number) < 0} {parray animals; error "mob $mob has negative size"}
   moveStockTo $mob $animals($mob,paddock) $animals($mob,crop)

   set animals($newmob,number)  $num
   if {$animals($newmob,number) < 0} {parray animals; error "mob $newmob has negative size"}
   moveStockTo $newmob $paddock $crop
   return $newmob
}

proc setSupplementsOn {mob} {
   global animals
   set animals($mob,supplemented) 1
   apsimSet $animals($mob,id).allow_supplements 1
}

proc setSupplementsOff {mob} {
   global animals
   set animals($mob,supplemented) 0
   apsimSet $animals($mob,id).allow_supplements 0
}

proc animalWeight {mob} {
   global animals
   if {[info exists animals($mob,alw)]} { return $animals($mob,alw)}
   return {}
}

proc animalNumber {mob} {
   global animals
   if {[info exists animals($mob,number)]} {return $animals($mob,number)}
   return {}
}

proc animalPaddock {mob} {
   global animals
   if {[info exists animals($mob,paddock)]} {return $animals($mob,paddock)}
   return {}
}

proc animalCrop {mob} {
   global animals
   if {[info exists animals($mob,crop)]} {return $animals($mob,crop)}
   return {}
}

proc animalDaysIn {mob where} {
   global animals
   if {$animals($mob,crop) == "$where"} {
     return $animals($mob,age)
   } 
   return 0  
}

proc heaviestMob {} {
   global animals
   set w 0.0; set m {}
   foreach mob $animals(mobs) {
      if {[info exists animals($mob,alw)]} { 
          if {$animals($mob,alw) > $w} {
             set w $animals($mob,alw)
             set m $mob
          }
      }
   }
   return $m
}

proc heaviestMobNotIn {paddock} {
   global animals
   set w 0.0; set m {}
   foreach mob $animals(mobs) {
      if {[info exists animals($mob,alw)]} { 
          if {[animalPaddock $mob] != "$paddock" && $animals($mob,alw) > $w} {
             set w $animals($mob,alw)
             set m $mob
          }
      }
   }
   return $m
}

proc lightestMobIn {paddock} {
   global animals
   set w 10000.0; set m {}
   foreach mob [listAnimalsIn $paddock] {
      if {[info exists animals($mob,alw)]} { 
          if {$animals($mob,alw) < $w} {
             set w $animals($mob,alw)
             set m $mob
          }
      }
   }
   return $m
}

proc anyAnimalsIn {paddock} {
   global animals
   foreach mob $animals(mobs) {
       if {$animals($mob,paddock) == "$paddock"} {return 1} 
   }
   return 0
}

proc listAnimalsIn {paddock} {
   global animals
   set r {}
   foreach mob $animals(mobs) {
       if {$animals($mob,paddock) == "$paddock"} {lappend r $mob} 
   }
   return $r
}

proc mobsOnFarm {} {
   global animals
   set mobs {}
   foreach mob $animals(mobs) {
       if {$animals($mob,state) != "off"} {lappend mobs $mob} 
   }
   return $mobs
}

proc doSupplementCosts {} {
   global animals

   set nSupplemented 0
   foreach mob $animals(mobs) {
      if {$animals($mob,supplemented)} {
         set nSupplemented [expr $nSupplemented + $animals($mob,number)]
      }
   }

   if {$nSupplemented > 0} {
      apsimSendMessage economics expenditure {paddock livestock}\
             "cost [expr $nSupplemented * $animals(dailySupplementCost)]" \
             [list comment "supplement costs for $nSupplemented beasts"]
   }
}

proc doFeedlotCosts {} {
   global animals

   # Work out feedlot costs for today
   set nInFeedlot 0
   foreach mob $animals(mobs) {
      if {$animals($mob,paddock) == "feedlot"} {
         set nInFeedlot [expr $nInFeedlot + $animals($mob,number)]
      }
   }

   if {$nInFeedlot > 0} {
      apsimSendMessage economics expenditure {paddock livestock}\
             "cost [expr $nInFeedlot * $animals(dailyFeedlotCost)]" \
             [list comment "feedlot costs for $nInFeedlot beasts"]
   }
}


proc sellAndReplace {mob} {
   set n [animalNumber $mob]
   sell $mob
   replace $mob $n
}
    
proc sell {mob} {
   animalsOut $mob all
}

proc replace {mob n} {
   set mob [animalsIn $n steers 250]      ;# replace sold animals @ 250Kg 
   moveStockTo $mob BuffelPaddock buffel  ;# move onto buffel paddock
}

proc numAnimalsIn { paddock } {
  set n 0
  foreach mob [listAnimalsIn $paddock] {
    set n [expr $n + [animalNumber $mob]]
  }   
  return $n
}



# Some extra bits (needed to fool animals to talk to top level)
set leafgreenwt 0.0
set stemgreenwt 0.0
set leafsenescedwt 0.0
set stemsenescedwt 0.0
set dlt_dm 0.0
set source {}

]]></text>
          <event>init</event>
        </script>
        <script name="prepare">
          <text><![CDATA[
######## Daily Animal Management

# If there's an oats crop ready with no animals on it, put the heaviest mob there
if {[apsimGet "OatsPaddock.oats.biomass"] > 1500 &&
     [numAnimalsIn OatsPaddock] < $config(OatsPaddock,numAnimals) } { ;#if there's no animals on this paddock then
    set heaviest [heaviestMobNotIn OatsPaddock]
    if {$heaviest != {}} {
       moveStockTo $heaviest  OatsPaddock oats  ;# move onto oats paddock
    } else {apsimWriteToSummaryFile "animals: whoops! trying to move empty mob onto oats"}
}

# If the oats are flogged, move any animals there out.
if {[anyAnimalsIn OatsPaddock] &&
     [apsimGet "OatsPaddock.oats.biomass"] < 1000 } {
   foreach mob [listAnimalsIn OatsPaddock] {
      moveStockTo $mob LeucaenaGrassPaddock leucaena      ;# move
   }
}

# Same for sorghum
if {[apsimGet "SorghumPaddock.SweetSorghum.biomass"] > 2500 &&
     [numAnimalsIn SorghumPaddock] < $config(SorghumPaddock,numAnimals) } {
    set heaviest [heaviestMobNotIn SorghumPaddock]
    if {$heaviest != {}} {
       moveStockTo $heaviest  SorghumPaddock SweetSorghum
    } else {apsimWriteToSummaryFile "animals: whoops! trying to move empty mob onto sorg"}
}

if {[anyAnimalsIn SorghumPaddock] &&
    [apsimGet "SorghumPaddock.SweetSorghum.biomass"] < 1000 } {
  foreach mob [listAnimalsIn SorghumPaddock] {
     if {[numAnimalsIn LeucaenaGrassPaddock] < $config(LeucaenaGrassPaddock,numAnimals) } {
         moveStockTo $mob LeucaenaGrassPaddock leucaena      
     } else {    
         moveStockTo $mob BuffelPaddock buffel 
     }
  }    
}

# If buffel is flogged, move animals to leucaena
if {[anyAnimalsIn BuffelPaddock ] &&
     [apsimGet "BuffelPaddock.buffel.tsdm"] < 1000 &&
     [numAnimalsIn LeucaenaGrassPaddock] < $config(LeucaenaGrassPaddock,numAnimals) &&
     [apsimGet "LeucaenaGrassPaddock.leucaena.tsdm"] > 1000 } {
   apsimWriteToSummaryFile "animals: Buffel is scarce - tsdm=[apsimGet BuffelPaddock.buffel.tsdm]"
   set mob [lightestMobIn BuffelPaddock ] 
   if {$mob != {}} {
       moveStockTo $mob LeucaenaGrassPaddock leucaena   
   }
}

# Sell animals if buffel is finished
if {[anyAnimalsIn BuffelPaddock ] &&
    [apsimGet "BuffelPaddock.buffel.tsdm"] < 800 } {
   apsimWriteToSummaryFile "animals: Buffel is flogged - tsdm=[apsimGet BuffelPaddock.buffel.tsdm]"
   foreach mob [listAnimalsIn BuffelPaddock ] {
      sell $mob   
   }
}

# Sell if everything gone - nowhere left to go
if {[anyAnimalsIn LeucaenaGrassPaddock ] &&
    [apsimGet "LeucaenaGrassPaddock.leucaena.tsdm"] < 800 } {
   apsimWriteToSummaryFile "animals: Leucaena is flogged - tsdm=[apsimGet LeucaenaGrassPaddock.leucaena.tsdm]"
   foreach mob [listAnimalsIn LeucaenaGrassPaddock] {
      sell $mob
   }
}

# Replace stock if pasture becomes available
if { [llength [mobsOnFarm]] < [llength $animals(mobs)] } {
#puts "animals: Only have  [llength [mobsOnFarm]] mobs on farm"
   foreach {paddock pasture} {LeucaenaGrassPaddock leucaena BuffelPaddock buffel} {
      set n [numAnimalsIn $paddock]
#puts "there are $n animals on $paddock.$pasture, which is [apsimGet $paddock.$pasture.tsdm]kg/ha"
      if {$n <  $config($paddock,numAnimals) && [apsimGet "$paddock.$pasture.tsdm"]  > 1000} {
#puts "trying to bring 100 animals into $paddock  $pasture"
         set mob [animalsIn 100 steers 250]       ;# replace sold animals @ 250Kg 
         moveStockTo $mob $paddock $pasture
      }
   }
}

# Sell any animal > 450kg
foreach mob $animals(mobs) {
   if { [animalWeight $mob] > 450 } {    
      sellAndReplace $mob
   }
}
]]></text>
          <event>prepare</event>
        </script>
        <script name="post">
          <text>
doPostAnimals </text>
          <event>post</event>
        </script>
        <script name="end_simulation">
          <text>
closeAnimals
</text>
          <event>end_simulation</event>
        </script>
      </rule>
      <rule name="Crop Management Routines">
        <script>
          <text>
#############################
# Generic sowing/harvesting procedures. These rely on a "defaults" array for crop specifics
# There are NO ECONOMICS in this - just event based reporting (sow,harvest &amp; spray)
#############################
# Change to a new state (utility procedure). Sows crop and fertilises it
proc sowCrop {paddock crop} {
   global defaults config

   # See if this is an alias
   if {[info exists config($crop,alias)]} {
      set realCrop $config($crop,alias)
   } else {
      set realCrop $crop
   }
   array set sow [gatherArgs sow $crop]

   eval apsimSendMessage $paddock.$realCrop sow [mash [array get sow]]

   # machinery operation
   eval apsimSendMessage machinery operate \
                   [mash [concat [array get sow] area $config($paddock,area)  \
                   paddock $paddock costtype incrop_cost ]]

   # Work out what to do with fertiliser stuff
   array set fert [gatherArgs fertiliser $crop]
   if {$fert(calcMethod) == "constant_rate"} {
      eval apsimSendMessage $paddock.fertiliser apply [mash [array get fert]]
      reportEvent $paddock "fertilise-type=$fert(type),amount=$fert(amount)"
 
   } elseif {$fert(calcMethod) == "targetN"} {
      set n [apsimGet $config($paddock,nModule).no3()]
      set deficit [expr $fert(amount) - $n]
      if {$deficit &gt; 0.0} {
         set fert(amount) $deficit
         eval apsimSendMessage $paddock.fertiliser apply [mash [array get fert]]
         reportEvent $paddock "fertilise-type=$fert(type),amount=$fert(amount)"

      }                                 
   } elseif {$fert(calcMethod) == "howard"} {
      set N  [apsimGet $config($paddock,nModule).no3()]      
      set sw [apsimGet esw]             
      set deficit [expr $sw - $N]
      if {$deficit &gt; 0.0} {
         set fert(amount) $deficit
         eval apsimSendMessage $paddock.fertiliser apply [mash [array get fert]]
         reportEvent $paddock "fertilise-type=$fert(type),amount=$fert(amount)"
      }
   }

   # Finally, see if there's a helper function defined
   if {[info commands sow$realCrop] != {}} {
      extraSow$realCrop
   } elseif {[info commands sow$crop] != {}} {
      extraSow$crop
   }

   reportEvent $paddock "sow-crop=$crop"
}

# See whether an apsim crop can be harvested (utility procedure)
proc canHarvestCrop {paddock crop} {
   global config

   if {[info exists config($crop,alias)]} {set crop $config($crop,alias)}

   if {$crop == "wheat" || $crop == "sorghum" || $crop == "maize" || $crop == "chickpea" || $crop == "weed"} {
      set stageName [apsimGet $paddock.$crop.StageName]
      set plant_status [apsimGet $paddock.$crop.plant_status]
      if {$stageName == "harvest_ripe" || $plant_status == "dead"} {
         return 1
      }
      return 0
   } else {
      error "canHarvestCrop: Don't know harvest a crop called $crop"
   }
}

# Harvest and end a crop
proc harvestAndEndCrop {paddock crop} {
   global config daysSinceLastHarvest defaults

   if {[info exists config($crop,alias)]} {
      set realCrop $config($crop,alias)
   } else {
      set realCrop $crop
   }

   if {[apsimGet $paddock.$realCrop.plant_status] != "dead"} {
      reportEvent $paddock "harvest-crop=$crop"
   } else {
      reportEvent $paddock "fail-crop=$crop"
   }
   apsimSendMessage $paddock.$realCrop harvest
   apsimSendMessage $paddock.$realCrop end_crop
   set daysSinceLastHarvest($paddock) 0
}

proc getEsw {paddock} {
   global config
   return [apsimGetOptional $config($paddock,watBal).esw]
}

proc getMSeek2 {paddock} {
   global config

   set ll2    [lindex [apsimGet $config($paddock,watBal).ll15] 1]
   set swat2  [lindex [apsimGet $config($paddock,watBal).sw]   1]
   set dul2   [lindex [apsimGet $config($paddock,watBal).dul]  1]
   
   set mseek2 [expr (($swat2-$ll2)/($dul2-$ll2))]

   return $mseek2
}

proc sprayChickpeas {paddock} {
   apsimWriteToSummaryFile "spraying Chickpeas"
   reportEvent $paddock "spray-type=insecticide,amount=0.3"
}

</text>
          <event>init</event>
        </script>
        <script>
          <text>
foreach paddock $config(cropPaddocks) {
#   set config($paddock,pawc)        [calcPAWC $paddock]
   set config($paddock,yr)   [apsimGet year]
}

</text>
          <event>start_simulation</event>
        </script>
      </rule>
      <rule name="Event reporting old">
        <script>
          <text>
# An event based report file - "agronomic" style

# Write a line to the CSV report file
proc reportCSV {from evt args} {
   global config event
   foreach arg [split $args ","] {
      foreach {name value} [split $arg "="] {break}
      set info($name) $value
   }
   if {[info exists info(crop)]} {set crop $info(crop)} else {set crop ""}
   if {[info exists config($crop,alias)]} {set crop $config($crop,alias)}
   if {$crop == ""} {return}

   set line "$evt,$from,[apsimGet year],[apsimGet dd/mm/yyyy]"

   if {[info exists event($from,daysSinceEvent)]} {append line ",$event($from,daysSinceEvent)"} else {append line ","}
   set event($from,daysSinceEvent) 0
   
   append line ",$crop"
   if {$evt == "harvest"} {append line ",[apsimGetOptional $from.$crop.yield]"} else {append line ","}
   if {$evt == "harvest"} {append line ",[apsimGetOptional $from.$crop.biomass]"} else {append line ","}
   if {$evt == "harvest"} {append line ",[apsimGetOptional $from.$crop.grain_protein]"} else {append line ","}
   append line ",$event($from,ep)"; set event($from,ep) 0.0
   append line ",[apsimGet $config($from,watBal).esw]"
   append line ",[apsimGet $config($from,nModule).no3()]"

   if {$evt == "harvest"} {append line ",[apsimGetOptional $from.tracker.incroprain]"} else {append line ","}
   if {$evt == "sow"} {append line ",[apsimGetOptional $from.tracker.fallowrain]"} else  {append line ","}

   append line ",[apsimGet $from.tracker.es_sum]"
   append line ",[apsimGet $from.tracker.runoff_sum]"
   append line ",[apsimGet $from.tracker.drainage_sum]"
   append line ",[apsimGet $from.tracker.soil_loss_sum]"
   append line ,[apsimGet "$from.surface organic matter.surfaceom_wt"]
   append line ",[apsimGet $config($from,watBal).cover_surface_runoff]"
   append line ",[apsimGet $from.tracker.n_mineralisation_sum]"
   
   apsimSendMessage $from.tracker blork

   lappend event(lines) $line
}

rename reportEvent reportEvent_OLD
proc reportEvent [info args reportEvent_OLD] "[info body reportEvent_OLD]; reportCSV \$from \$event \$args"

</text>
          <event>init</event>
        </script>
        <script>
          <text>
   foreach x [array names event  *,daysSinceEvent] {
      incr event($x)
   }

foreach paddock $config(cropPaddocks) {
   foreach crop $config(crops) {
      set ep [apsimGetOptional $paddock.$crop.ep]
      if {$ep != ""} {
        set event($paddock,ep) [expr $event($paddock,ep) + $ep]
      }  
   }
}</text>
          <event>post</event>
        </script>
        <script>
          <text>
set fp [open $simName.event.csv w]

puts -nonewline $fp "event,paddock,year,date,days since last event,crop,"
puts -nonewline $fp "yield (kg/ha dry),biomass (kg/ha dry),protein(%),Ep (mm),"
puts -nonewline $fp "esw (mm rel ll15),no3 (kg/ha),"
puts -nonewline $fp "incroprain,fallowrain,"
puts -nonewline $fp "soil evap (mm),runoff (mm),drainage (mm),soil loss (t/ha),surface OM (kg),cover (%),n_mineralisation"
puts -nonewline $fp "\n"

foreach line $event(lines) {
  puts $fp $line
}

close $fp
</text>
          <event>end_simulation</event>
        </script>
        <script>
          <text>
catch {file delete $simName.event.csv}

set event(lines) {}

foreach paddock $config(paddocks) {
  apsimSendMessage $paddock.tracker blork
  set event($paddock,daysSinceEvent) 0
  set event($paddock,ep) 0.0
}</text>
          <event>start_simulation</event>
        </script>
      </rule>
      <rule name="Event reporting">
        <script name="init">
          <text># Set up a CSV event based report file

#Event	Plant or Harvest or Death
#Paddock name	
#Area	Paddock area
#Year	always handy
#Date	dd/mm/yyyy format
#Days	days since last reported (ie fallow length or crop length)
#Crop	name of crop sown or harvested
#Yield	wet grain yield (standard moisture content)
#Biomass	
#ESW	extractable soil water (ideally based on CLL rather than LL15)
#NO3	soil nitrate N ian all layers (kgN/ha)
#Rain	rainfall since last reported


# Write a line to the CSV report file
proc reportCSV {from evt args} {
   global config event
   foreach arg [split $args ","] {
      foreach {name value} [split $arg "="] {break}
      set info($name) $value
   }
   if {[info exists info(crop)]} {set crop $info(crop)} else {set crop ""}
   if {[info exists config($crop,alias)]} {set crop $config($crop,alias)}
   if {$crop == ""} {return}

   set line "$evt,$from,[apsimGet year],[apsimGet dd/mm/yyyy]"

   if {[info exists event($from,daysSinceEvent)]} {append line ",$event($from,daysSinceEvent)"} else {append line ","}
   set event($from,daysSinceEvent) 0
   
   append line ",$crop"
   if {$evt == "harvest"} {append line ",[apsimGetOptional $from.$crop.yield]"} else {append line ","}
   if {$evt == "harvest"} {append line ",[apsimGetOptional $from.$crop.biomass]"} else {append line ","}
   if {$evt == "harvest"} {append line ",[apsimGetOptional $from.$crop.grain_protein]"} else {append line ","}
   append line ",$event($from,ep)"; set event($from,ep) 0.0

   append line ",[apsimGet $config($from,watBal).esw]"
   append line ",[apsimGet $config($from,nModule).no3()]"

   if {$evt == "harvest"} {append line ",[apsimGetOptional $from.tracker.incroprain]"} else {append line ","}
   if {$evt == "sow"} {append line ",[apsimGetOptional $from.tracker.fallowrain]"} else  {append line ","}

   append line ",[apsimGet $from.tracker.es_sum]"
   append line ",[apsimGet $from.tracker.runoff_sum]"
   append line ",[apsimGet $from.tracker.drainage_sum]"
   append line ",[apsimGet $from.tracker.soil_loss_sum]"
   append line ,[apsimGet "$from.surface organic matter.surfaceom_wt"]
   append line ",[apsimGet $config($from,watBal).cover_surface_runoff]"
   append line ",[apsimGet $from.tracker.n_mineralisation_sum]"
   append line ",[apsimGet $config($from,nModule).oc(1)]"
   append line ",[apsimGet $config($from,nModule).oc(2)]"
   
   apsimSendMessage $from.tracker blork

   lappend event(lines) $line
}

rename reportEvent reportEvent_OLD
proc reportEvent [info args reportEvent_OLD] "[info body reportEvent_OLD]; reportCSV \$from \$event \$args"

</text>
          <event>init</event>
        </script>
        <script name="post">
          <text>
foreach x [array names event  *,daysSinceEvent] {
   incr event($x)
}

foreach paddock $config(paddocks) {
   foreach crop $config(crops) {
      set event($paddock,ep) [expr $event($paddock,ep) + [apsimGet $paddock.$crop.ep]]
   }
}</text>
          <event>post</event>
        </script>
        <script name="end_simulation">
          <text>
set fp [open $simName.event.csv w]

puts -nonewline $fp "event,paddock,year,date,days since last event,crop,"
puts -nonewline $fp "yield (kg/ha dry),biomass (kg/ha dry),protein(%),ep,"
puts -nonewline $fp "esw (mm rel ll15),no3 (kg/ha),"
puts -nonewline $fp "incroprain,fallowrain,"
puts -nonewline $fp "soil evap (mm),runoff (mm),drainage (mm),soil loss (t/ha),surface OM (kg),cover (%),n_mineralisation,oc(1),oc(2)"
puts -nonewline $fp "\n"

foreach line $event(lines) {
  puts $fp $line
}

close $fp
</text>
          <event>end_simulation</event>
        </script>
        <script name="start_simulation">
          <text>
catch {file delete $simName.event.csv}

set event(lines) {}

foreach paddock $config(paddocks) {
  apsimSendMessage $paddock.tracker blork
  set event($paddock,daysSinceEvent) 0
  set event($paddock,ep) 0.0
}</text>
          <event>start_simulation</event>
        </script>
      </rule>
    </tclmanager>
    <area name="Crop Paddock">
      <wheat />
      <chickpea />
      <weed />
      <surfaceom name="surface organic matter">
        <PoolName type="text" description="Organic Matter pool name">wheat_stubble</PoolName>
        <type type="text" description="Organic Matter type">wheat</type>
        <mass type="text" description="Initial surface residue (kg/ha)">1000</mass>
        <cnr type="text" description="C:N ration of initial residue">80</cnr>
        <standing_fraction type="text" description="Fraction of residue standing">0</standing_fraction>
      </surfaceom>
      <fertiliser />
      <Soil shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)">
        <Water shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/Water">
          <SoilCrop name="wheat" shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/Water/wheat" />
          <SoilCrop name="chickpea" shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/Water/chickpea" />
          <SoilCrop name="weed" shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/Water/weed" />
        </Water>
        <SoilWater shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/SoilWater" />
        <SoilOrganicMatter shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/SoilOrganicMatter" />
        <Analysis shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/Analysis" />
        <Sample name="Initial Nitrogen" shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/Initial nitrogen" />
        <InitialWater name="Initial water">
          <FractionFull>0</FractionFull>
          <PercentMethod>EvenlyDistributed</PercentMethod>
        </InitialWater>
      </Soil>
      <erosion name="Erosion">
        <model type="text" description="Model Name">freebairn</model>
        <slope type="text" description="Slope of plot in percent (%)">6.5</slope>
        <slope_length type="text" description="Length of plot (m)">60</slope_length>
        <k_factor type="text" description="Soil erodibility factor (t/ha/EI 30 )">0.4</k_factor>
        <p_factor type="text" description="Supporting practise factor (unitless)">1</p_factor>
        <bed_depth type="text" description="Depth to bedrock (mm)">3500</bed_depth>
        <profile_reduction type="list" listvalues="off,on" description="Profile Reduction">off</profile_reduction>
        <profile_layer_merge type="text" description="Fraction of original size in which the lowest layer is merged into the layer above (0-1)">0.05</profile_layer_merge>
        <minimum_depth type="text" description="If the profile erodes to this depth, the simulation is stopped (mm)">100</minimum_depth>
      </erosion>
      <tracker>
        <variable>sum of rain on newmet from sowing to harvesting as incroprain</variable>
        <variable>sum of rain on newmet from harvesting to sowing  as fallowrain</variable>
        <variable>sum of es on post from blork to now as es_sum</variable>
        <variable>sum of runoff on post from blork to now as runoff_sum</variable>
        <variable>sum of drain on post from blork to now as drainage_sum</variable>
        <variable>sum of soil_loss on post from blork to now as soil_loss_sum</variable>
        <variable>sum of dlt_n_min_tot() on post from blork to now as n_mineralisation_sum</variable>
      </tracker>
    </area>
    <tclmanager name="Economics">
      <rule name="Initialisation logic">
        <script name="init">
          <text><![CDATA[

#Nothing to see here..

]]></text>
          <event>init</event>
        </script>
      </rule>
    </tclmanager>
    <tclmanager name="Machinery">
      <rule name="Initialisation logic">
        <script name="init">
          <text><![CDATA[
# Apsim Machinery (sub)Module
# Contains Tractors, Implements & Labour.

# Operations: 
# bool available(<config>)    ; See if a configuration can be used today (read)
# operate <config> <area>     ; Operate a configuration over an area until finished (event)

########################## Apsim interface code here
source $apsuite/Model/TclLink/CIDataTypes.tcl

# A trace handler for status. This handler is called whenever another module 
# asks us whether machinery is available.
#    NB. Careful! Errors in trace routines are not caught!!!
proc machinery:maProc {name1 name2 op} {
   if {$op == "read" } {
      global config $name1
      foreach {junk tractor implement} [split $name1 "_"] { break }

      # Check they are known to us
      if {[lsearch $config(tractors) $tractor] < 0} {
         set msg "tractor \"$tractor\" is unknown - I only know about $config(tractors)"
         error $msg
      }
      if {[lsearch $config(implements) $implement] < 0} {
         set msg "implement \"$implement\" is unknown - I only know about $config(implements)"
         error $msg
      }
      
      # Now see if they are busy
      set avail 1
      catch {
         global machinery:jobs
         foreach job ${machinery:jobs} {
            foreach {tid iid area paddock costtype} [split $job ","] {break}
            if {"$tractor" == "$tid" || "$implement" == "$iid"} {set avail 0}
         }
      } msg
      if {$msg != ""} {apsimWriteToSummaryFile $msg; error $msg}
           
      # Set the variable - this is what is returned to apsim.
      set $name1 $avail
   }  
}

# An event handler. 
proc machinery:operateHandler {args} {
  global incomingVariant
  foreach {name value} [unpack_Variant $incomingVariant] {
     regsub -all "'" $name {} name
     regsub -all "'" $value {} value
     set [string tolower $name] [string tolower $value]
  }
  if {![info exists tractor] || ![info exists implement] || ![info exists area]} {
     error "Must specify a tractor, implement, and area to operate over."
  }
  if { ![info exists paddock] } {set paddock {}}
  if { ![info exists costtype] } {set costtype unknown}
  machinery:operate $tractor $implement $area $paddock $costtype
}

# Now register the event handlers. 
apsimSubscribeVariant operate            "machinery:operateHandler"
apsimSubscribeNull process            "machinery:process"
apsimSubscribeNull end_financial_year "machinery:end_year"
########################## End apsim interface code

########################## Machinery configuration code
# Read in our configuration
proc machinery:initialise {} {
   global config
   if {![info exists config(tractors)]} {set config(tractors) {}}
   if {![info exists config(implements)]} {set config(implements) {}}
} 


# return the work rate for this combo can cover per hour
proc getCombo {tractor implement thing} {
   global config
   if {![info exists config(machinery,$tractor,$implement,$thing)]} {
      error "No $thing specified for $tractor and $implement"
   }
   return $config(machinery,$tractor,$implement,$thing)
}

proc getRate {tid iid} {
   return [getCombo $tid $iid fuelrate]
}

proc getValue {id thing} {
   global config
   if {![info exists config(machinery,$id,$thing)]} {
      error "No $thing for $id specified (get)"
   }
   return $config(machinery,$id,$thing)
}

# Return the cost of fuel per liter
proc fuelCost {} {
   global config
   if {![info exists config(machinery,fuelcost)]} {
      error "No fuelcost specified"
   }
   return $config(machinery,fuelcost)
}

# return the fuel cost this combo uses per hour 
proc getFuelCost {tid iid} {
   return [expr [getCombo $tid $iid fuelrate] * [fuelCost]]
}

# Return the number of hours worked per day
proc getHoursPerDay {tid iid} {
   return [getCombo $tid $iid hoursperday]
}

proc setValue {id thing value} {
   global config
   if {![info exists config(machinery,$id,$thing)]} {
      error "No $thing for $id specified (set)"
   }
   set config(machinery,$id,$thing) $value
}

##############
# Operate a configuration over an area. Just add it to the job queue 
# and let process look after it.
proc machinery:operate {tractor implement area paddock costtype} {
   if {![string is double -strict $area]} {
      error "Area should be a number (not $area)"
   }
   global machinery:jobs
   lappend machinery:jobs $tractor,$implement,$area,$paddock,$costtype
   apsimWriteToSummaryFile "Machinery job \"$tractor + $implement\" is queued"
}

# The daily process routine. Manages the job queue
proc machinery:process {} {
   global machinery:jobs
   set tomorrowsJobs {}
   # Go through each job. If an item is in use in any prior job, we can't do it today. 
   for {set ijob 0} {$ijob < [llength ${machinery:jobs}]} {incr ijob} {
      set job [lindex ${machinery:jobs} $ijob]
      foreach {tid iid area paddock costtype} [split $job ","] {break}
      set inuse 0
      for {set j 0} {$j < $ijob} {incr j} {
         foreach {Ttid Tiid Tarea Tpaddock Tcosttype} [split [lindex ${machinery:jobs} $j] ","] {break}
         if {$tid == $Ttid || $iid == $Tiid} {set inuse 1}
      }
      if {!$inuse} {
        # The job is running today. Work out how many hours, and then the costs
        set maxHours [getHoursPerDay $tid $iid]
        set rate [getRate $tid $iid]

        if {$maxHours * $rate <= $area} {
           set hours $maxHours
           set areaToday [expr $maxHours * $rate]
        } else {   
           set hours [expr $area / $rate]
           set areaToday [expr $hours * $rate]
        }   
        #apsimWriteToSummaryFile "hours='$hours', rate='$rate',cost='[getFuelCost $tid $iid]',oil='[getValue $tid oil]',paddock='$paddock',costtype=$costtype"
        set cost [expr $hours * [getFuelCost $tid $iid] * (1.0 + [getValue $tid oil]/100.0)]
        apsimSendMessage "" expenditure [list cost $cost] [list comment "fuel & oil costs of $tid + $iid"] [list paddock $paddock] [list area $areaToday] [list $costtype {}]

        set cost [expr $hours * [getValue $tid newPrice] * ([getValue $tid repairs]/100.0)/ [getValue $tid lifeOfEquipment]] 
        apsimSendMessage "" expenditure [list cost $cost] [list comment "Repairs & maintenance of $tid"] [list paddock $paddock] [list area $areaToday] [list $costtype {}]

        set cost [expr $hours * [getValue $iid newPrice] * ([getValue $iid repairs]/100.0)/ [getValue $iid lifeOfEquipment]] 
        apsimSendMessage "" expenditure [list cost $cost] [list comment "Repairs & maintenance of $iid"] [list paddock $paddock] [list area $areaToday] [list $costtype {}]

        set rate [expr $hours * [getRate $tid $iid]]
        set area [expr $area - $rate]
        setValue $tid age [expr $hours + [getValue $tid age]]
        setValue $iid age [expr $hours + [getValue $iid age]]

        if {$area > 0} {
           lappend tomorrowsJobs $tid,$iid,$area,$paddock,$costtype
        } else {
           apsimWriteToSummaryFile "Machinery job '$tid + $iid' in $paddock has finished"
        }
      } else {
        lappend tomorrowsJobs $job
      } 
   }
   set machinery:jobs $tomorrowsJobs
}

# The "end_year" routine. Do loan payments and replacement
proc machinery:end_year {} {
   foreach id [concat $config(tractors) $config(implements)] {
     if {$config(machinery,$id,loanInterestRate) > 0.0} {
        if {$config(machinery,$id,loanDuration] > 0} {
           if {$config(machinery,$id,age) >= $config(machinery,$id,lifeOfEquipment)} {
              set newPrice $config(machniery,$id,newPrice)
              set salvage [expr $config(machinery,$id,tradeInValue)/100.0 * $newPrice]
              set loanValue [expr $newPrice - $salvage]
              apsimWriteToSummaryFile "Establishing new loan of \$$loanValue for $id (new price \$$newPrice, salvage \$$salvage)"
              set config(machinery,$id,loanValue) $loanValue
              set config(machinery,$id,age) 0
              set config(machinery,$id,loanPeriod) 1
           } else {
              if {config(machinery,$id,loanPeriod) <=  $config(machinery,$id,loanDuration)} {
                 #A = P(i(1+i)^n)/((1+i)^n - 1)
                 set P $config(machinery,$id,newPrice) 
                 set i [expr $config(machinery,$id,loanInterestRate)/100.0]
                 set n $config(machinery,$id,loanDuration)
                 set A [expr $P * ($i*pow(1+$i,$n))/(pow(1.0+$i,$n) - 1.0) ]
                 apsimSendMessage "" expenditure [list cost $A] [list interest_paid $A] [list comment "Loan repayments for $id"]
                 
                 set config(machinery,$id,loanPeriod) [expr 1 + $config(machinery,$id,loanPeriod)]
                 if { $config(machinery,$id,loanPeriod) >  $config(machinery,$id,loanDuration) } {
                     apsimWriteToSummaryFile "Loan for $id is finished"
                 }
              }
              
           }
        }
     }    
   }  
}
]]></text>
          <event>init</event>
        </script>
        <script name="start_simulation">
          <text><![CDATA[

# Finally, load our configuration database and initialise states
machinery:initialise 
set machinery:jobs {}

# Set the current period of the loan to 1 past its end
foreach id [concat $config(tractors) $config(implements)] {
   set config(machinery,$id,loanPeriod) [expr 1 + $config(machinery,$id,loanDuration)]
}

# Now tell apsim we own it, set up the trace variable we use to trigger when the variable is read
foreach tid $config(tractors) {
  foreach iid $config(implements) {
     set v available_${tid}_${iid}
     set $v 0
     apsimRegisterGetSet $v
     trace add variable $v read "machinery:maProc"
  }
}

apsimWriteToSummaryFile "Machinery:\nTractors=$config(tractors)\nImplements=$config(implements)"

]]></text>
          <event>start_simulation</event>
        </script>
      </rule>
      <rule name="Machinery - 250kwFWA">
        <ui>
          <category description="Tractor" />
          <apsimname type="text" description="Apsim name">tractor1</apsimname>
          <newPrice type="text" description="New price ($)">160000.0</newPrice>
          <tradeInValue type="text" description="Trade In Value (% of new)">45</tradeInValue>
          <lifeOfEquipment type="text" description="Life of Equipment (hrs)">5000</lifeOfEquipment>
          <insuranceRate type="text" description="Insurance cost ($/$1000 insured)">6.2</insuranceRate>
          <repairs type="text" description="Repairs &amp; Maintenance (% of new value over lifetime)">15</repairs>
          <oil type="text" description="Oil &amp; Tyre costs (%age of fuel costs)">15</oil>
          <loanInterestRate type="text" description="Loan Interest Rate (%)">8</loanInterestRate>
          <loanDuration type="text" description="Loan Duration (years)">5</loanDuration>
          <age type="text" description="Age at start of simulation (hrs)">0</age>
          <category description="Implement 1" />
          <implement1name type="text" description="Name">sprayrig</implement1name>
          <implement1fuelrate type="text" description="Fuel Rate (lts/hour)">30.0</implement1fuelrate>
          <implement1workrate type="text" description="Work Rate (ha/hour)">30.0</implement1workrate>
          <implement1hoursperday type="text" description="Daily Hours (hours)">12</implement1hoursperday>
          <category description="Implement 2" />
          <implement2name type="text" description="Name">planter</implement2name>
          <implement2fuelrate type="text" description="Fuel Rate (lts/hour)">40.0</implement2fuelrate>
          <implement2workrate type="text" description="Work Rate (ha/hour)">14.0</implement2workrate>
          <implement2hoursperday type="text" description="Daily Hours (hours)">12</implement2hoursperday>
          <category description="Implement 3" />
          <implement3name type="text" description="Name">deepplanter</implement3name>
          <implement3fuelrate type="text" description="Fuel Rate (lts/hour)">60.0</implement3fuelrate>
          <implement3workrate type="text" description="Work Rate (ha/hour)">100.0</implement3workrate>
          <implement3hoursperday type="text" description="Daily Hours (hours)">8</implement3hoursperday>
        </ui>
        <script name="init">
          <text>
lappend config(tractors) "[apsimname]"
set config(machinery,[apsimname],newPrice) "[newPrice]"
set config(machinery,[apsimname],tradeInValue) "[tradeInValue]"
set config(machinery,[apsimname],lifeOfEquipment) "[lifeOfEquipment]"
set config(machinery,[apsimname],insuranceRate) "[insuranceRate]"
set config(machinery,[apsimname],repairs) "[repairs]"
set config(machinery,[apsimname],oil) "[oil]"
set config(machinery,[apsimname],loanInterestRate) "[loanInterestRate]"
set config(machinery,[apsimname],loanDuration) "[loanDuration]"
set config(machinery,[apsimname],age) "[age]"

set config(machinery,[apsimname],[implement1name],fuelrate) "[implement1fuelrate]"
set config(machinery,[apsimname],[implement1name],workrate) "[implement1workrate]"
set config(machinery,[apsimname],[implement1name],hoursperday) "[implement1hoursperday]"

set config(machinery,[apsimname],[implement2name],fuelrate) "[implement2fuelrate]"
set config(machinery,[apsimname],[implement2name],workrate) "[implement2workrate]"
set config(machinery,[apsimname],[implement2name],hoursperday) "[implement2hoursperday]"

set config(machinery,[apsimname],[implement3name],fuelrate) "[implement3fuelrate]"
set config(machinery,[apsimname],[implement3name],workrate) "[implement3workrate]"
set config(machinery,[apsimname],[implement3name],hoursperday) "[implement3hoursperday]"

</text>
          <event>init</event>
        </script>
      </rule>
      <rule name="Machinery - 170kwTractor">
        <ui>
          <category description="Tractor" />
          <apsimname type="text" description="Apsim name">tractor_2</apsimname>
          <newPrice type="text" description="New price ($)">47000.0</newPrice>
          <tradeInValue type="text" description="Trade In Value (% of new)">45</tradeInValue>
          <lifeOfEquipment type="text" description="Life of Equipment (hrs)">8000</lifeOfEquipment>
          <insuranceRate type="text" description="Insurance cost ($/$1000 insured)">6.2</insuranceRate>
          <repairs type="text" description="Repairs &amp; Maintenance (% of new value over lifetime)">10</repairs>
          <oil type="text" description="Oil &amp; Tyre costs (%age of fuel costs)">15</oil>
          <loanInterestRate type="text" description="Loan Interest Rate (%)">7</loanInterestRate>
          <loanDuration type="text" description="Loan Duration (years)">5</loanDuration>
          <age type="text" description="Age at start of simulation (hrs)">0</age>
          <category description="Implement 1" />
          <implement1name type="text" description="Name">sprayrig</implement1name>
          <implement1fuelrate type="text" description="Fuel Rate (lts/hour)">15.0</implement1fuelrate>
          <implement1workrate type="text" description="Work Rate (ha/hour)">30.0</implement1workrate>
          <implement1hoursperday type="text" description="Daily Hours (hours)">12</implement1hoursperday>
          <category description="Implement 2" />
          <implement2name type="text" description="Name">planter</implement2name>
          <implement2fuelrate type="text" description="Fuel Rate (lts/hour)">45.0</implement2fuelrate>
          <implement2workrate type="text" description="Work Rate (ha/hour)">9.5</implement2workrate>
          <implement2hoursperday type="text" description="Daily Hours (hours)">24</implement2hoursperday>
        </ui>
        <script name="init">
          <text>
lappend config(tractors) "[apsimname]"
set config(machinery,[apsimname],newPrice) "[newPrice]"
set config(machinery,[apsimname],tradeInValue) "[tradeInValue]"
set config(machinery,[apsimname],lifeOfEquipment) "[lifeOfEquipment]"
set config(machinery,[apsimname],insuranceRate) "[insuranceRate]"
set config(machinery,[apsimname],repairs) "[repairs]"
set config(machinery,[apsimname],oil) "[oil]"
set config(machinery,[apsimname],loanInterestRate) "[loanInterestRate]"
set config(machinery,[apsimname],loanDuration) "[loanDuration]"
set config(machinery,[apsimname],age) "[age]"
set config(machinery,[apsimname],[implement1name],fuelrate) "[implement1fuelrate]"
set config(machinery,[apsimname],[implement1name],workrate) "[implement1workrate]"
set config(machinery,[apsimname],[implement1name],hoursperday) "[implement1hoursperday]"
set config(machinery,[apsimname],[implement2name],fuelrate) "[implement2fuelrate]"
set config(machinery,[apsimname],[implement2name],workrate) "[implement2workrate]"
set config(machinery,[apsimname],[implement2name],hoursperday) "[implement2hoursperday]"

</text>
          <event>init</event>
        </script>
      </rule>
      <rule name="Machinery - Precision Planter">
        <ui>
          <category description="Implement" />
          <apsimname type="text" description="Apsim name">planter</apsimname>
          <newPrice type="text" description="New price ($)">20000.0</newPrice>
          <tradeInValue type="text" description="Trade In Value (% of new)">35</tradeInValue>
          <lifeOfEquipment type="text" description="Life of Equipment (hrs)">1000</lifeOfEquipment>
          <insuranceRate type="text" description="Insurance cost ($/$1000 insured)">2.3</insuranceRate>
          <repairs type="text" description="Repairs &amp; Maintenance (% of new value over lifetime)">20</repairs>
          <oil type="text" description="Oil &amp; Tyre costs (%age of fuel costs)">0</oil>
          <loanInterestRate type="text" description="Loan Interest Rate (%)">8</loanInterestRate>
          <loanDuration type="text" description="Loan Duration (years)">5</loanDuration>
          <age type="text" description="Age at start of simulation (hrs)">0</age>
        </ui>
        <script name="init">
          <text>
lappend config(implements) "[apsimname]"
set config(machinery,[apsimname],newPrice) "[newPrice]"
set config(machinery,[apsimname],tradeInValue) "[tradeInValue]"
set config(machinery,[apsimname],lifeOfEquipment) "[lifeOfEquipment]"
set config(machinery,[apsimname],insuranceRate) "[insuranceRate]"
set config(machinery,[apsimname],repairs) "[repairs]"
set config(machinery,[apsimname],oil) "[oil]"
set config(machinery,[apsimname],loanInterestRate) "[loanInterestRate]"
set config(machinery,[apsimname],loanDuration) "[loanDuration]"
set config(machinery,[apsimname],age) "[age]"

</text>
          <event>init</event>
        </script>
      </rule>
      <rule name="Machinery - Spray Rig">
        <ui>
          <category description="Implement" />
          <apsimname type="text" description="Apsim name">sprayrig</apsimname>
          <newPrice type="text" description="New price ($)">30000.0</newPrice>
          <tradeInValue type="text" description="Trade In Value (% of new)">20</tradeInValue>
          <lifeOfEquipment type="text" description="Life of Equipment (hrs)">3000</lifeOfEquipment>
          <insuranceRate type="text" description="Insurance cost ($/$1000 insured)">2.3</insuranceRate>
          <repairs type="text" description="Repairs &amp; Maintenance (% of new value over lifetime)">45</repairs>
          <oil type="text" description="Oil &amp; Tyre costs (%age of fuel costs)">0</oil>
          <loanInterestRate type="text" description="Loan Interest Rate (%)">8</loanInterestRate>
          <loanDuration type="text" description="Loan Duration (years)">5</loanDuration>
          <age type="text" description="Age at start of simulation (hrs)">0</age>
        </ui>
        <script name="init">
          <text>
lappend config(implements) "[apsimname]"
set config(machinery,[apsimname],newPrice) "[newPrice]"
set config(machinery,[apsimname],tradeInValue) "[tradeInValue]"
set config(machinery,[apsimname],lifeOfEquipment) "[lifeOfEquipment]"
set config(machinery,[apsimname],insuranceRate) "[insuranceRate]"
set config(machinery,[apsimname],repairs) "[repairs]"
set config(machinery,[apsimname],oil) "[oil]"
set config(machinery,[apsimname],loanInterestRate) "[loanInterestRate]"
set config(machinery,[apsimname],loanDuration) "[loanDuration]"
set config(machinery,[apsimname],age) "[age]"

</text>
          <event>init</event>
        </script>
      </rule>
      <rule name="Costs - Fuel">
        <ui>
          <category description="Costs" />
          <fuelcost type="text" description="Cost of fuel ($/litre net)">0.0</fuelcost>
        </ui>
        <script name="init">
          <text>
set config(machinery,fuelcost) "[fuelcost]"
          </text>
          <event>init</event>
        </script>
      </rule>
    </tclmanager>
  </folder>
  <simulation name="CQ Mixed GG">
    <clock>
      <start_date type="date" description="Enter the start date of the simulation">1/1/1980</start_date>
      <end_date type="date" description="Enter the end date of the simulation">31/12/1983</end_date>
    </clock>
    <metfile name="met" shortcut="/Grazing simulations/common stuff/met">
      <filename shortcut="/Grazing simulations/common stuff/met/filename" input="yes" />
    </metfile>
    <summaryfile />
    <tclmanager name="Farm Manager">
      <rule name="Initialisation logic">
        <script>
          <text>
set simName "CQ Mixed GG"

############ Structural - what's here and what it's connected to:
set config(paddocks)  [list "BuffelPaddock" \
                            "LeucaenaGrassPaddock" \
                            "OatsPaddock" \
                            "SorghumPaddock"  \
                            "CropPaddock1" \
                            "CropPaddock2" \
                            "CropPaddock3" \
                            "CropPaddock4" \
                            "CropPaddock5" ]
                                   

</text>
          <event>init</event>
        </script>
      </rule>
      <rule name="Crop Management Initialisation">
        <script>
          <text>
set config(cropPaddocks)    [list "CropPaddock1" \
                            "CropPaddock2" \
                            "CropPaddock3" \
                            "CropPaddock4" \
                            "CropPaddock5" ]

set config(Chickpea,alias)     "chickpea"
set config(Wheat,alias)        "wheat"
set config(Sorghum,alias)      "sorghum"

set config(crops) [list chickpea wheat ]

##########Initial states
set config(CropPaddock1,initialState)  Fallow
set config(CropPaddock2,initialState)  Fallow_1
set config(CropPaddock3,initialState)  Fallow_2
set config(CropPaddock4,initialState)  Fallow_3
set config(CropPaddock5,initialState)  Fallow_4

foreach paddock $config(cropPaddocks) {
   set config($paddock,area)          200.0
   set config($paddock,graphNames)    GrainCrops
   set config($paddock,history)       {}
   set config($paddock,daysSinceLastHarvest) 365
}

</text>
          <event>init</event>
        </script>
      </rule>
      <rule name="Pasture Management Initialisation">
        <script>
          <text>
set config(foragePaddocks)  [list "OatsPaddock" "SorghumPaddock" ]
set config(pasturePaddocks) [list "BuffelPaddock" "LeucaenaGrassPaddock" ]

set config(BuffelPaddock,area)         2000.0                         ;# 2000ha of buffel at CQ Mixed GG
set config(LeucaenaGrassPaddock,area)  600.0                          ;# area of Leucaena-Grass at CQ Mixed GG

# These paddocks are "managed" by in-paddock management rules
set config(OatsPaddock,graphNames)           {} ;# ForageOats 
set config(SorghumPaddock,graphNames)        {} ;# ForageSorghum


set config(BuffelPaddock,graphNames)         {} ;# buffel
set config(LeucaenaGrassPaddock,graphNames)  {} ;# Leucaena


# Some dummy initial values
foreach paddock [concat $config(foragePaddocks) $config(pasturePaddocks)] {
  set config($paddock,initialState)  {}
  set config($paddock,history)   {}
  set config($paddock,daysSinceLastHarvest) 365
}

</text>
          <event>init</event>
        </script>
        <script>
          <text>
apsimSendMessage "BuffelPaddock.buffel" establish {init_section establishment}
apsimSendMessage "LeucaenaGrassPaddock.leucaena" establish {init_section establishment}

</text>
          <event>start_simulation</event>
        </script>
      </rule>
      <rule name="Animal Management Initialisation">
        <script>
          <text>
############ Forage and pasture initialisation data
#  Maximum number of animals allowed in each paddock
set config(BuffelPaddock,numAnimals)         1000
set config(LeucaenaGrassPaddock,numAnimals)  200
set config(OatsPaddock,numAnimals)           300
set config(SorghumPaddock,numAnimals)        100

set config(OatsPaddock,area)           300.0                          ;# Area of Oats paddock at CQ Mixed GG
set config(SorghumPaddock,area)        100.0                          ;# Area of Forage sorghum paddock at CQ Mixed GG - 250ha

# Potential growth rates for each pasture type by season
set config(buffel,summer_lwg)  80
set config(buffel,autumn_lwg)  40
set config(buffel,winter_lwg)  10
set config(buffel,spring_lwg)  40

set config(SweetSorghum,summer_lwg)  100
set config(SweetSorghum,autumn_lwg)  60
set config(SweetSorghum,winter_lwg)  10
set config(SweetSorghum,spring_lwg)  60

set config(oats,summer_lwg)  40
set config(oats,autumn_lwg)  60
set config(oats,winter_lwg)  80
set config(oats,spring_lwg)  60

set config(leucaena,summer_lwg)  85
set config(leucaena,autumn_lwg)  85
set config(leucaena,winter_lwg)  30
set config(leucaena,spring_lwg)  30

</text>
          <event>init</event>
        </script>
        <script>
          <text>
setupAnimals 10

# Start simulation with all mobs of cattle at different growth stages in the one paddock
foreach {mob size num paddock crop} {
       mob1 250 100 BuffelPaddock buffel 
       mob2 250 100 BuffelPaddock buffel
       mob3 300 100 BuffelPaddock buffel
       mob4 300 100 BuffelPaddock buffel
       mob5 325 100 BuffelPaddock buffel
       mob6 325 100 BuffelPaddock buffel
       mob7 350 100 BuffelPaddock buffel
       mob8 350 100 BuffelPaddock buffel
       mob9 400 100 BuffelPaddock buffel
       mob10 400 100 BuffelPaddock buffel} {
     set $mob [animalsIn $num steers $size] 
     moveStockTo $mob  $paddock $crop
}
</text>
          <event>start_simulation</event>
        </script>
      </rule>
      <rule name="Farm logic" shortcut="/Grazing simulations/common stuff/Farm Manager/Farm logic" />
      <rule name="Rain Accumulator" shortcut="/Grazing simulations/common stuff/Farm Manager/Rain Accumulator" />
      <rule name="Rugplot stuff" shortcut="/Grazing simulations/common stuff/Farm Manager/Rugplot stuff" />
      <RotPlot name="Crop Rotation Management" shortcut="/Grazing simulations/common stuff/Farm Manager/Rotation Management">
        <RugPlotUI />
      </RotPlot>
      <rule name="Crop Management Routines" shortcut="/Grazing simulations/common stuff/Farm Manager/Crop Management Routines" />
      <rule name="Animal Management Routines" shortcut="/Grazing simulations/common stuff/Farm Manager/Animal Management" />
      <rule name="Weeds" shortcut="/Grazing simulations/common stuff/Farm Manager/Weeds" />
      <rule name="Event reporting" shortcut="/Grazing simulations/common stuff/Farm Manager/Event reporting old" />
      <rule name="Economic reporting" shortcut="/Grazing simulations/common stuff/Farm Manager/Economic reporting" />
      <rule name="Annual Reports" shortcut="/Grazing simulations/common stuff/Farm Manager/Annual Reports" />
    </tclmanager>
    <tclmanager name="Machinery" shortcut="/Grazing simulations/common stuff/Machinery">
      <rule name="Initialisation logic" shortcut="/Grazing simulations/common stuff/Machinery/Initialisation logic" />
      <rule name="Machinery - 250kwFWA" shortcut="/Grazing simulations/common stuff/Machinery/Machinery - 250kwFWA" />
      <rule name="Machinery - 170kwTractor" shortcut="/Grazing simulations/common stuff/Machinery/Machinery - 170kwTractor" />
      <rule name="Machinery - Precision Planter" shortcut="/Grazing simulations/common stuff/Machinery/Machinery - Precision Planter" />
      <rule name="Machinery - spray rig" shortcut="/Grazing simulations/common stuff/Machinery/Machinery - Spray Rig" />
      <rule name="Costs - Fuel" shortcut="/Grazing simulations/common stuff/Machinery/Costs - Fuel" />
    </tclmanager>
    <tclmanager name="Economics" shortcut="/Grazing simulations/common stuff/Economics" />
    <area name="BuffelPaddock">
      <Soil name="soil" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)">
        <Water shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water">
          <SoilCrop name="wheat" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/wheat" />
          <SoilCrop name="oats" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/oats" />
          <SoilCrop name="chickpea" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/chickpea" />
          <SoilCrop name="cotton" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/cotton" />
          <SoilCrop name="sorghum" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/sorghum" />
          <SoilCrop name="mungbean" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/mungbean" />
          <SoilCrop name="SweetSorghum" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/SweetSorghum" />
        </Water>
        <SoilWater shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/SoilWater" />
        <SoilOrganicMatter shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/SoilOrganicMatter" />
        <Analysis shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Analysis" />
        <Sample name="Initial Nitrogen" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Initial nitrogen" />
        <InitialWater name="Initial Water" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Initial water" />
      </Soil>
      <surfaceom name="surface organic matter">
        <PoolName type="text" description="Organic Matter pool name">wheat_stubble</PoolName>
        <type type="list" listvalues="bambatsi,barley,base_type,broccoli,camaldulensis,canola,centro,chickpea,chikenmanure_base,cm,cmA,cmB,constants,cotton,cowpea,danthonia,fababean,fieldpea,fym,gbean,globulus,goatmanure,grandis,grass,horsegram,inert,lablab,lentil,lucerne,lupin,maize,manB,manure,medic,millet,mucuna,nativepasture,navybean,oats,orobanche,peanut,pigeonpea,potato,rice,sorghum,soybean,stylo,sugar,sunflower,sweetcorn,sweetsorghum,tillage,tithonia,vetch,weed,wheat" description="Organic Matter type">wheat</type>
        <mass type="text" description="Initial surface residue (kg/ha)">1000</mass>
        <cnr type="text" description="C:N ratio of initial residue">80</cnr>
        <standing_fraction type="text" description="Fraction of residue standing">0</standing_fraction>
      </surfaceom>
      <fertiliser />
      <folder name="Manager folder">
        <manager name="Grasp Managment">
          <script name="init">
            <text>
ready_to_graze = 0</text>
            <event>init</event>
          </script>
          <script name="start_simulation">
            <text>
buffel establish init_section = establishment 
pasture_in = 1
</text>
            <event>start_simulation</event>
          </script>
          <script name="start_of_day">
            <text>
if (day = 273) then
   ready_to_graze = 1
endif</text>
            <event>start_of_day</event>
          </script>
          <script name="end_of_day">
            <text>
            </text>
            <event>end_of_day</event>
          </script>
        </manager>
      </folder>
      <tracker>
        <variable>sum of  growth on end_of_day from reported to now as TotalGrowthMonthly</variable>
        <variable>sum of rain on end_of_day from start_month to end_month as TotalRain</variable>
      </tracker>
      <grasp name="Buffel">
        <category description="Initial values at establishment" />
        <root_depth_init type="text" description="Initial depth of roots (mm)">750</root_depth_init>
        <dm_dead_leaf_init type="text" description="Initial Dead Leaf weight (kg/ha)">750</dm_dead_leaf_init>
        <dm_dead_stem_init type="text" description="Initial Dead Stem weight (kg/ha)">750</dm_dead_stem_init>
        <dm_dead_root_init type="text" description="Initial Dead Root weight (kg/ha)">100</dm_dead_root_init>
        <dm_green_leaf_init type="text" description="Initial Green Leaf weight (kg/ha)">1000</dm_green_leaf_init>
        <dm_green_stem_init type="text" description="Initial Green Stem weight (kg/ha)">1000</dm_green_stem_init>
        <dm_green_root_init type="text" description="Initial Green Root weight (kg/ha)">300</dm_green_root_init>
        <basal_area_init type="text" description="Initial Basal area of tussocks (%)">2.5</basal_area_init>
        <acc_trans_for_n_init type="text" description="Initial accumulated transpiration, used for N uptake (mm)">0</acc_trans_for_n_init>
        <acc_growth_for_n_init type="text" description="Initial accumulated growth, used for N uptake (kg/ha)">0</acc_growth_for_n_init>
        <category description="Soil Properties" />
        <max_n_avail type="text" description="Limit to total N (kg/year) (p99)">25</max_n_avail>
        <max_n_avail_dist type="text" description="Distribution of N in profile">0.8 0.1 0.05  0.05  0.0 0.0  0.0</max_n_avail_dist>
        <ll type="text" description="Lower limit (ll) of water extraction (mm/mm)">0.22 0.22 0.25 0.26 0.26 0.3 0.34</ll>
        <kl type="text" description="Rate of water extraction (kl)">0.5      0.5      0.5    0.5  0.0  0.0  0.0</kl>
        <kl2rlv type="text" description="kl2rlv">1</kl2rlv>
        <category description="Parameter values" />
        <crop_type type="text" description="crop_type">grass</crop_type>
        <uptake_source type="text" description="uptake_source">calc</uptake_source>
        <hgt_vpd_screen type="text" description="Height at which surface effects on vpd are 0 (mm) (p95)">200</hgt_vpd_screen>
        <height_1000kg type="text" description="Sward Height per tonne (p096*10, mm)">200</height_1000kg>
        <et_use_efficiency type="text" description="Evapotranspiration use efficiency used in BA calc (kg/ha/mm) (p288)">6</et_use_efficiency>
        <frac_leaf2total type="text" description="Fraction of total dm produced that goes into leaf pool (0-1) (p123)">0.5</frac_leaf2total>
        <yld_cover_slope type="text" description="Shape of exponential curve relating yield and cover">0.693147</yld_cover_slope>
        <yld_fpc50 type="text" description="yld_fpc50 (p046)">1000</yld_fpc50>
        <yld_cov50 type="text" description="Yield transpiring at 50% of pan evap (p045)">1000</yld_cov50>
        <yld_tcov50 type="text" description="Tsdm yield at which cover for runoff is 50% (p271)">1150</yld_tcov50>
        <swi_fullgreen type="text" description="Min soil water for 100% green (p009)">0.2</swi_fullgreen>
        <swi_nogrow type="text" description="SWI when growth stops (p149)">0.2</swi_nogrow>
        <pot_regrow type="text" description="Max rate regrowth from tussocks (kg/ha/unit grass ba) (p006)">5</pot_regrow>
        <te_std type="text" description="Transpiration efficiency at vpd=20mb (p007)">17</te_std>
        <rad_factor type="text" description="rad_factor">8.97</rad_factor>
        <residual_plant_N type="text" description="Always this much n in plant (p097, kg/ha)">7.5</residual_plant_N>
        <litter_n type="text" description="N conc of detached stems and roots ((p110-p111)/2)">0.3</litter_n>
        <n_uptk_per100 type="text" description="Nitrogen uptake per 100mm water (p098, kg/ha)">8</n_uptk_per100>
        <frost_start type="text" description="Minimum screen temp at which green cover=100% (oC,p125)">2</frost_start>
        <frost_kill type="text" description="Minimum screen temp at which frost kills all green (oC,p011)">0</frost_kill>
        <death_slope type="text" description="Rate of green death per soil water(p051)">0.013</death_slope>
        <death_intercept type="text" description="Background death rate (p010)">0.002</death_intercept>
        <leaf_death_ratio type="text" description="Proportion of leaf death to total death (p133)">1</leaf_death_ratio>
        <stem_death_ratio type="text" description="Proportion of stem death to total death (p134)">1</stem_death_ratio>
        <n_conc_dm_crit type="text" description="Level of plant N at which no N stress occurs (p100)">2.5</n_conc_dm_crit>
        <n_conc_dm_min type="text" description="Level of soil N at which no N stress occurs (p101)">0.68</n_conc_dm_min>
        <n_conc_dm_max type="text" description="Level of soil N at which soil N to high for growth (p102)">0.78</n_conc_dm_max>
        <stem_thresh type="text" description="stem_thresh (p124)">0</stem_thresh>
        <detach_dryseason type="text" description="detach_dryseason: root, leaf, stem (p130,131)">0.0   0.002     0.002</detach_dryseason>
        <detach_wetseason type="text" description="detach_wetseason: root, leaf, stem (p128, 129)">0.0   0.004     0.004</detach_wetseason>
        <category description="Date resets" />
        <day_start_summer type="text" description="day_start_summer">335</day_start_summer>
        <day_end_summer type="text" description="day_end_summer">59</day_end_summer>
        <acc_et_reset type="text" description="acc_et_reset">273</acc_et_reset>
        <acc_growth_reset type="text" description="acc_growth_reset">273</acc_growth_reset>
        <trans_for_n_reset type="text" description="trans_for_n_reset">273</trans_for_n_reset>
        <growth_for_n_reset type="text" description="growth_for_n_reset">273</growth_for_n_reset>
        <day_start_wet type="text" description="day_start_wet">274</day_start_wet>
        <day_start_dry type="text" description="day_start_dry">91</day_start_dry>
        <enr_a_coeff type="text" description="enr_a_coeff">7.4</enr_a_coeff>
        <enr_b_coeff type="text" description="enr_b_coeff">0.2</enr_b_coeff>
        <basal_area_option type="text" description="Dynamic Basal Area calculation (0=off,1,2=on) (p268)">2</basal_area_option>
      </grasp>
      <memo name="notes on Buffel_AVG_Parameters">parameters from buffel3sortedfile.mrx Feb2009 by JO

Average buffel for qld

Use 0.5 for kl - in GRASP GMK uses p106:
-------------------------------------
               ROOT DISTRIBUTION                                             
106      0.5  Relative supply of layer 3 cf layers 1,2. Usually 0.5

</memo>
      <erosion name="Erosion">
        <model type="text" description="Model Name">freebairn</model>
        <slope type="text" description="Slope of plot in percent (%)">6.5</slope>
        <slope_length type="text" description="Length of plot (m)">60</slope_length>
        <k_factor type="text" description="Soil erodibility factor (t/ha/EI 30 )">0.4</k_factor>
        <p_factor type="text" description="Supporting practise factor (unitless)">1</p_factor>
        <bed_depth type="text" description="Depth to bedrock (mm)">3500</bed_depth>
        <profile_reduction type="list" listvalues="off,on" description="Profile Reduction">off</profile_reduction>
        <profile_layer_merge type="text" description="Fraction of original size in which the lowest layer is merged into the layer above (0-1)">0.05</profile_layer_merge>
        <minimum_depth type="text" description="If the profile erodes to this depth, the simulation is stopped (mm)">100</minimum_depth>
      </erosion>
    </area>
    <area name="OatsPaddock">
      <Soil name="soil" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)">
        <Water shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water">
          <SoilCrop name="wheat" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/wheat" />
          <SoilCrop name="oats" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/oats" />
          <SoilCrop name="chickpea" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/chickpea" />
          <SoilCrop name="cotton" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/cotton" />
          <SoilCrop name="sorghum" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/sorghum" />
          <SoilCrop name="mungbean" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/mungbean" />
          <SoilCrop name="SweetSorghum" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/SweetSorghum" />
        </Water>
        <SoilWater shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/SoilWater" />
        <SoilOrganicMatter shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/SoilOrganicMatter" />
        <Analysis shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Analysis" />
        <Sample name="Initial Nitrogen" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Initial nitrogen" />
        <InitialWater name="Initial Water" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Initial water" />
      </Soil>
      <surfaceom name="surface organic matter">
        <PoolName type="text" description="Organic Matter pool name">wheat_stubble</PoolName>
        <type type="list" listvalues="bambatsi,barley,base_type,broccoli,camaldulensis,canola,centro,chickpea,chikenmanure_base,cm,cmA,cmB,constants,cotton,cowpea,danthonia,fababean,fieldpea,fym,gbean,globulus,goatmanure,grandis,grass,horsegram,inert,lablab,lentil,lucerne,lupin,maize,manB,manure,medic,millet,mucuna,nativepasture,navybean,oats,orobanche,peanut,pigeonpea,potato,rice,sorghum,soybean,stylo,sugar,sunflower,sweetcorn,sweetsorghum,tillage,tithonia,vetch,weed,wheat" description="Organic Matter type">wheat</type>
        <mass type="text" description="Initial surface residue (kg/ha)">1000</mass>
        <cnr type="text" description="C:N ratio of initial residue">80</cnr>
        <standing_fraction type="text" description="Fraction of residue standing">0</standing_fraction>
      </surfaceom>
      <fertiliser />
      <folder name="Manager folder">
        <manager name="Oats Sowing rule">
          <ui>
            <category description="Sowing criteria" type="category" />
            <date1 type="ddmmmdate" description="Enter sowing window START date (dd-mmm) : ">1-mar</date1>
            <date2 type="ddmmmdate" description="Enter sowing window END date (dd-mmm) : ">1-jul</date2>
            <must_sow type="yesno" description="Must sow? : ">no</must_sow>
            <raincrit type="text" description="Amount of rainfall : ">20</raincrit>
            <rainnumdays type="text" description="Number of days of rainfall : ">5</rainnumdays>
            <esw_amount type="text" description="Enter minimum allowable available soil water (mm) : ">60</esw_amount>
            <category description="Sowing parameters" type="category" />
            <crop type="crop" description="Enter name of crop to sow : ">oats</crop>
            <density type="text" description="Enter sowing density  (plants/m2) : ">100</density>
            <depth type="text" description="Enter sowing depth  (mm) : ">30</depth>
            <cultivar type="cultivars" description="Enter cultivar : ">coolibah</cultivar>
            <row_spacing type="text" description="Enter row spacing (mm) : ">250</row_spacing>
            <skiprow type="list" listvalues="solid, single, double" description="Skip row : ">solid</skiprow>
          </ui>
          <script name="start_of_day">
            <text><![CDATA[SowingOats=0
      if (paddock_is_fallow() = 1 and FallowIn <> 'yes' and (NextCrop = 0 or NextCrop = '[crop]')) then
         if (date_within('[date1], [date2]') = 1) then
            if (rain[[rainnumdays]] >= [raincrit] AND esw >= [esw_amount]) OR
                ('[must_sow]' = 'yes' AND today = date('[date2]'))) THEN
               SowingOats=1
               ChooseNextCrop = 'yes'   ! for rotations
               [crop] sow plants =[density], sowing_depth = [depth], cultivar = [cultivar], row_spacing = [row_spacing], skip = [skiprow]
                 cuts=0
            endif
            if today = date('[date2]') then
               ChooseNextCrop = 'yes'
            endif
         endif
      endif
            ]]></text>
            <event>start_of_day</event>
          </script>
          <script name="init">
            <text>
            nextcrop = 0
            fallowin = 0
            </text>
            <event>init</event>
          </script>
        </manager>
        <manager name="Sowing fertiliser">
          <ui>
            <category description="When should fertiliser be applied" type="category" />
            <modulename type="modulename" description="On which module should the event come from : ">oats</modulename>
            <eventname type="text" description="On which event should fertiliser be applied : ">sowing</eventname>
            <category description="Fertiliser application details" type="category" />
            <fertmodule type="modulename" description="Module used to apply the fertiliser : ">fertiliser</fertmodule>
            <fert_amount_sow type="text" description="Amount of starter fertiliser at sowing (kg/ha) : ">50</fert_amount_sow>
            <fert_type_sow type="list" listvalues="NO3_N, NH4_N, NH4NO3, UAN_N, urea_N, urea_no3, urea" description="Sowing fertiliser type : ">urea_N</fert_type_sow>
          </ui>
          <script name="[modulename].[eventname]">
            <text>
        [fertmodule] apply amount = [fert_amount_sow] (kg/ha), depth = 50 (mm), type = [fert_type_sow]
            </text>
            <event>[modulename].[eventname]</event>
          </script>
        </manager>
        <manager name="endcrop">
          <script name="init">
            <text>
            </text>
            <event>init</event>
          </script>
          <script name="start_of_day">
            <text>
     if oats.StageName = 'end_grain_fill' or oats.plant_status = 'dead' or day = 336 then
         oats end_crop

     'soil Nitrogen' reset
     'Surface Organic Matter' reset
       act_mods reseting
       delta_dm = 0
   endif
    
          
          </text>
            <event>start_of_day</event>
          </script>
          <script name="end_of_day">
            <text>
            </text>
            <event>end_of_day</event>
          </script>
        </manager>
      </folder>
      <oats />
      <erosion name="Erosion">
        <model type="text" description="Model Name">freebairn</model>
        <slope type="text" description="Slope of plot in percent (%)">6.5</slope>
        <slope_length type="text" description="Length of plot (m)">60</slope_length>
        <k_factor type="text" description="Soil erodibility factor (t/ha/EI 30 )">0.4</k_factor>
        <p_factor type="text" description="Supporting practise factor (unitless)">1</p_factor>
        <bed_depth type="text" description="Depth to bedrock (mm)">3500</bed_depth>
        <profile_reduction type="list" listvalues="off,on" description="Profile Reduction">off</profile_reduction>
        <profile_layer_merge type="text" description="Fraction of original size in which the lowest layer is merged into the layer above (0-1)">0.05</profile_layer_merge>
        <minimum_depth type="text" description="If the profile erodes to this depth, the simulation is stopped (mm)">100</minimum_depth>
      </erosion>
      <tracker shortcut="/Grazing simulations/common stuff/Crop Paddock/tracker" />
    </area>
    <area name="LeucaenaGrassPaddock">
      <Soil name="soil" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)">
        <Water shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water">
          <SoilCrop name="wheat" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/wheat" />
          <SoilCrop name="oats" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/oats" />
          <SoilCrop name="chickpea" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/chickpea" />
          <SoilCrop name="cotton" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/cotton" />
          <SoilCrop name="sorghum" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/sorghum" />
          <SoilCrop name="mungbean" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/mungbean" />
          <SoilCrop name="SweetSorghum" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/SweetSorghum" />
        </Water>
        <SoilWater shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/SoilWater" />
        <SoilOrganicMatter shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/SoilOrganicMatter" />
        <Analysis shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Analysis" />
        <Sample name="Initial Nitrogen" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Initial nitrogen" />
        <InitialWater name="Initial Water" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Initial water" />
      </Soil>
      <surfaceom name="surface organic matter">
        <PoolName type="text" description="Organic Matter pool name">wheat_stubble</PoolName>
        <type type="list" listvalues="bambatsi,barley,base_type,broccoli,camaldulensis,canola,centro,chickpea,chikenmanure_base,cm,cmA,cmB,constants,cotton,cowpea,danthonia,fababean,fieldpea,fym,gbean,globulus,goatmanure,grandis,grass,horsegram,inert,lablab,lentil,lucerne,lupin,maize,manB,manure,medic,millet,mucuna,nativepasture,navybean,oats,orobanche,peanut,pigeonpea,potato,rice,sorghum,soybean,stylo,sugar,sunflower,sweetcorn,sweetsorghum,tillage,tithonia,vetch,weed,wheat" description="Organic Matter type">wheat</type>
        <mass type="text" description="Initial surface residue (kg/ha)">1000</mass>
        <cnr type="text" description="C:N ratio of initial residue">80</cnr>
        <standing_fraction type="text" description="Fraction of residue standing">0</standing_fraction>
      </surfaceom>
      <fertiliser />
      <folder name="Manager folder">
        <manager name="Grasp Managment">
          <script name="init">
            <text>pasture_in = 0
ready_to_graze = 0</text>
            <event>init</event>
          </script>
          <script name="start_simulation">
            <text>
leucaena establish init_section = establishment 
pasture_in = 1
</text>
            <event>start_simulation</event>
          </script>
          <script name="start_of_day">
            <text>
if (day = 273) then
   ready_to_graze = 1
endif</text>
            <event>start_of_day</event>
          </script>
          <script name="end_of_day">
            <text>
            </text>
            <event>end_of_day</event>
          </script>
        </manager>
      </folder>
      <tracker shortcut="/Grazing simulations/common stuff/Crop Paddock/tracker" />
      <grasp name="leucaena">
        <category description="Initial values at establishment" />
        <root_depth_init type="text" description="Initial depth of roots (mm)">750</root_depth_init>
        <dm_dead_leaf_init type="text" description="Initial Dead Leaf weight (kg/ha)">750</dm_dead_leaf_init>
        <dm_dead_stem_init type="text" description="Initial Dead Stem weight (kg/ha)">750</dm_dead_stem_init>
        <dm_dead_root_init type="text" description="Initial Dead Root weight (kg/ha)">100</dm_dead_root_init>
        <dm_green_leaf_init type="text" description="Initial Green Leaf weight (kg/ha)">1000</dm_green_leaf_init>
        <dm_green_stem_init type="text" description="Initial Green Stem weight (kg/ha)">1000</dm_green_stem_init>
        <dm_green_root_init type="text" description="Initial Green Root weight (kg/ha)">300</dm_green_root_init>
        <basal_area_init type="text" description="Initial Basal area of tussocks (%)">2.5</basal_area_init>
        <acc_trans_for_n_init type="text" description="Initial accumulated transpiration, used for N uptake (mm)">0</acc_trans_for_n_init>
        <acc_growth_for_n_init type="text" description="Initial accumulated growth, used for N uptake (kg/ha)">0</acc_growth_for_n_init>
        <category description="Soil Properties" />
        <max_n_avail type="text" description="Limit to total N (kg/year) (p99)">25</max_n_avail>
        <max_n_avail_dist type="text" description="Distribution of N in profile">0.8 0.1 0.05  0.05  0.0 0.0  0.0</max_n_avail_dist>
        <ll type="text" description="Lower limit (ll) of water extraction (mm/mm)">0.22 0.22 0.25 0.26 0.26 0.3 0.34</ll>
        <kl type="text" description="Rate of water extraction (kl)">0.5      0.5      0.5    0.5  0.0  0.0  0.0</kl>
        <kl2rlv type="text" description="kl2rlv">1</kl2rlv>
        <category description="Parameter values" />
        <crop_type type="text" description="crop_type">grass</crop_type>
        <uptake_source type="text" description="uptake_source">calc</uptake_source>
        <hgt_vpd_screen type="text" description="Height at which surface effects on vpd are 0 (mm) (p95)">200</hgt_vpd_screen>
        <height_1000kg type="text" description="Sward Height per tonne (p096*10, mm)">200</height_1000kg>
        <et_use_efficiency type="text" description="Evapotranspiration use efficiency used in BA calc (kg/ha/mm) (p288)">6</et_use_efficiency>
        <frac_leaf2total type="text" description="Fraction of total dm produced that goes into leaf pool (0-1) (p123)">0.5</frac_leaf2total>
        <yld_cover_slope type="text" description="Shape of exponential curve relating yield and cover">0.693147</yld_cover_slope>
        <yld_fpc50 type="text" description="yld_fpc50 (p046)">1000</yld_fpc50>
        <yld_cov50 type="text" description="Yield transpiring at 50% of pan evap (p045)">1000</yld_cov50>
        <yld_tcov50 type="text" description="Tsdm yield at which cover for runoff is 50% (p271)">1150</yld_tcov50>
        <swi_fullgreen type="text" description="Min soil water for 100% green (p009)">0.2</swi_fullgreen>
        <swi_nogrow type="text" description="SWI when growth stops (p149)">0.2</swi_nogrow>
        <pot_regrow type="text" description="Max rate regrowth from tussocks (kg/ha/unit grass ba) (p006)">5</pot_regrow>
        <te_std type="text" description="Transpiration efficiency at vpd=20mb (p007)">17</te_std>
        <rad_factor type="text" description="rad_factor">8.97</rad_factor>
        <residual_plant_N type="text" description="Always this much n in plant (p097, kg/ha)">7.5</residual_plant_N>
        <litter_n type="text" description="N conc of detached stems and roots ((p110-p111)/2)">0.3</litter_n>
        <n_uptk_per100 type="text" description="Nitrogen uptake per 100mm water (p098, kg/ha)">8</n_uptk_per100>
        <frost_start type="text" description="Minimum screen temp at which green cover=100% (oC,p125)">2</frost_start>
        <frost_kill type="text" description="Minimum screen temp at which frost kills all green (oC,p011)">0</frost_kill>
        <death_slope type="text" description="Rate of green death per soil water(p051)">0.013</death_slope>
        <death_intercept type="text" description="Background death rate (p010)">0.002</death_intercept>
        <leaf_death_ratio type="text" description="Proportion of leaf death to total death (p133)">1</leaf_death_ratio>
        <stem_death_ratio type="text" description="Proportion of stem death to total death (p134)">1</stem_death_ratio>
        <n_conc_dm_crit type="text" description="Level of plant N at which no N stress occurs (p100)">2.5</n_conc_dm_crit>
        <n_conc_dm_min type="text" description="Level of soil N at which no N stress occurs (p101)">0.68</n_conc_dm_min>
        <n_conc_dm_max type="text" description="Level of soil N at which soil N to high for growth (p102)">0.78</n_conc_dm_max>
        <stem_thresh type="text" description="stem_thresh (p124)">0</stem_thresh>
        <detach_dryseason type="text" description="detach_dryseason: root, leaf, stem (p130,131)">0.0   0.002     0.002</detach_dryseason>
        <detach_wetseason type="text" description="detach_wetseason: root, leaf, stem (p128, 129)">0.0   0.004     0.004</detach_wetseason>
        <category description="Date resets" />
        <day_start_summer type="text" description="day_start_summer">335</day_start_summer>
        <day_end_summer type="text" description="day_end_summer">59</day_end_summer>
        <acc_et_reset type="text" description="acc_et_reset">273</acc_et_reset>
        <acc_growth_reset type="text" description="acc_growth_reset">273</acc_growth_reset>
        <trans_for_n_reset type="text" description="trans_for_n_reset">273</trans_for_n_reset>
        <growth_for_n_reset type="text" description="growth_for_n_reset">273</growth_for_n_reset>
        <day_start_wet type="text" description="day_start_wet">274</day_start_wet>
        <day_start_dry type="text" description="day_start_dry">91</day_start_dry>
        <enr_a_coeff type="text" description="enr_a_coeff">7.4</enr_a_coeff>
        <enr_b_coeff type="text" description="enr_b_coeff">0.2</enr_b_coeff>
        <basal_area_option type="text" description="Dynamic Basal Area calculation (0=off,1,2=on) (p268)">2</basal_area_option>
      </grasp>
      <memo name="notes on Leucaena">At th emoment I'm just using buffel parameters for the Leucaena paddock - to be changed later when we know what sort of yields we get off the Leucaena

At CQ Mixed GG, the pasture under the Leucaena is: silk sorghum ,green panic and buffel


</memo>
      <erosion name="Erosion">
        <model type="text" description="Model Name">freebairn</model>
        <slope type="text" description="Slope of plot in percent (%)">6.5</slope>
        <slope_length type="text" description="Length of plot (m)">60</slope_length>
        <k_factor type="text" description="Soil erodibility factor (t/ha/EI 30 )">0.4</k_factor>
        <p_factor type="text" description="Supporting practise factor (unitless)">1</p_factor>
        <bed_depth type="text" description="Depth to bedrock (mm)">3500</bed_depth>
        <profile_reduction type="list" listvalues="off,on" description="Profile Reduction">off</profile_reduction>
        <profile_layer_merge type="text" description="Fraction of original size in which the lowest layer is merged into the layer above (0-1)">0.05</profile_layer_merge>
        <minimum_depth type="text" description="If the profile erodes to this depth, the simulation is stopped (mm)">100</minimum_depth>
      </erosion>
    </area>
    <area name="SorghumPaddock">
      <Soil name="soil" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)">
        <Water shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water">
          <SoilCrop name="wheat" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/wheat" />
          <SoilCrop name="oats" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/oats" />
          <SoilCrop name="chickpea" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/chickpea" />
          <SoilCrop name="cotton" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/cotton" />
          <SoilCrop name="sorghum" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/sorghum" />
          <SoilCrop name="mungbean" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/mungbean" />
          <SoilCrop name="SweetSorghum" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Water/SweetSorghum" />
        </Water>
        <SoilWater shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/SoilWater" />
        <SoilOrganicMatter shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/SoilOrganicMatter" />
        <Analysis shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Analysis" />
        <Sample name="Initial Nitrogen" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Initial nitrogen" />
        <InitialWater name="Initial Water" shortcut="/Grazing simulations/common stuff/Grey Vertosol-Belah-Brigalow (Inglestone No093)/Initial water" />
      </Soil>
      <surfaceom name="surface organic matter">
        <PoolName type="text" description="Organic Matter pool name">wheat_stubble</PoolName>
        <type type="list" listvalues="bambatsi,barley,base_type,broccoli,camaldulensis,canola,centro,chickpea,chikenmanure_base,cm,cmA,cmB,constants,cotton,cowpea,danthonia,fababean,fieldpea,fym,gbean,globulus,goatmanure,grandis,grass,horsegram,inert,lablab,lentil,lucerne,lupin,maize,manB,manure,medic,millet,mucuna,nativepasture,navybean,oats,orobanche,peanut,pigeonpea,potato,rice,sorghum,soybean,stylo,sugar,sunflower,sweetcorn,sweetsorghum,tillage,tithonia,vetch,weed,wheat" description="Organic Matter type">wheat</type>
        <mass type="text" description="Initial surface residue (kg/ha)">1000</mass>
        <cnr type="text" description="C:N ratio of initial residue">80</cnr>
        <standing_fraction type="text" description="Fraction of residue standing">0</standing_fraction>
      </surfaceom>
      <fertiliser />
      <SweetSorghum />
      <folder name="Manager folder">
        <manager name="Sow using a variable rule">
          <ui>
            <category description="Sowing criteria" type="category" />
            <date1 type="ddmmmdate" description="Enter sowing window START date (dd-mmm) : ">1-sep</date1>
            <date2 type="ddmmmdate" description="Enter sowing window END date (dd-mmm) : ">30-dec</date2>
            <must_sow type="yesno" description="Must sow? : ">no</must_sow>
            <raincrit type="text" description="Amount of rainfall : ">20</raincrit>
            <rainnumdays type="text" description="Number of days of rainfall : ">3</rainnumdays>
            <esw_amount type="text" description="Enter minimum allowable available soil water (mm) : ">60</esw_amount>
            <category description="Sowing parameters" type="category" />
            <crop type="crop" description="Enter name of crop to sow : ">SweetSorghum</crop>
            <density type="text" description="Enter sowing density  (plants/m2) : ">20</density>
            <depth type="text" description="Enter sowing depth  (mm) : ">30</depth>
            <cultivar type="cultivars" description="Enter cultivar : ">sugargraze</cultivar>
            <class type="classes" description="Enter crop growth class : ">plant</class>
            <row_spacing type="text" description="Enter row spacing (mm) : ">500</row_spacing>
          </ui>
          <script name="start_of_day">
            <text><![CDATA[SowingSorghum=0
      if (paddock_is_fallow() = 1 and FallowIn <> 'yes' and (NextCrop = 0 or NextCrop = '[crop]')) then
         if (date_within('[date1], [date2]') = 1) then
            if (rain[[rainnumdays]] >= [raincrit] AND esw >= [esw_amount]) OR
                ('[must_sow]' = 'yes' AND today = date('[date2]'))) THEN
               ChooseNextCrop = 'yes'   ! for rotations
               SowingSorghum=1
               [crop] sow plants =[density], sowing_depth = [depth], cultivar = [cultivar], row_spacing = [row_spacing], crop_class = [class]
               num_days_grazed = 0
            endif
            if today = date('[date2]') then
               ChooseNextCrop = 'yes'
            endif
         endif
      endif
            
      num_days_grazed = num_days_grazed +1]]></text>
            <event>start_of_day</event>
          </script>
        </manager>
        <manager name="Sowing fertiliser">
          <ui>
            <category description="When should fertiliser be applied" type="category" />
            <modulename type="modulename" description="On which module should the event come from : ">SweetSorghum</modulename>
            <eventname type="text" description="On which event should fertiliser be applied : ">sowing</eventname>
            <category description="Fertiliser application details" type="category" />
            <fertmodule type="modulename" description="Module used to apply the fertiliser : ">fertiliser</fertmodule>
            <fert_amount_sow type="text" description="Amount of starter fertiliser at sowing (kg/ha) : ">50</fert_amount_sow>
            <fert_type_sow type="list" listvalues="NO3_N, NH4_N, NH4NO3, UAN_N, urea_N, urea_no3, urea" description="Sowing fertiliser type : ">urea_N</fert_type_sow>
          </ui>
          <script name="[modulename].[eventname]">
            <text>
        [fertmodule] apply amount = [fert_amount_sow] (kg/ha), depth = 50 (mm), type = [fert_type_sow]
            </text>
            <event>[modulename].[eventname]</event>
          </script>
        </manager>
        <manager name="endcrop">
          <script name="init">
            <text>
            </text>
            <event>init</event>
          </script>
          <script name="start_of_day">
            <text><![CDATA[    

   if  (plant_status = 'alive' and mint < 5.0) or plant_status = 'dead' then
          SweetSorghum end_crop

   endif
    
          
          ]]></text>
            <event>start_of_day</event>
          </script>
          <script name="end_of_day">
            <text>
            </text>
            <event>end_of_day</event>
          </script>
        </manager>
      </folder>
      <erosion name="Erosion">
        <model type="text" description="Model Name">freebairn</model>
        <slope type="text" description="Slope of plot in percent (%)">6.5</slope>
        <slope_length type="text" description="Length of plot (m)">60</slope_length>
        <k_factor type="text" description="Soil erodibility factor (t/ha/EI 30 )">0.4</k_factor>
        <p_factor type="text" description="Supporting practise factor (unitless)">1</p_factor>
        <bed_depth type="text" description="Depth to bedrock (mm)">3500</bed_depth>
        <profile_reduction type="list" listvalues="off,on" description="Profile Reduction">off</profile_reduction>
        <profile_layer_merge type="text" description="Fraction of original size in which the lowest layer is merged into the layer above (0-1)">0.05</profile_layer_merge>
        <minimum_depth type="text" description="If the profile erodes to this depth, the simulation is stopped (mm)">100</minimum_depth>
      </erosion>
      <tracker shortcut="/Grazing simulations/common stuff/Crop Paddock/tracker" />
    </area>
    <area name="CropPaddock1" shortcut="/Grazing simulations/common stuff/Crop Paddock">
      <wheat shortcut="/Grazing simulations/common stuff/Crop Paddock/wheat" />
      <chickpea shortcut="/Grazing simulations/common stuff/Crop Paddock/chickpea" />
      <surfaceom name="surface organic matter" shortcut="/Grazing simulations/common stuff/Crop Paddock/surface organic matter" />
      <fertiliser shortcut="/Grazing simulations/common stuff/Crop Paddock/fertiliser" />
      <Soil shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)">
        <Water shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/Water">
          <SoilCrop name="wheat" shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/Water/wheat" />
          <SoilCrop name="chickpea" shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/Water/chickpea" />
          <SoilCrop name="weed" shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/Water/weed" />
        </Water>
        <SoilWater shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/SoilWater" />
        <SoilOrganicMatter shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/SoilOrganicMatter" />
        <Analysis shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/Analysis" />
        <Sample name="Initial Nitrogen" shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/Initial nitrogen" />
        <InitialWater name="Initial water">
          <FractionFull>0</FractionFull>
          <PercentMethod>EvenlyDistributed</PercentMethod>
        </InitialWater>
      </Soil>
      <erosion name="Erosion" shortcut="/Grazing simulations/common stuff/Crop Paddock/Erosion" />
      <tracker shortcut="/Grazing simulations/common stuff/Crop Paddock/tracker" />
    </area>
    <area name="CropPaddock2" shortcut="/Grazing simulations/common stuff/Crop Paddock">
      <wheat shortcut="/Grazing simulations/common stuff/Crop Paddock/wheat" />
      <chickpea shortcut="/Grazing simulations/common stuff/Crop Paddock/chickpea" />
      <surfaceom name="surface organic matter" shortcut="/Grazing simulations/common stuff/Crop Paddock/surface organic matter" />
      <fertiliser shortcut="/Grazing simulations/common stuff/Crop Paddock/fertiliser" />
      <Soil shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)">
        <Water shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/Water">
          <SoilCrop name="wheat" shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/Water/wheat" />
          <SoilCrop name="chickpea" shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/Water/chickpea" />
          <SoilCrop name="weed" shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/Water/weed" />
        </Water>
        <SoilWater shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/SoilWater" />
        <SoilOrganicMatter shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/SoilOrganicMatter" />
        <Analysis shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/Analysis" />
        <Sample name="Initial Nitrogen" shortcut="/Grazing simulations/common stuff/Grey Vertosol Brigalow (Wallumbilla No100)/Initial nitrogen" />
        <InitialWater name="Initial water">
          <FractionFull>0</FractionFull>
          <PercentMethod>EvenlyDistributed</PercentMethod>
        </InitialWater>
      </Soil>
      <erosion name="Erosion" shortcut="/Grazing simulations/common stuff/Crop Paddock/Erosion" />
      <tracker shortcut="/Grazing simulations/common stuff/Crop Paddock/tracker" />
    </area>
    <area name="CropPaddock3" shortcut="/Grazing simulations/common stuff/Crop Paddock">
      <wheat shortcut="/Grazing simulations/common stuff/Crop Paddock/wheat" />
      <chickpea shortcut="/Grazing simulations/common stuff/Crop Paddock/chickpea" />
      <surfaceom name="surface organic matter" shortcut="/Grazing simulations/common stuff/Crop Paddock/surface organic matter" />
      <fertiliser shortcut="/Grazing simulations/common stuff/Crop Paddock/fertiliser" />
      <Soil shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil">
        <Water shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Water">
          <SoilCrop name="wheat" shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Water/wheat" />
          <SoilCrop name="chickpea" shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Water/chickpea" />
          <SoilCrop name="weed" shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Water/weed" />
        </Water>
        <SoilWater shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/SoilWater" />
        <SoilOrganicMatter shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/SoilOrganicMatter" />
        <Analysis shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Analysis" />
        <Sample name="Initial Nitrogen" shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Initial Nitrogen" />
        <InitialWater name="Initial Water" shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Initial water" />
      </Soil>
      <erosion name="Erosion" shortcut="/Grazing simulations/common stuff/Crop Paddock/Erosion" />
      <tracker shortcut="/Grazing simulations/common stuff/Crop Paddock/tracker" />
    </area>
    <area name="CropPaddock4" shortcut="/Grazing simulations/common stuff/Crop Paddock">
      <wheat shortcut="/Grazing simulations/common stuff/Crop Paddock/wheat" />
      <chickpea shortcut="/Grazing simulations/common stuff/Crop Paddock/chickpea" />
      <surfaceom name="surface organic matter" shortcut="/Grazing simulations/common stuff/Crop Paddock/surface organic matter" />
      <fertiliser shortcut="/Grazing simulations/common stuff/Crop Paddock/fertiliser" />
      <Soil shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil">
        <Water shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Water">
          <SoilCrop name="wheat" shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Water/wheat" />
          <SoilCrop name="chickpea" shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Water/chickpea" />
          <SoilCrop name="weed" shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Water/weed" />
        </Water>
        <SoilWater shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/SoilWater" />
        <SoilOrganicMatter shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/SoilOrganicMatter" />
        <Analysis shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Analysis" />
        <Sample name="Initial Nitrogen" shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Initial Nitrogen" />
        <InitialWater name="Initial Water" shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Initial water" />
      </Soil>
      <erosion name="Erosion" shortcut="/Grazing simulations/common stuff/Crop Paddock/Erosion" />
      <tracker shortcut="/Grazing simulations/common stuff/Crop Paddock/tracker" />
    </area>
    <area name="CropPaddock5" shortcut="/Grazing simulations/common stuff/Crop Paddock">
      <wheat shortcut="/Grazing simulations/common stuff/Crop Paddock/wheat" />
      <chickpea shortcut="/Grazing simulations/common stuff/Crop Paddock/chickpea" />
      <surfaceom name="surface organic matter" shortcut="/Grazing simulations/common stuff/Crop Paddock/surface organic matter" />
      <fertiliser shortcut="/Grazing simulations/common stuff/Crop Paddock/fertiliser" />
      <Soil shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil">
        <Water shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Water">
          <SoilCrop name="wheat" shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Water/wheat" />
          <SoilCrop name="chickpea" shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Water/chickpea" />
          <SoilCrop name="weed" shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Water/weed" />
        </Water>
        <SoilWater shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/SoilWater" />
        <SoilOrganicMatter shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/SoilOrganicMatter" />
        <Analysis shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Analysis" />
        <Sample name="Initial Nitrogen" shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Initial Nitrogen" />
        <InitialWater name="Initial Water" shortcut="/Grazing simulations/common stuff/Crop Paddock/Soil/Initial water" />
      </Soil>
      <erosion name="Erosion" shortcut="/Grazing simulations/common stuff/Crop Paddock/Erosion" />
      <tracker shortcut="/Grazing simulations/common stuff/Crop Paddock/tracker" />
    </area>
    <graz name="mob1">
      <intake_util_intercept type="text" description="Intercept in intake and utilization eqn (p142)">1.05</intake_util_intercept>
      <intake_util_slope type="text" description="Slope in intake and utilization eqn (p143)">-0.3</intake_util_slope>
      <yld_eat_restr type="text" description="Yield at which intake restriction no longer applies (p144)">50</yld_eat_restr>
      <summer_lwg type="text" description="Expected summer lwg @ low SR (p145)">70</summer_lwg>
      <autumn_lwg type="text" description="Expected autumn lwg @ low SR (p146)">25</autumn_lwg>
      <winter_lwg type="text" description="Expected winter lwg @ low SR (p147)">10</winter_lwg>
      <spring_lwg type="text" description="Expected spring lwg @ low SR (p148)">25</spring_lwg>
      <leaf_diet type="text" description="Proportion of leaf in diet (p132/100)">0.85</leaf_diet>
      <std_alw type="text" description="std_alw">200</std_alw>
      <min_alw>100</min_alw>
      <metabol_expon type="text" description="metabol_expon">0.75</metabol_expon>
      <acc_eaten_reset type="text" description="Day to reset eaten accumulator">335</acc_eaten_reset>
      <prop_can_eat type="text" description="prop_can_eat">0.75</prop_can_eat>
      <allow_supplements type="text" description="allow_supplements">1</allow_supplements>
    </graz>
    <graz name="mob2">
      <intake_util_intercept type="text" description="Intercept in intake and utilization eqn (p142)">1.05</intake_util_intercept>
      <intake_util_slope type="text" description="Slope in intake and utilization eqn (p143)">-0.3</intake_util_slope>
      <yld_eat_restr type="text" description="Yield at which intake restriction no longer applies (p144)">50</yld_eat_restr>
      <summer_lwg type="text" description="Expected summer lwg @ low SR (p145)">70</summer_lwg>
      <autumn_lwg type="text" description="Expected autumn lwg @ low SR (p146)">25</autumn_lwg>
      <winter_lwg type="text" description="Expected winter lwg @ low SR (p147)">10</winter_lwg>
      <spring_lwg type="text" description="Expected spring lwg @ low SR (p148)">25</spring_lwg>
      <leaf_diet type="text" description="Proportion of leaf in diet (p132/100)">0.85</leaf_diet>
      <std_alw type="text" description="std_alw">200</std_alw>
      <min_alw>100</min_alw>
      <metabol_expon type="text" description="metabol_expon">0.75</metabol_expon>
      <acc_eaten_reset type="text" description="Day to reset eaten accumulator">335</acc_eaten_reset>
      <prop_can_eat type="text" description="prop_can_eat">0.75</prop_can_eat>
      <allow_supplements type="text" description="allow_supplements">1</allow_supplements>
    </graz>
    <graz name="mob3">
      <intake_util_intercept type="text" description="Intercept in intake and utilization eqn (p142)">1.05</intake_util_intercept>
      <intake_util_slope type="text" description="Slope in intake and utilization eqn (p143)">-0.3</intake_util_slope>
      <yld_eat_restr type="text" description="Yield at which intake restriction no longer applies (p144)">50</yld_eat_restr>
      <summer_lwg type="text" description="Expected summer lwg @ low SR (p145)">70</summer_lwg>
      <autumn_lwg type="text" description="Expected autumn lwg @ low SR (p146)">25</autumn_lwg>
      <winter_lwg type="text" description="Expected winter lwg @ low SR (p147)">10</winter_lwg>
      <spring_lwg type="text" description="Expected spring lwg @ low SR (p148)">25</spring_lwg>
      <leaf_diet type="text" description="Proportion of leaf in diet (p132/100)">0.85</leaf_diet>
      <std_alw type="text" description="std_alw">200</std_alw>
      <min_alw>100</min_alw>
      <metabol_expon type="text" description="metabol_expon">0.75</metabol_expon>
      <acc_eaten_reset type="text" description="Day to reset eaten accumulator">335</acc_eaten_reset>
      <prop_can_eat type="text" description="prop_can_eat">0.75</prop_can_eat>
      <allow_supplements type="text" description="allow_supplements">1</allow_supplements>
    </graz>
    <graz name="mob4">
      <intake_util_intercept type="text" description="Intercept in intake and utilization eqn (p142)">1.05</intake_util_intercept>
      <intake_util_slope type="text" description="Slope in intake and utilization eqn (p143)">-0.3</intake_util_slope>
      <yld_eat_restr type="text" description="Yield at which intake restriction no longer applies (p144)">50</yld_eat_restr>
      <summer_lwg type="text" description="Expected summer lwg @ low SR (p145)">70</summer_lwg>
      <autumn_lwg type="text" description="Expected autumn lwg @ low SR (p146)">25</autumn_lwg>
      <winter_lwg type="text" description="Expected winter lwg @ low SR (p147)">10</winter_lwg>
      <spring_lwg type="text" description="Expected spring lwg @ low SR (p148)">25</spring_lwg>
      <leaf_diet type="text" description="Proportion of leaf in diet (p132/100)">0.85</leaf_diet>
      <std_alw type="text" description="std_alw">200</std_alw>
      <min_alw>100</min_alw>
      <metabol_expon type="text" description="metabol_expon">0.75</metabol_expon>
      <acc_eaten_reset type="text" description="Day to reset eaten accumulator">335</acc_eaten_reset>
      <prop_can_eat type="text" description="prop_can_eat">0.75</prop_can_eat>
      <allow_supplements type="text" description="allow_supplements">1</allow_supplements>
    </graz>
    <graz name="mob5">
      <intake_util_intercept type="text" description="Intercept in intake and utilization eqn (p142)">1.05</intake_util_intercept>
      <intake_util_slope type="text" description="Slope in intake and utilization eqn (p143)">-0.3</intake_util_slope>
      <yld_eat_restr type="text" description="Yield at which intake restriction no longer applies (p144)">50</yld_eat_restr>
      <summer_lwg type="text" description="Expected summer lwg @ low SR (p145)">70</summer_lwg>
      <autumn_lwg type="text" description="Expected autumn lwg @ low SR (p146)">25</autumn_lwg>
      <winter_lwg type="text" description="Expected winter lwg @ low SR (p147)">10</winter_lwg>
      <spring_lwg type="text" description="Expected spring lwg @ low SR (p148)">25</spring_lwg>
      <leaf_diet type="text" description="Proportion of leaf in diet (p132/100)">0.85</leaf_diet>
      <std_alw type="text" description="std_alw">200</std_alw>
      <min_alw>100</min_alw>
      <metabol_expon type="text" description="metabol_expon">0.75</metabol_expon>
      <acc_eaten_reset type="text" description="Day to reset eaten accumulator">335</acc_eaten_reset>
      <prop_can_eat type="text" description="prop_can_eat">0.75</prop_can_eat>
      <allow_supplements type="text" description="allow_supplements">1</allow_supplements>
    </graz>
    <graz name="mob6">
      <intake_util_intercept type="text" description="Intercept in intake and utilization eqn (p142)">1.05</intake_util_intercept>
      <intake_util_slope type="text" description="Slope in intake and utilization eqn (p143)">-0.3</intake_util_slope>
      <yld_eat_restr type="text" description="Yield at which intake restriction no longer applies (p144)">50</yld_eat_restr>
      <summer_lwg type="text" description="Expected summer lwg @ low SR (p145)">70</summer_lwg>
      <autumn_lwg type="text" description="Expected autumn lwg @ low SR (p146)">25</autumn_lwg>
      <winter_lwg type="text" description="Expected winter lwg @ low SR (p147)">10</winter_lwg>
      <spring_lwg type="text" description="Expected spring lwg @ low SR (p148)">25</spring_lwg>
      <leaf_diet type="text" description="Proportion of leaf in diet (p132/100)">0.85</leaf_diet>
      <std_alw type="text" description="std_alw">200</std_alw>
      <min_alw>100</min_alw>
      <metabol_expon type="text" description="metabol_expon">0.75</metabol_expon>
      <acc_eaten_reset type="text" description="Day to reset eaten accumulator">335</acc_eaten_reset>
      <prop_can_eat type="text" description="prop_can_eat">0.75</prop_can_eat>
      <allow_supplements type="text" description="allow_supplements">1</allow_supplements>
    </graz>
    <graz name="mob7">
      <intake_util_intercept type="text" description="Intercept in intake and utilization eqn (p142)">1.05</intake_util_intercept>
      <intake_util_slope type="text" description="Slope in intake and utilization eqn (p143)">-0.3</intake_util_slope>
      <yld_eat_restr type="text" description="Yield at which intake restriction no longer applies (p144)">50</yld_eat_restr>
      <summer_lwg type="text" description="Expected summer lwg @ low SR (p145)">70</summer_lwg>
      <autumn_lwg type="text" description="Expected autumn lwg @ low SR (p146)">25</autumn_lwg>
      <winter_lwg type="text" description="Expected winter lwg @ low SR (p147)">10</winter_lwg>
      <spring_lwg type="text" description="Expected spring lwg @ low SR (p148)">25</spring_lwg>
      <leaf_diet type="text" description="Proportion of leaf in diet (p132/100)">0.85</leaf_diet>
      <std_alw type="text" description="std_alw">200</std_alw>
      <min_alw>100</min_alw>
      <metabol_expon type="text" description="metabol_expon">0.75</metabol_expon>
      <acc_eaten_reset type="text" description="Day to reset eaten accumulator">335</acc_eaten_reset>
      <prop_can_eat type="text" description="prop_can_eat">0.75</prop_can_eat>
      <allow_supplements type="text" description="allow_supplements">1</allow_supplements>
    </graz>
    <graz name="mob8">
      <intake_util_intercept type="text" description="Intercept in intake and utilization eqn (p142)">1.05</intake_util_intercept>
      <intake_util_slope type="text" description="Slope in intake and utilization eqn (p143)">-0.3</intake_util_slope>
      <yld_eat_restr type="text" description="Yield at which intake restriction no longer applies (p144)">50</yld_eat_restr>
      <summer_lwg type="text" description="Expected summer lwg @ low SR (p145)">70</summer_lwg>
      <autumn_lwg type="text" description="Expected autumn lwg @ low SR (p146)">25</autumn_lwg>
      <winter_lwg type="text" description="Expected winter lwg @ low SR (p147)">10</winter_lwg>
      <spring_lwg type="text" description="Expected spring lwg @ low SR (p148)">25</spring_lwg>
      <leaf_diet type="text" description="Proportion of leaf in diet (p132/100)">0.85</leaf_diet>
      <std_alw type="text" description="std_alw">200</std_alw>
      <min_alw>100</min_alw>
      <metabol_expon type="text" description="metabol_expon">0.75</metabol_expon>
      <acc_eaten_reset type="text" description="Day to reset eaten accumulator">335</acc_eaten_reset>
      <prop_can_eat type="text" description="prop_can_eat">0.75</prop_can_eat>
      <allow_supplements type="text" description="allow_supplements">1</allow_supplements>
    </graz>
    <graz name="mob9">
      <intake_util_intercept type="text" description="Intercept in intake and utilization eqn (p142)">1.05</intake_util_intercept>
      <intake_util_slope type="text" description="Slope in intake and utilization eqn (p143)">-0.3</intake_util_slope>
      <yld_eat_restr type="text" description="Yield at which intake restriction no longer applies (p144)">50</yld_eat_restr>
      <summer_lwg type="text" description="Expected summer lwg @ low SR (p145)">70</summer_lwg>
      <autumn_lwg type="text" description="Expected autumn lwg @ low SR (p146)">25</autumn_lwg>
      <winter_lwg type="text" description="Expected winter lwg @ low SR (p147)">10</winter_lwg>
      <spring_lwg type="text" description="Expected spring lwg @ low SR (p148)">25</spring_lwg>
      <leaf_diet type="text" description="Proportion of leaf in diet (p132/100)">0.85</leaf_diet>
      <std_alw type="text" description="std_alw">200</std_alw>
      <min_alw>100</min_alw>
      <metabol_expon type="text" description="metabol_expon">0.75</metabol_expon>
      <acc_eaten_reset type="text" description="Day to reset eaten accumulator">335</acc_eaten_reset>
      <prop_can_eat type="text" description="prop_can_eat">0.75</prop_can_eat>
      <allow_supplements type="text" description="allow_supplements">1</allow_supplements>
    </graz>
    <graz name="mob10">
      <intake_util_intercept type="text" description="Intercept in intake and utilization eqn (p142)">1.05</intake_util_intercept>
      <intake_util_slope type="text" description="Slope in intake and utilization eqn (p143)">-0.3</intake_util_slope>
      <yld_eat_restr type="text" description="Yield at which intake restriction no longer applies (p144)">50</yld_eat_restr>
      <summer_lwg type="text" description="Expected summer lwg @ low SR (p145)">70</summer_lwg>
      <autumn_lwg type="text" description="Expected autumn lwg @ low SR (p146)">25</autumn_lwg>
      <winter_lwg type="text" description="Expected winter lwg @ low SR (p147)">10</winter_lwg>
      <spring_lwg type="text" description="Expected spring lwg @ low SR (p148)">25</spring_lwg>
      <leaf_diet type="text" description="Proportion of leaf in diet (p132/100)">0.85</leaf_diet>
      <std_alw type="text" description="std_alw">200</std_alw>
      <min_alw>100</min_alw>
      <metabol_expon type="text" description="metabol_expon">0.75</metabol_expon>
      <acc_eaten_reset type="text" description="Day to reset eaten accumulator">335</acc_eaten_reset>
      <prop_can_eat type="text" description="prop_can_eat">0.75</prop_can_eat>
      <allow_supplements type="text" description="allow_supplements">1</allow_supplements>
    </graz>
  </simulation>
</folder>