     ###     ######     #####   #   #     #   
    #   #    #     #   #        #   ##   ##   
   #     #   #     #   #        #   ##   ##   
   #######   ######     #####   #   # # # #   
   #     #   #              #   #   #  #  #   
   #     #   #         #####    #   #  #  #   
                                              
                                              
 The Agricultural Production Systems Simulator
             Copyright(c) APSRU               

Version                = 7.5
Title                  = CQ Mixed GG
   Component                        "clock" = %apsim%\Model\Clock.dll
   Component                          "met" = %apsim%\Model\Input.dll
   Component                 "Farm Manager" = %apsim%\Model\TclLink.dll
   Component                    "Machinery" = %apsim%\Model\TclLink.dll
   Component                    "Economics" = %apsim%\Model\TclLink.dll
   Component                         "mob1" = %apsim%\Model\Graz.dll
   Component                         "mob2" = %apsim%\Model\Graz.dll
   Component                         "mob3" = %apsim%\Model\Graz.dll
   Component                         "mob4" = %apsim%\Model\Graz.dll
   Component                         "mob5" = %apsim%\Model\Graz.dll
   Component                         "mob6" = %apsim%\Model\Graz.dll
   Component                         "mob7" = %apsim%\Model\Graz.dll
   Component                         "mob8" = %apsim%\Model\Graz.dll
   Component                         "mob9" = %apsim%\Model\Graz.dll
   Component                        "mob10" = %apsim%\Model\Graz.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component              "Grasp Managment" = %apsim%\Model\Manager.dll
   Component                   "soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "Erosion" = %apsim%\Model\Erosion.dll
   Component                "soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                       "Buffel" = %apsim%\Model\Grasp.dll
   Component                      "tracker" = %apsim%\Model\Tracker.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component             "Oats Sowing rule" = %apsim%\Model\Manager.dll
   Component            "Sowing fertiliser" = %apsim%\Model\Manager.dll
   Component                      "endcrop" = %apsim%\Model\Manager.dll
   Component                   "soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "Erosion" = %apsim%\Model\Erosion.dll
   Component                "soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                         "oats" = %apsim%\Model\Plant.dll
   Component                      "tracker" = %apsim%\Model\Tracker.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component              "Grasp Managment" = %apsim%\Model\Manager.dll
   Component                   "soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "Erosion" = %apsim%\Model\Erosion.dll
   Component                "soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                     "leucaena" = %apsim%\Model\Grasp.dll
   Component                      "tracker" = %apsim%\Model\Tracker.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component    "Sow using a variable rule" = %apsim%\Model\Manager.dll
   Component            "Sowing fertiliser" = %apsim%\Model\Manager.dll
   Component                      "endcrop" = %apsim%\Model\Manager.dll
   Component                   "soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "Erosion" = %apsim%\Model\Erosion.dll
   Component                "soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                 "SweetSorghum" = %apsim%\Model\Plant.dll
   Component                      "tracker" = %apsim%\Model\Tracker.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component                   "Soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "Erosion" = %apsim%\Model\Erosion.dll
   Component                "Soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                           "Cl" = %apsim%\Model\Solute.dll
   Component                        "wheat" = %apsim%\Model\Plant.dll
   Component                     "chickpea" = %apsim%\Model\Plant.dll
   Component                      "tracker" = %apsim%\Model\Tracker.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component                   "Soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "Erosion" = %apsim%\Model\Erosion.dll
   Component                "Soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                           "Cl" = %apsim%\Model\Solute.dll
   Component                        "wheat" = %apsim%\Model\Plant.dll
   Component                     "chickpea" = %apsim%\Model\Plant.dll
   Component                      "tracker" = %apsim%\Model\Tracker.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component                   "Soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "Erosion" = %apsim%\Model\Erosion.dll
   Component                "Soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                           "Cl" = %apsim%\Model\Solute.dll
   Component                        "wheat" = %apsim%\Model\Plant.dll
   Component                     "chickpea" = %apsim%\Model\Plant.dll
   Component                      "tracker" = %apsim%\Model\Tracker.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component                   "Soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "Erosion" = %apsim%\Model\Erosion.dll
   Component                "Soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                           "Cl" = %apsim%\Model\Solute.dll
   Component                        "wheat" = %apsim%\Model\Plant.dll
   Component                     "chickpea" = %apsim%\Model\Plant.dll
   Component                      "tracker" = %apsim%\Model\Tracker.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component                   "Soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "Erosion" = %apsim%\Model\Erosion.dll
   Component                "Soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                           "Cl" = %apsim%\Model\Solute.dll
   Component                        "wheat" = %apsim%\Model\Plant.dll
   Component                     "chickpea" = %apsim%\Model\Plant.dll
   Component                      "tracker" = %apsim%\Model\Tracker.dll

------- clock Initialisation --------------------------------------------------
     Sequencer phases:
        prepare
        init_step
        do_management
        run_one_step
        do_pasture_water
        process
        do_pasture_growth
        do_stock
        post
        end_step
     Simulation start date =  1/01/1980
     Simulation end date   = 31/12/1983
     Time step =           = 1440 (mins)

------- met Initialisation ----------------------------------------------------
     Sparse data is not allowed
     INPUT File name: %apsim%\Examples\MetFiles\Goond.met
Farm Manager: 
     Copyright (C) 1991-1994 The Regents of the University of California.
     Copyright (C) 1996-1997 Sun Microsystems, Inc.
     Copyright (C) 2001      ActiveState.
     --->Section: end_simulation

          
closeLogging

closeAnimals

set fp [open $simName.event.csv w]

puts -nonewline $fp "event,paddock,year,date,days since last event,crop,"
puts -nonewline $fp "yield (kg/ha dry),biomass (kg/ha dry),protein(%),Ep (mm),"
puts -nonewline $fp "esw (mm rel ll15),no3 (kg/ha),"
puts -nonewline $fp "incroprain,fallowrain,"
puts -nonewline $fp "soil evap (mm),runoff (mm),drainage (mm),soil loss (t/ha),surface OM (kg),cover (%),n_mineralisation"
puts -nonewline $fp "\n"

foreach line $event(lines) {
  puts $fp $line
}

close $fp

set fp [open $simName.economics.csv w]

puts -nonewline $fp "event,paddock,area,year,date,days since last event,crop,"
puts -nonewline $fp "yield (kg/ha dry),biomass (kg/ha dry),protein(%),type,amount,weight"
puts -nonewline $fp "\n"

foreach line $event(econLines) {
  puts $fp $line
}

close $fp
   
close_annual_stuff


     --->Section: end_year

do_end_year
     --->Section: init

set simName "CQ Mixed GG"

############ Structural - what's here and what it's connected to:
set config(paddocks)  [list "BuffelPaddock" \
                            "LeucaenaGrassPaddock" \
                            "OatsPaddock" \
                            "SorghumPaddock"  \
                            "CropPaddock1" \
                            "CropPaddock2" \
                            "CropPaddock3" \
                            "CropPaddock4" \
                            "CropPaddock5" ]
                                   


set config(cropPaddocks)    [list "CropPaddock1" \
                            "CropPaddock2" \
                            "CropPaddock3" \
                            "CropPaddock4" \
                            "CropPaddock5" ]

set config(Chickpea,alias)     "chickpea"
set config(Wheat,alias)        "wheat"
set config(Sorghum,alias)      "sorghum"

set config(crops) [list chickpea wheat ]

##########Initial states
set config(CropPaddock1,initialState)  Fallow
set config(CropPaddock2,initialState)  Fallow_1
set config(CropPaddock3,initialState)  Fallow_2
set config(CropPaddock4,initialState)  Fallow_3
set config(CropPaddock5,initialState)  Fallow_4

foreach paddock $config(cropPaddocks) {
   set config($paddock,area)          200.0
   set config($paddock,graphNames)    GrainCrops
   set config($paddock,history)       {}
   set config($paddock,daysSinceLastHarvest) 365
}


set config(foragePaddocks)  [list "OatsPaddock" "SorghumPaddock" ]
set config(pasturePaddocks) [list "BuffelPaddock" "LeucaenaGrassPaddock" ]

set config(BuffelPaddock,area)         2000.0                         ;# 2000ha of buffel at CQ Mixed GG
set config(LeucaenaGrassPaddock,area)  600.0                          ;# area of Leucaena-Grass at CQ Mixed GG

# These paddocks are "managed" by in-paddock management rules
set config(OatsPaddock,graphNames)           {} ;# ForageOats 
set config(SorghumPaddock,graphNames)        {} ;# ForageSorghum


set config(BuffelPaddock,graphNames)         {} ;# buffel
set config(LeucaenaGrassPaddock,graphNames)  {} ;# Leucaena


# Some dummy initial values
foreach paddock [concat $config(foragePaddocks) $config(pasturePaddocks)] {
  set config($paddock,initialState)  {}
  set config($paddock,history)   {}
  set config($paddock,daysSinceLastHarvest) 365
}


############ Forage and pasture initialisation data
#  Maximum number of animals allowed in each paddock
set config(BuffelPaddock,numAnimals)         1000
set config(LeucaenaGrassPaddock,numAnimals)  200
set config(OatsPaddock,numAnimals)           300
set config(SorghumPaddock,numAnimals)        100

set config(OatsPaddock,area)           300.0                          ;# Area of Oats paddock at CQ Mixed GG
set config(SorghumPaddock,area)        100.0                          ;# Area of Forage sorghum paddock at CQ Mixed GG - 250ha

# Potential growth rates for each pasture type by season
set config(buffel,summer_lwg)  80
set config(buffel,autumn_lwg)  40
set config(buffel,winter_lwg)  10
set config(buffel,spring_lwg)  40

set config(SweetSorghum,summer_lwg)  100
set config(SweetSorghum,autumn_lwg)  60
set config(SweetSorghum,winter_lwg)  10
set config(SweetSorghum,spring_lwg)  60

set config(oats,summer_lwg)  40
set config(oats,autumn_lwg)  60
set config(oats,winter_lwg)  80
set config(oats,spring_lwg)  60

set config(leucaena,summer_lwg)  85
set config(leucaena,autumn_lwg)  85
set config(leucaena,winter_lwg)  30
set config(leucaena,spring_lwg)  30


# Defaults for a lot of things.
# we use this table to build a list of "name/value" pairs that get fed into
# sow/fertiliser commands etc.
# ***Check the summary file for what it uses, search other files for "gatherArgs"
   set defaults(sow,sowing_depth)              30
   set defaults(fertiliser,calcMethod)         targetN
   set defaults(fertiliser,depth)              50
   set defaults(fertiliser,type)               no3_n

   set defaults(wheat,sow,cultivar)            hartog
   set defaults(wheat,sow,plants)              100       ;# plants per sq mt established
   set defaults(wheat,fertiliser,amount)       75        ;# kg n/ha

   set defaults(chickpea,sow,cultivar)         amethyst
   set defaults(chickpea,sow,plants)           30
   set defaults(chickpea,fertiliser,amount)    0

   set defaults(sow,tractor)                   'tractor1'
   set defaults(sow,implement)                 'planter'
   set defaults(spray,tractor)                 'tractor1'
   set defaults(spray,implement)               'sprayrig'  ;# this is spray rig
   set defaults(herbicide,spray,name)          "Roundup"


####################
########### Support procedures

proc max {a b} { return [expr {($a > $b) ? $a : $b}] }
proc min {a b} { return [expr {($a > $b) ? $b : $a}] }

# Return the current state of the system
proc currentState {paddock} {
   global state
   return $state($paddock)
}

# Gather arguments (eg sowing depth, fert rate etc} from defaults array
# $action: the operation (sow, fert ...
# $what: the module (wheat, sorghum ...
proc gatherArgs {action what} {
   global defaults config

   # 1. "sow,..."
   foreach {index value} [array get defaults $action,*] {
      set args([lindex [split $index ","] end]) $value
   }
   # 2. override above with any "wheat,sow,..."
   foreach {index value} [array get defaults $what,$action,*] {
      set args([lindex [split $index ","] end]) $value
   }
   # 3. override above with any "SpringWheat,sow,..."
   if {[info exists config($what,alias)]} {
      foreach {index value} [array get defaults $config($what,alias),$action,*] {
         set args([lindex [split $index ","] end]) $value
      }
   }
   return [array get args]
}

# Mash a list into name/value pairs to pass via the apsim message system
proc mash {list} {
   set result {}
   foreach {name value} $list {lappend result [list $name $value]}
   return $result
}

# Sum a list
proc lsum {list} {
   set result 0.0
   foreach value $list {set result [expr $result + $value]}
   return $result
}

# Linear interpolation
proc linint {x_coords y_coords value} {
   set y  0.0

   if {[llength $x_coords] <= 0 || [llength $y_coords] <= 0 || [llength $x_coords] != [llength $y_coords]} {
      error "bad coordinates in linear_interp_real"
   }

   for {set indx 0} {$indx < [llength $x_coords]} {incr indx} {
      if {$value <= [lindex $x_coords $indx]} {
         if {$indx == 0} {
            set y [lindex $y_coords $indx]
         } else {
            if {abs($value - [lindex $x_coords $indx]) < 1.0E-4} {
               set y [lindex $y_coords $indx]
            } else  {
               set y_part [expr [lindex $y_coords $indx] - [lindex $y_coords [expr $indx-1]] ]
               set x_part [expr [lindex $x_coords $indx] - [lindex $x_coords [expr $indx-1]] ]
               set y [expr ($y_part/$x_part) * ($value - [lindex $x_coords [expr $indx - 1]]) + [lindex $y_coords [expr $indx- 1]] ]
            }
         break;
         }
      } elseif {$indx == [lindex $x_coords $indx]-1} {
         set y  [lindex $y_coords $indx]
      } else {
         set y  0.0
      }
   }
   return $y
}
###############Utilities
proc dateWithin {t0 t1} {
   set d0 [date2day $t0]
   set d1 [date2day $t1]
   return [dayWithin $d0 $d1]
}

proc dateIs {t} {
   set d [date2day $t]
   return [dayIs $d]
}

proc dayWithin {t0 t1} {
   set t [apsimGet day]
   if {$t0 > $t1} {
      return [expr $t >= $t0 || $t <= $t1]
   } else {
      return [expr $t >= $t0 && $t <= $t1]
   }
   # notreached
}

proc dayIs {t} {
   return [expr $t == [apsimGet day]]
}

proc date2day {d} {
   set year [apsimGet year]
   return [string trimleft [clock format [clock scan "$d-$year"] -format %j] "0"]
}

# Return the fraction planted under a crop
proc areaPlanted {what} {
   global config
   set sum 0; set n 0
   foreach paddock $config(cropPaddocks) {
      set state [currentState $paddock]
      if {[info exists config($state,alias)]} {set state $config($state,alias)}
      if {"$state" == "$what"} {
        incr sum
      }
      incr n
   }
   return [expr $sum/$n.0 ]
}

proc machineryAvailable {what} {
   return [apsimGet available_$what]
}

#############################
############### The decision routine(s).
#############################
# Return the score for planting "what"
proc checkRules {thisPaddock} {
  global config

  uplevel #0 set paddock \"$thisPaddock\"
  set bestScore -1.0; set bestTarget {}; set bestArc {}; set bestGraph {}
  foreach graph $config($thisPaddock,graphNames) {
     foreach arc [$graph arcs -out [currentState $thisPaddock]] {
        set expr {}
        set target [$graph arc target $arc]
        foreach rule [$graph arc get $arc rules] {
           set value [uplevel #0 expr $rule]
           lappend expr $value
           if {$value == 0} {break} ;# no need to continue evaluating subsequent rules
        }
        if {[llength $expr] > 0} {
           set score [expr [join $expr "*"]]
           if {$score > $bestScore} {
              set bestScore  $score
              set bestTarget $target
              set bestArc    $arc
              set bestGraph  $graph
           }
        }
     }
  }   
  return [list  $bestScore $bestGraph $bestTarget $bestArc]
}

# A place holder function to monitor state transitions
proc logState {graph paddock state} {}

# Change state to another
proc changeState {paddock graph arc} {
   global state
   uplevel #0 set paddock \"$paddock\"
   foreach action [$graph arc get $arc actions] { uplevel #0 $action }
   set state($paddock) [$graph arc target $arc]
   logState $graph $paddock $state($paddock)
}

# Do daily process at top level
proc doProcess {} {
   global date config daysSinceLastHarvest
   
   set date "[apsimGet day],[apsimGet year]"

   set more 1
   while {$more} {
      set more 0
      # 1. Find out what's possible
      set bestPaddock {}; set bestScore -1.0
      foreach paddock $config(paddocks) {
         foreach {score graph target arc} [checkRules $paddock] {break}
         if {$score > $bestScore} {
            set bestPaddock $paddock; set bestScore $score; set bestGraph $graph; set bestTarget $target; set bestArc $arc
         }
      }
      if {$bestScore > 0.0} {
         changeState $bestPaddock $bestGraph $bestArc
         set more 1
      }
   }
   
   foreach paddock $config(paddocks) {
      incr daysSinceLastHarvest($paddock)
   }   
}

# pass events to various output files
proc reportEvent {from what} {
   foreach {event args} [split $what "-"] {break}
}


# The rainfall accumulator - set this list to 
#   the 10 days of rain prior to start of simulation
set rainList {0.2 1.0 0 0 0 0 15 12 0 0 0 0}

# Return the sum of the last n days rainfall
proc sumLastRain {n} {
   global rainList
   return  [expr [join [lrange $rainList end-[expr $n-1] end] "+"]]
}

# Maintain a list of rainfall amounts.
proc accumRain {} {
   global rainList
   set rainList [concat [lrange $rainList 1 end] [apsimGet rain]]
}


# Rug plotting facility

# 2 areas of interest:
# - logState - called when a graph is changing state, called just after the "actions" have been evaluated

# a logfile is used to generate the rugplots of farm activities. There are 2 parts:
# an xml of paddocks, states & times,
# a binary of decision rules on each evaluation cycle
proc log {msg} {
   #puts $msg
}

package require cdftcl
package require tdom

proc setupLogging {} {
   global simName config 

   # Find the number of graphs - 1 file for each. Delete each.
   set config(graphs) {}
   foreach paddock $config(paddocks) {
     foreach graph $config($paddock,graphNames) {
        if {[lsearch $config(graphs) $graph] < 0} {
           lappend config(graphs) $graph
        }
     }
  }
  foreach graph $config(graphs) {
    apsimWriteToSummaryFile "deleting $simName.$graph.\[xml,nc\]"
    file delete -force $simName.$graph.xml
    file delete -force $simName.$graph.nc
    foreach paddock $config(paddocks) {
       set config(history,$paddock,$graph) {}
    }
  }
  set config(states) {}
  set config(rules) {}
  set config(historyDays) {}
}

# Log a set of rule evaluations
proc logRules {paddock graph rules values } {
   global config history

   set data {}
   for {set i 0} {$i < [llength $rules]} {incr i} {
      lappend data [lindex $rules $i] [lindex $values $i]
   }

   set today [apsimGet today]

   lappend history($paddock,$graph,$today) $data

   if {[lsearch $config(historyDays) $today] < 0} {
       lappend config(historyDays) $today
       set config($today,ddmmyyyy) [apsimGet clock.dd/mm/yyyy]
   }
}

# Log a state transition
proc logState {graph paddock state} {
   global config
   set today [apsimGet today]
   lappend config(history,$paddock,$graph) $today $state
   if {[lsearch $config(states) $state] < 0} {lappend config(states) $state}
}

# Write the files. 
proc closeLogging {} {
   global config history simName

   set config(xmldoc) [dom parse [apsimGetComponentXML]]
   set config(docroot) [$config(xmldoc) documentElement]

   foreach graph $config(graphs) {
      set ncfp [ncdf create $simName.$graph.nc] 
      ncdfdim $ncfp create index [llength $config(historyDays)]
      ncdfdim $ncfp create time -1

      ncdfvar $ncfp create position long {index}
      ncdfvar $ncfp create daynum float {index}

      ncdfvar $ncfp create day     float {time}
      ncdfvar $ncfp create paddock short {time}
      ncdfvar $ncfp create rule    short {time}
      ncdfvar $ncfp create value   float {time}

      set day [lindex $config(historyDays) 0]
      ncdfatt $ncfp GLOBAL put startdate float $day
      ncdfatt $ncfp GLOBAL put startddmmyyyy char $config($day,ddmmyyyy)

      set day [lindex $config(historyDays) end]
      ncdfatt $ncfp GLOBAL put enddate float $day
      ncdfatt $ncfp GLOBAL put endddmmyyyy char $config($day,ddmmyyyy)

      ncdf enddef $ncfp
      set id 0
      foreach p $config(paddocks) {
         set pid($p) $id; incr id
      }   
	    catch {unset pos}
      set i 0
      foreach day $config(historyDays) {
         foreach paddock $config(paddocks) {
            if {[info exists history($paddock,$graph,$day)]} {
               set pos($paddock,$day) $i
               foreach data $history($paddock,$graph,$day) {
                  foreach {rule value} $data {
                     ncdfvar $ncfp put day     $i $day
                     ncdfvar $ncfp put paddock $i $pid($paddock)
                     ncdfvar $ncfp put rule    $i $rule
                     ncdfvar $ncfp put value   $i $value
                     incr i
                  } 
               }
            }
         }
      }

	    #Positions
      for {set i 0} {$i < [llength $config(historyDays)]} {incr i} {
         set day [lindex $config(historyDays) $i]
         set f 0
         foreach paddock $config(paddocks) {
            if {[info exists pos($paddock,$day)]} {
               ncdfvar $ncfp put position  $i $pos($paddock,$day)
               set f 1
               break
            } 
         }
         if {!$f} {
            ncdfvar $ncfp put position  $i -1
         }   
      }
      
      for {set j 0} {$j < [llength $config(historyDays)]} {incr j} {
         ncdfvar $ncfp put daynum $j [lindex $config(historyDays) $j]
      }   

      ncdf close $ncfp

      set fp [open $simName.$graph.xml w]
      puts $fp "<?xml version=\"1.0\" encoding=\"UTF-8\"?><simulation>"
      set id 0
      foreach paddock $config(paddocks) {
         puts $fp "<history id=\"$id\" name=\"$paddock\">"
         foreach {day state} $config(history,$paddock,$graph) {
            if {[info exists pos($paddock,$day)]} {
               puts $fp "<transition day=\"$day\" to=\"$state\" position=\"$pos($paddock,$day)\" />"
            } 
         }
         puts $fp "</history>"
         incr id
      }

      foreach paddock $config(paddocks) {
         puts $fp "<paddock id=\"$pid($paddock)\" name=\"$paddock\" />"
      }   
      set id 0
      foreach rule $config(rules) {
         set rule [string map {\< "&lt;"  \> "&gt;"     
                               \& "&amp;" \" "&quot;"  
                               \[ "&#91;" \] "&#93;"    } $rule]
         puts $fp "<rule id=\"$id\" name=\"$rule\" />"
         incr id
      }

      # Colours
      foreach node [$config(docroot) selectNodes //node] {
          set state [getValue $node "name"]
          set colour [getValue $node "fill"]
          puts $fp "<state name=\"$state\" colour=\"$colour\" />"
      }

      set day [lindex $config(historyDays) 0]
      puts $fp "<startdate ddmmyyyy=\"$config($day,ddmmyyyy)\" day=\"$day\" />"
      set day [lindex $config(historyDays) end]
      puts $fp "<enddate ddmmyyyy=\"$config($day,ddmmyyyy)\" day=\"$day\" />"

      puts $fp "</simulation>"
      close $fp
   }  
   # $config(xmldoc) delete
}

# Override the "standard" decision routine to keep track of state info
proc checkRules {thisPaddock} {
  global config 
  uplevel #0 set paddock $thisPaddock
  set bestScore -1.0; set bestTarget {}; set bestArc {}; set bestGraph {}
  foreach graph $config($thisPaddock,graphNames) {
     foreach arc [$graph arcs -out [currentState $thisPaddock]] {
        set values {}; set rules {}
        set target [$graph arc target $arc]
        if {[$graph arc keyexists $arc window]} {set inWindow [uplevel #0 expr [$graph arc get $arc window]]} else {set inWindow 0}
        foreach rule [$graph arc get $arc rules] {
           set value [uplevel #0 expr $rule]
           lappend values $value
           lappend rules [enCodeRule $target $rule]
        }
        logRules $thisPaddock $graph $rules $values
        if {[llength $values] > 0} {
           set score [expr [join $values "*"]]
           if {$score > $bestScore} {
              set bestScore  $score
              set bestTarget $target
              set bestArc    $arc
              set bestGraph  $graph
           }
        }
     }
  }   
  return [list  $bestScore $bestGraph $bestTarget $bestArc]
}

proc enCodeRule {target ruleText} {
  global config
  regsub -all "\," $ruleText "\-" ruleText

  for {set i 0} {$i < [llength $config(rules)]} {incr i} {
     set rule [lindex $config(rules) $i]
     if {[string equal $rule "$target,$ruleText"]} {
        return $i
     }
  }
  lappend config(rules) "$target,$ruleText"
  return [expr [llength $config(rules)] - 1]
}


# Get the value of an objects 'thing'
proc getValue {id thing} {
   foreach node [$id childNodes] {
      if {[string equal -nocase [$node nodeName] $thing]} {
         return [$node text]
      }
   }
   return ""
}

package require struct
::struct::graph GrainCrops
GrainCrops node insert "Chickpea"
set colour(Chickpea) "-16711872"
GrainCrops node insert "Fallow_4"
set colour(Fallow_4) "-657956"
GrainCrops node insert "Wheat_1"
set colour(Wheat_1) "-256"
GrainCrops node insert "Wheat"
set colour(Wheat) "-128"
GrainCrops node insert "Fallow"
set colour(Fallow) "-657956"
GrainCrops node insert "Fallow_1"
set colour(Fallow_1) "-657956"
GrainCrops node insert "Fallow_2"
set colour(Fallow_2) "-657956"
GrainCrops node insert "Wheat_2"
set colour(Wheat_2) "-32704"
GrainCrops node insert "Spray"
set colour(Spray) "-657956"
GrainCrops node insert "Fallow_3"
set colour(Fallow_3) "-657956"
GrainCrops node insert "Wheat_3"
set colour(Wheat_3) "-32768"
GrainCrops arc insert "Fallow_1" "Fallow_2" "arc11"
GrainCrops arc lappend "arc11" actions {set config($paddock,yr)   [apsimGet year]}
GrainCrops arc lappend "arc11" rules {[apsimGet day] == 153}
GrainCrops arc lappend "arc11" rules {[apsimGet year] > $config($paddock,yr) }
GrainCrops arc insert "Fallow_2" "Fallow_3" "arc12"
GrainCrops arc lappend "arc12" actions {set config($paddock,yr)   [apsimGet year]}
GrainCrops arc lappend "arc12" rules {[apsimGet day] == 153}
GrainCrops arc lappend "arc12" rules {[apsimGet year] > $config($paddock,yr) }
GrainCrops arc insert "Fallow_4" "Fallow" "arc13"
GrainCrops arc lappend "arc13" actions {set config($paddock,yr)   [apsimGet year]}
GrainCrops arc lappend "arc13" rules {[apsimGet day] == 153}
GrainCrops arc lappend "arc13" rules {[apsimGet year]  > $config($paddock,yr) }
GrainCrops arc insert "Fallow_3" "Fallow_4" "arc14"
GrainCrops arc lappend "arc14" actions {set config($paddock,yr)   [apsimGet year]}
GrainCrops arc lappend "arc14" rules {[apsimGet day] == 153}
GrainCrops arc lappend "arc14" rules {[apsimGet year] > $config($paddock,yr) }
GrainCrops arc insert "Chickpea" "Spray" "arc16"
GrainCrops arc lappend "arc16" actions {sprayChickpeas $paddock}
GrainCrops arc lappend "arc16" actions {set numChickSprays($paddock) 1}
GrainCrops arc lappend "arc16" rules {[set chickPeaRain($paddock) [expr $chickPeaRain($paddock) + [apsimGet rain]]] > 150}
GrainCrops arc lappend "arc16" rules {$numChickSprays($paddock) == 0}
GrainCrops arc insert "Wheat_1" "Fallow_1" "arc0"
GrainCrops arc lappend "arc0" actions {harvestAndEndCrop $paddock wheat}
GrainCrops arc lappend "arc0" rules {[canHarvestCrop $paddock wheat]}
GrainCrops arc insert "Spray" "Chickpea" "arc17"
GrainCrops arc lappend "arc17" actions {}
GrainCrops arc lappend "arc17" rules {1}
GrainCrops arc insert "Chickpea" "Fallow_4" "arc1"
GrainCrops arc lappend "arc1" actions {harvestAndEndCrop $paddock chickpea}
GrainCrops arc lappend "arc1" actions {set config($paddock,yr)   [apsimGet year]}
GrainCrops arc lappend "arc1" rules {[canHarvestCrop $paddock chickpea]}
GrainCrops arc insert "Wheat" "Fallow" "arc2"
GrainCrops arc lappend "arc2" actions {harvestAndEndCrop $paddock wheat}
GrainCrops arc lappend "arc2" rules {[canHarvestCrop $paddock wheat]}
GrainCrops arc insert "Fallow" "Wheat_1" "arc3"
GrainCrops arc lappend "arc3" actions {sowCrop $paddock wheat}
GrainCrops arc lappend "arc3" rules {[dayWithin 129 152]}
GrainCrops arc lappend "arc3" rules {[getEsw $paddock] > 183}
GrainCrops arc lappend "arc3" rules {[getMSeek2 $paddock] > 0.65}
GrainCrops arc lappend "arc3" rules {$daysSinceLastHarvest($paddock) > 30}
GrainCrops arc lappend "arc3" rules {[machineryAvailable tractor1_planter]}
GrainCrops arc lappend "arc3" rules {[areaPlanted wheat]  <=1}
GrainCrops arc lappend "arc3" rules {[getEsw $paddock]}
GrainCrops arc insert "Wheat_2" "Fallow_2" "arc4"
GrainCrops arc lappend "arc4" actions {harvestAndEndCrop $paddock wheat}
GrainCrops arc lappend "arc4" rules {[canHarvestCrop $paddock wheat]}
GrainCrops arc insert "Fallow_1" "Wheat_2" "arc5"
GrainCrops arc lappend "arc5" actions {sowCrop $paddock wheat}
GrainCrops arc lappend "arc5" rules {[dayWithin 129 152]}
GrainCrops arc lappend "arc5" rules {[getEsw $paddock] > 183}
GrainCrops arc lappend "arc5" rules {[getMSeek2 $paddock] > 0.65}
GrainCrops arc lappend "arc5" rules {$daysSinceLastHarvest($paddock) > 30}
GrainCrops arc lappend "arc5" rules {[machineryAvailable tractor1_planter]}
GrainCrops arc lappend "arc5" rules {[areaPlanted wheat]  <=1}
GrainCrops arc lappend "arc5" rules {[getEsw $paddock]}
GrainCrops arc insert "Fallow_3" "Chickpea" "arc6"
GrainCrops arc lappend "arc6" actions {sowCrop $paddock chickpea}
GrainCrops arc lappend "arc6" actions {set chickPeaRain($paddock) 0.0}
GrainCrops arc lappend "arc6" actions {set numChickSprays($paddock) 0}
GrainCrops arc lappend "arc6" rules {[dayWithin 135 151]}
GrainCrops arc lappend "arc6" rules {[getEsw $paddock] > 183                 ;# is on LL15 not crop}
GrainCrops arc lappend "arc6" rules {$daysSinceLastHarvest($paddock) >30}
GrainCrops arc lappend "arc6" rules {[areaPlanted Chickpea] <0.2}
GrainCrops arc lappend "arc6" rules {[getMSeek2 $paddock] > 0.65}
GrainCrops arc lappend "arc6" rules {[machineryAvailable tractor1_planter]}
GrainCrops arc lappend "arc6" rules {[getEsw $paddock]}
GrainCrops arc insert "Fallow_4" "Wheat" "arc7"
GrainCrops arc lappend "arc7" actions {sowCrop $paddock wheat}
GrainCrops arc lappend "arc7" rules {[dayWithin 129 152]}
GrainCrops arc lappend "arc7" rules {[getEsw $paddock] > 183}
GrainCrops arc lappend "arc7" rules {[getMSeek2 $paddock] > 0.65}
GrainCrops arc lappend "arc7" rules {$daysSinceLastHarvest($paddock) > 30}
GrainCrops arc lappend "arc7" rules {[machineryAvailable tractor1_planter]}
GrainCrops arc lappend "arc7" rules {[areaPlanted wheat]  <=1}
GrainCrops arc lappend "arc7" rules {[getEsw $paddock]}
GrainCrops arc insert "Fallow_2" "Wheat_3" "arc8"
GrainCrops arc lappend "arc8" actions {sowCrop $paddock wheat}
GrainCrops arc lappend "arc8" rules {[dayWithin 129 152]}
GrainCrops arc lappend "arc8" rules {[getEsw $paddock] > 183}
GrainCrops arc lappend "arc8" rules {[getMSeek2 $paddock] > 0.65}
GrainCrops arc lappend "arc8" rules {$daysSinceLastHarvest($paddock) > 30}
GrainCrops arc lappend "arc8" rules {[machineryAvailable tractor1_planter]}
GrainCrops arc lappend "arc8" rules {[areaPlanted wheat]  <=1}
GrainCrops arc lappend "arc8" rules {[getEsw $paddock]}
GrainCrops arc insert "Wheat_3" "Fallow_3" "arc9"
GrainCrops arc lappend "arc9" actions {harvestAndEndCrop $paddock wheat}
GrainCrops arc lappend "arc9" rules {[canHarvestCrop $paddock wheat]}
GrainCrops arc insert "Fallow" "Fallow_1" "arc10"
GrainCrops arc lappend "arc10" actions {set config($paddock,yr)   [apsimGet year]}
GrainCrops arc lappend "arc10" rules {[apsimGet day] == 153}
GrainCrops arc lappend "arc10" rules {[apsimGet year] > $config($paddock,yr) }
if {[info exists config(p1,graphNames)]} {lappend config(p1,graphNames) GrainCrops} else {set config(p1,graphNames) GrainCrops}
set config(p1,initialState) "Fallow"
if {[info exists config(p2,graphNames)]} {lappend config(p2,graphNames) GrainCrops} else {set config(p2,graphNames) GrainCrops}
set config(p2,initialState) "Fallow"
if {[info exists config(p3,graphNames)]} {lappend config(p3,graphNames) GrainCrops} else {set config(p3,graphNames) GrainCrops}
set config(p3,initialState) "Fallow"
if {[info exists config(p4,graphNames)]} {lappend config(p4,graphNames) GrainCrops} else {set config(p4,graphNames) GrainCrops}
set config(p4,initialState) "Fallow"
if {[info exists config(p5,graphNames)]} {lappend config(p5,graphNames) GrainCrops} else {set config(p5,graphNames) GrainCrops}
set config(p5,initialState) "Fallow"

#############################
# Generic sowing/harvesting procedures. These rely on a "defaults" array for crop specifics
# There are NO ECONOMICS in this - just event based reporting (sow,harvest & spray)
#############################
# Change to a new state (utility procedure). Sows crop and fertilises it
proc sowCrop {paddock crop} {
   global defaults config

   # See if this is an alias
   if {[info exists config($crop,alias)]} {
      set realCrop $config($crop,alias)
   } else {
      set realCrop $crop
   }
   array set sow [gatherArgs sow $crop]

   eval apsimSendMessage .masterpm.$paddock.$realCrop sow [mash [array get sow]]

   # machinery operation
   eval apsimSendMessage machinery operate \
                   [mash [concat [array get sow] area $config($paddock,area)  \
                   paddock $paddock costtype incrop_cost ]]

   # Work out what to do with fertiliser stuff
   array set fert [gatherArgs fertiliser $crop]
   if {$fert(calcMethod) == "constant_rate"} {
      eval apsimSendMessage .masterpm.$paddock.fertiliser apply [mash [array get fert]]
      reportEvent $paddock "fertilise-type=$fert(type),amount=$fert(amount)"
 
   } elseif {$fert(calcMethod) == "targetN"} {
      set n [apsimGet $config($paddock,nModule).no3()]
      set deficit [expr $fert(amount) - $n]
      if {$deficit > 0.0} {
         set fert(amount) $deficit
         eval apsimSendMessage .masterpm.$paddock.fertiliser apply [mash [array get fert]]
         reportEvent $paddock "fertilise-type=$fert(type),amount=$fert(amount)"

      }                                 
   } elseif {$fert(calcMethod) == "howard"} {
      set N  [apsimGet $config($paddock,nModule).no3()]      
      set sw [apsimGet esw]             
      set deficit [expr $sw - $N]
      if {$deficit > 0.0} {
         set fert(amount) $deficit
         eval apsimSendMessage $paddock.fertiliser apply [mash [array get fert]]
         reportEvent $paddock "fertilise-type=$fert(type),amount=$fert(amount)"
      }
   }

   # Finally, see if there's a helper function defined
   if {[info commands sow$realCrop] != {}} {
      extraSow$realCrop
   } elseif {[info commands sow$crop] != {}} {
      extraSow$crop
   }

   reportEvent $paddock "sow-crop=$crop"
}

# See whether an apsim crop can be harvested (utility procedure)
proc canHarvestCrop {paddock crop} {
   global config

   if {[info exists config($crop,alias)]} {set crop $config($crop,alias)}

   if {$crop == "wheat" || $crop == "sorghum" || $crop == "maize" || $crop == "chickpea" || $crop == "weed"} {
      set stageName [apsimGet $paddock.$crop.StageName]
      set plant_status [apsimGet $paddock.$crop.plant_status]
      if {$stageName == "harvest_ripe" || $plant_status == "dead"} {
         return 1
      }
      return 0
   } else {
      error "canHarvestCrop: Don't know harvest a crop called $crop"
   }
}

# Harvest and end a crop
proc harvestAndEndCrop {paddock crop} {
   global config daysSinceLastHarvest defaults

   if {[info exists config($crop,alias)]} {
      set realCrop $config($crop,alias)
   } else {
      set realCrop $crop
   }

   if {[apsimGet .masterpm.$paddock.$realCrop.plant_status] != "dead"} {
      reportEvent $paddock "harvest-crop=$crop"
   } else {
      reportEvent $paddock "fail-crop=$crop"
   }
   apsimSendMessage .masterpm.$paddock.$realCrop harvest
   apsimSendMessage .masterpm.$paddock.$realCrop end_crop
   set daysSinceLastHarvest($paddock) 0
}

proc getEsw {paddock} {
   global config
   return [apsimGetOptional $config($paddock,watBal).esw]
}

proc getMSeek2 {paddock} {
   global config

   set ll2    [lindex [apsimGet $config($paddock,watBal).ll15] 1]
   set swat2  [lindex [apsimGet $config($paddock,watBal).sw]   1]
   set dul2   [lindex [apsimGet $config($paddock,watBal).dul]  1]
   
   set mseek2 [expr (($swat2-$ll2)/($dul2-$ll2))]

   return $mseek2
}

proc sprayChickpeas {paddock} {
   apsimWriteToSummaryFile "spraying Chickpeas"
   reportEvent $paddock "spray-type=insecticide,amount=0.3"
}


###############Animal management

proc OatsAreReady {} {
   set status [apsimGetOptional ".masterpm.OatsPaddock.oats.plant_status"]
   return [string match $status "alive"]
}

proc SorghumIsReady {} {
   set status [apsimGetOptional ".masterpm.SorghumPaddock.SweetSorghum.plant_status"]
   return [string match $status "alive"]
}


# Dummy economic values
set animals(steers,price)     0.0  ;# $/kg live at gate
set animals(inCost)           0.0  ;# $/head handling cost
set animals(outCost)          0.0  ;# $/head stock handling cost at CQ Mixed GG

proc setupAnimals {nMobs} {
   global config animals simName
   catch {file delete ${simName}.livestock.csv}
   set animals(mobs) {}
   for {set mob 1} {$mob <= $nMobs} {incr mob} {
      lappend animals(mobs) "mob$mob"
      set animals(mob$mob,number) 0
      set animals(mob$mob,state) "off"
      set animals(mob$mob,paddock)  {}
      set animals(mob$mob,crop)   {}
      set animals(mob$mob,supplemented) 0
      set animals(mob$mob,id) ".masterpm.mob${mob}"
      apsimSet $animals(mob$mob,id).stocking_rate 0.0
      apsimSet $animals(mob$mob,id).alw 0.0
      apsimSet $animals(mob$mob,id).pasture_source ".masterpm.farm manager"
      apsimSet $animals(mob$mob,id).allow_supplements 0
   }
}

proc closeAnimals {} {
   global animals simName

   set fp [open "${simName}.livestock.csv" w]
   puts $fp "date,mob,number,from,to,weight"
   puts $fp [join $animals(report) "\n"]
   close $fp
}

# Bring some animals into the system
proc animalsIn { number class initialWeight } {
   global config animals

   foreach mob $animals(mobs) {
      if {$animals(${mob},state) == "off"} {break}
   } 
   if {$animals(${mob},state) != "off"} {parray animals; error "Already too many mobs to make $class"}
   
   set animals($mob,state)        on
   set animals($mob,class)        $class
   set animals($mob,alw)          $initialWeight
   set animals($mob,number)       $number
   set animals($mob,age)          0
   set animals($mob,paddock)        {}
   set animals($mob,crop)         {}
   set animals($mob,supplemented) 0
   apsimSet $animals($mob,id).allow_supplements 0

   reportEvent livestock "buy-amount=$number,type=$class,weight=$initialWeight"

   apsimSendMessage economics expenditure {paddock livestock}\
             "cost [expr $number * $initialWeight * $animals($class,price)]" \
             [list comment "purchase of $number $class at $initialWeight kg"]

   apsimSendMessage economics expenditure {paddock livestock}\
             "cost [expr $number * $animals(inCost)]" \
             [list comment "in costs of $number $class"]

   apsimWriteToSummaryFile "[apsimGet dd/mm/yyyy]: animals:In: mob $mob is class $class, weight=$initialWeight"
   # initial stocking rate isn't set until we have a paddock with an area
   return $mob
}

# Take animals out the system
proc animalsOut { mob number } {
   global animals

   if {![info exists animals($mob,state)]} {apsimWriteToSummaryFile "Trying to remove non-existent mob $mob"; return}
   
   if {$number == "all"} { set number $animals($mob,number) }

   set animals(${mob},number) [expr $animals(${mob},number) - $number]
   
   reportEvent livestock "sell-amount=$number,type=$animals($mob,class),weight=[format %.0f $animals($mob,alw)]"
   lappend animals(report) "[apsimGet dd/mm/yyyy],$mob,$number,$animals($mob,paddock).$animals($mob,crop),out,[format %.0f $animals($mob,alw)]"

   apsimSendMessage economics expenditure {paddock livestock}\
             "cost [expr $number * $animals(outCost)]" \
             [list comment "out costs of $number $animals($mob,class)"]

   apsimSendMessage economics income \
       {paddock livestock} "name $animals(${mob},class)" \
       "amount [expr $number * $animals(${mob},alw) * $animals($animals(${mob},class),price)]" \
       [list comment "sale of $number $animals(${mob},class) at $animals(${mob},alw) kg"]

   apsimWriteToSummaryFile "[apsimGet dd/mm/yyyy]: animals:Out: removing $number of mob $mob ($animals(${mob},class))  at [format %.0f $animals(${mob},alw)] kg"

   if {$animals(${mob},number) <= 0} {
      set animals(${mob},state)  off
      set animals(${mob},alw)    0.0
      set animals(${mob},age)    0
      set animals(${mob},paddock)  {}
      set animals(${mob},crop)   {}
      set animals($mob,supplemented) 0
      apsimSet $animals($mob,id).pasture_source ".masterpm.farm manager"
      apsimSet $animals($mob,id).stocking_rate  0.0
      apsimSet $animals($mob,id).alw            0.0
      apsimSet $animals($mob,id).allow_supplements 0
      apsimWriteToSummaryFile "[apsimGet dd/mm/yyyy]: animals:Out: mob $mob is gone"
   } else {
      error "Adjust stocking rate here.."
   }
}

# Keep track of alw and age
proc doPostAnimals {} {
   global animals config

   foreach mob $animals(mobs) {
      if {$animals(${mob},state) != "off"} {

          # keep track of ALW if they're on a 'fake' paddock
          if {$animals(${mob},crop) == "stubble" || $animals(${mob},crop) == "stubble"} {
             set animals($mob,alw) [expr $animals($mob,alw) + 0.9]      ;# 0.9 kg/hd/day
             
          } elseif {$animals(${mob},crop) == "feedlot"} {
             set animals($mob,alw) [expr $animals($mob,alw) + 2.0]      ;# 2.0 kg/hd/day
          } else {
             if {$animals($mob,supplemented)} {
                # Work out pot lwg and ignore feed restrictions
                set month [apsimGet month]
                set season(1) summer
                set season(2) summer
                set season(3) autumn
                set season(4) autumn
                set season(5) autumn
                set season(6) winter
                set season(7) winter
                set season(8) winter
                set season(9) spring
                set season(10) spring
                set season(11) spring
                set season(12) summer
                set lwg [expr $config($animals(${mob},crop),$season($month)_lwg) / 91.25]
                set animals($mob,alw) [expr $animals($mob,alw) + $lwg]
                apsimSet $animals($mob,id).alw $animals($mob,alw)
             } else {
               set animals($mob,alw) [apsimGet $animals($mob,id).alw]
             }  
          }
          incr animals(${mob},age)
      }
   }
}


#Move stock somewhere. 
# mob = name of the animal group
# paddock = the paddock they're going to
# crop = The name of the crop they'll eat
proc moveStockTo {mob paddock crop} {
   global config animals

   set from "$animals($mob,paddock).$animals($mob,crop)"
   if {$crop == "feedlot"} {
      apsimSet $animals($mob,id).pasture_source ".masterpm.farm manager"
   } elseif {$crop == "stubble" || $crop == "Stubble"} {
      apsimSet $animals($mob,id).pasture_source ".masterpm.farm manager"
   } else {
      apsimSet $animals($mob,id).pasture_source ".masterpm.$paddock.$crop"
      set newSr [expr $animals($mob,number) / $config($paddock,area)]

      ##?? need to convert animal equivalents here

      apsimSet $animals($mob,id).stocking_rate $newSr
      apsimSet $animals($mob,id).alw $animals($mob,alw)

      foreach season {summer_lwg winter_lwg autumn_lwg spring_lwg} {
         apsimSet $animals($mob,id).${season} $config($crop,$season)
      }
   }
   set animals($mob,paddock)  $paddock
   set animals($mob,crop)   $crop
   set animals($mob,state)  "$paddock.$crop"
   set animals($mob,age)    0
   set animals($mob,age)    0
   set animals($mob,supplemented) 0
   apsimSet $animals($mob,id).allow_supplements 0
   apsimWriteToSummaryFile "[apsimGet dd/mm/yyyy]: animals:moveStockTo mob=$mob from=$from to=$paddock.$crop wt=[format %.0f $animals($mob,alw)] sr=[format %.2f [apsimGet $animals($mob,id).stocking_rate]]"
   lappend animals(report) "[apsimGet dd/mm/yyyy],$mob,$animals($mob,number),$from,$paddock.$crop,$animals($mob,alw)"
}

# Split a mob.  
proc splitMob { mob num paddock crop } {
   global config animals

   apsimWriteToSummaryFile "[apsimGet dd/mm/yyyy]: animals:split $animals($mob,class) old =$animals($mob,number), new =[expr $animals($mob,number) - $num]"

   foreach newmob $animals(mobs) {
      if {$animals(${newmob},state) == "off"} {break}
   } 
   if {$animals(${newmob},state) != "off"} {parray animals; error "Too many mobs to split"}
   
   foreach what {state class alw number age} {
      set animals($newmob,$what) $animals($mob,$what)  
   }
   set animals($mob,number) [expr $animals($mob,number) - $num]
   if {$animals($mob,number) < 0} {parray animals; error "mob $mob has negative size"}
   moveStockTo $mob $animals($mob,paddock) $animals($mob,crop)

   set animals($newmob,number)  $num
   if {$animals($newmob,number) < 0} {parray animals; error "mob $newmob has negative size"}
   moveStockTo $newmob $paddock $crop
   return $newmob
}

proc setSupplementsOn {mob} {
   global animals
   set animals($mob,supplemented) 1
   apsimSet $animals($mob,id).allow_supplements 1
}

proc setSupplementsOff {mob} {
   global animals
   set animals($mob,supplemented) 0
   apsimSet $animals($mob,id).allow_supplements 0
}

proc animalWeight {mob} {
   global animals
   if {[info exists animals($mob,alw)]} { return $animals($mob,alw)}
   return {}
}

proc animalNumber {mob} {
   global animals
   if {[info exists animals($mob,number)]} {return $animals($mob,number)}
   return {}
}

proc animalPaddock {mob} {
   global animals
   if {[info exists animals($mob,paddock)]} {return $animals($mob,paddock)}
   return {}
}

proc animalCrop {mob} {
   global animals
   if {[info exists animals($mob,crop)]} {return $animals($mob,crop)}
   return {}
}

proc animalDaysIn {mob where} {
   global animals
   if {$animals($mob,crop) == "$where"} {
     return $animals($mob,age)
   } 
   return 0  
}

proc heaviestMob {} {
   global animals
   set w 0.0; set m {}
   foreach mob $animals(mobs) {
      if {[info exists animals($mob,alw)]} { 
          if {$animals($mob,alw) > $w} {
             set w $animals($mob,alw)
             set m $mob
          }
      }
   }
   return $m
}

proc heaviestMobNotIn {paddock} {
   global animals
   set w 0.0; set m {}
   foreach mob $animals(mobs) {
      if {[info exists animals($mob,alw)]} { 
          if {[animalPaddock $mob] != "$paddock" && $animals($mob,alw) > $w} {
             set w $animals($mob,alw)
             set m $mob
          }
      }
   }
   return $m
}

proc lightestMobIn {paddock} {
   global animals
   set w 10000.0; set m {}
   foreach mob [listAnimalsIn $paddock] {
      if {[info exists animals($mob,alw)]} { 
          if {$animals($mob,alw) < $w} {
             set w $animals($mob,alw)
             set m $mob
          }
      }
   }
   return $m
}

proc anyAnimalsIn {paddock} {
   global animals
   foreach mob $animals(mobs) {
       if {$animals($mob,paddock) == "$paddock"} {return 1} 
   }
   return 0
}

proc listAnimalsIn {paddock} {
   global animals
   set r {}
   foreach mob $animals(mobs) {
       if {$animals($mob,paddock) == "$paddock"} {lappend r $mob} 
   }
   return $r
}

proc mobsOnFarm {} {
   global animals
   set mobs {}
   foreach mob $animals(mobs) {
       if {$animals($mob,state) != "off"} {lappend mobs $mob} 
   }
   return $mobs
}

proc doSupplementCosts {} {
   global animals

   set nSupplemented 0
   foreach mob $animals(mobs) {
      if {$animals($mob,supplemented)} {
         set nSupplemented [expr $nSupplemented + $animals($mob,number)]
      }
   }

   if {$nSupplemented > 0} {
      apsimSendMessage economics expenditure {paddock livestock}\
             "cost [expr $nSupplemented * $animals(dailySupplementCost)]" \
             [list comment "supplement costs for $nSupplemented beasts"]
   }
}

proc doFeedlotCosts {} {
   global animals

   # Work out feedlot costs for today
   set nInFeedlot 0
   foreach mob $animals(mobs) {
      if {$animals($mob,paddock) == "feedlot"} {
         set nInFeedlot [expr $nInFeedlot + $animals($mob,number)]
      }
   }

   if {$nInFeedlot > 0} {
      apsimSendMessage economics expenditure {paddock livestock}\
             "cost [expr $nInFeedlot * $animals(dailyFeedlotCost)]" \
             [list comment "feedlot costs for $nInFeedlot beasts"]
   }
}


proc sellAndReplace {mob} {
   set n [animalNumber $mob]
   sell $mob
   replace $mob $n
}
    
proc sell {mob} {
   animalsOut $mob all
}

proc replace {mob n} {
   set mob [animalsIn $n steers 250]      ;# replace sold animals @ 250Kg 
   moveStockTo $mob BuffelPaddock buffel  ;# move onto buffel paddock
}

proc numAnimalsIn { paddock } {
  set n 0
  foreach mob [listAnimalsIn $paddock] {
    set n [expr $n + [animalNumber $mob]]
  }   
  return $n
}



# Some extra bits (needed to fool animals to talk to top level)
set leafgreenwt 0.0
set stemgreenwt 0.0
set leafsenescedwt 0.0
set stemsenescedwt 0.0
set dlt_dm 0.0
set source {}


# Newer version of weed germination - spray 2 weeks after a {germination event & swCrit & temp}.
proc checkWeeds {} {
   global daysSinceLastHarvest weeds  config

   foreach paddock $config(cropPaddocks) {
      if {[string match -nocase *fallow* [currentState $paddock]] && 
          $daysSinceLastHarvest($paddock) > 30} {

         if {$weeds($paddock,GermDay) == {} && [sumLastRain 4] >= 25} {
            set weeds($paddock,GermDay) [apsimGet day]
            set weeds($paddock,tt) 0.0
            apsimWriteToSummaryFile "Weeds germinating in $paddock"

         } elseif {$weeds($paddock,GermDay) != {}} {
            # Thermal time calc
            set weeds($paddock,tt) [expr $weeds($paddock,tt) + ([apsimGet maxt] + [apsimGet mint])/2.0]
         
            # Surface SW calc
            set ll [lindex [apsimGet $config($paddock,watBal).ll15] 0];
            set sw [lindex [apsimGet $config($paddock,watBal).sw] 0]
            set dul [lindex [apsimGet $config($paddock,watBal).dul] 0]
            set swf [expr (($sw-$ll)/($dul-$ll))]
         
            if {$swf < 0.5} {
               # kill off weeds
               set weeds($paddock,GermDay) {}
               apsimWriteToSummaryFile "Weeds die in $paddock"
         
            } elseif {$weeds($paddock,tt) > 250.0} {
               # Weeds are mature - spray them
               incr weeds($paddock,Events)

               eval apsimSendMessage machinery operate [mash [concat [gatherArgs spray herbicide] \
                      area $config($paddock,area)  paddock $paddock  costtype fallow_cost]]

               apsimWriteToSummaryFile "Weeds mature in $paddock - sprayed out."
            
               reportEvent $paddock "spray-type=roundup,amount=1.5"
         
               set weeds($paddock,GermDay) {}
               set weeds($paddock,tt)      0.0
            }
         }
      }   
   }
}

# An event based report file - "agronomic" style

# Write a line to the CSV report file
proc reportCSV {from evt args} {
   global config event
   foreach arg [split $args ","] {
      foreach {name value} [split $arg "="] {break}
      set info($name) $value
   }
   if {[info exists info(crop)]} {set crop $info(crop)} else {set crop ""}
   if {[info exists config($crop,alias)]} {set crop $config($crop,alias)}
   if {$crop == ""} {return}

   set line "$evt,$from,[apsimGet year],[apsimGet dd/mm/yyyy]"

   if {[info exists event($from,daysSinceEvent)]} {append line ",$event($from,daysSinceEvent)"} else {append line ","}
   set event($from,daysSinceEvent) 0
   
   append line ",$crop"
   if {$evt == "harvest"} {append line ",[apsimGetOptional .masterpm.$from.$crop.yield]"} else {append line ","}
   if {$evt == "harvest"} {append line ",[apsimGetOptional .masterpm.$from.$crop.biomass]"} else {append line ","}
   if {$evt == "harvest"} {append line ",[apsimGetOptional .masterpm.$from.$crop.grain_protein]"} else {append line ","}
   append line ",$event($from,ep)"; set event($from,ep) 0.0
   append line ",[apsimGet $config($from,watBal).esw]"
   append line ",[apsimGet $config($from,nModule).no3()]"

   if {$evt == "harvest"} {append line ",[apsimGetOptional $from.tracker.incroprain]"} else {append line ","}
   if {$evt == "sow"} {append line ",[apsimGetOptional $from.tracker.fallowrain]"} else  {append line ","}

   append line ",[apsimGet $from.tracker.es_sum]"
   append line ",[apsimGet $from.tracker.runoff_sum]"
   append line ",[apsimGet $from.tracker.drainage_sum]"
   append line ",[apsimGet $from.tracker.soil_loss_sum]"
   append line ,[apsimGet "$from.surface organic matter.surfaceom_wt"]
   append line ",[apsimGet $config($from,watBal).cover_surface_runoff]"
   append line ",[apsimGet $from.tracker.n_mineralisation_sum]"
   
   apsimSendMessage $from.tracker blork

   lappend event(lines) $line
}

rename reportEvent reportEvent_OLD
proc reportEvent [info args reportEvent_OLD] "[info body reportEvent_OLD]; reportCSV \$from \$event \$args"


# Set up an "economic event" based report file

# Write a line to the CSV report file
proc reportEcon {from evt args} {
   global config event
   foreach arg [split $args ","] {
      foreach {name value} [split $arg "="] {break}
      set info($name) $value
   }
   if {[info exists info(crop)]} {set crop $info(crop)} else {set crop ""}
   if {[info exists config($crop,alias)]} {set crop $config($crop,alias)}

   set line "$evt,$from"
   if {[info exists config($from,area)]} {append line ",$config($from,area)"} else {append line ","}
   append line ",[apsimGet year],[apsimGet dd/mm/yyyy]"

   if {[info exists event($from,daysSinceEcon)]} {append line ",$event($from,daysSinceEcon)"} else {append line ","}
   set event($from,daysSinceEcon) 0
   
   if {$crop != ""} {
     append line ",$crop"
     if {$evt == "harvest"} {append line ",[apsimGetOptional .masterpm.$from.$crop.yield]"} else {append line ","}
     if {$evt == "harvest"} {append line ",[apsimGetOptional .masterpm.$from.$crop.biomass]"} else {append line ","}
     if {$evt == "harvest"} {append line ",[apsimGetOptional .masterpm.$from.$crop.grain_protein]"} else {append line ","}
   } else {
     append line ",,,,"
   }  

   if {[info exists info(type)]} {append line ",$info(type)"} else {append line ","}
   if {[info exists info(amount)]} {append line ",$info(amount)"} else {append line ","}
   if {[info exists info(weight)]} {append line ",$info(weight)"} else {append line ","}

   lappend event(econLines) $line
}

rename reportEvent reportEvent_OLDECON
proc reportEvent [info args reportEvent_OLDECON] "[info body reportEvent_OLDECON]; reportEcon \$from \$event \$args"


# Annual summary of whole farm averages

proc open_annual_stuff {} {
   global annual config

   set year [expr [apsimGet year] - 1 ]
   set annual(years) $year
   set annual(accRain) 0.0
   set annual($year,balance) [apsimGetOptional balance] 
   foreach {accumulator} {runoff drain soil_loss es } {
     foreach paddock $config(paddocks) {
        set annual($paddock,$accumulator) 0.0
     }   
   }
}

set annual(states) {}

proc do_end_year {} {
   global config annual

   set year [apsimGet year]

   foreach {accumulator} {runoff drain soil_loss es} {
     foreach paddock $config(paddocks) {
        set annual($year,$paddock,$accumulator) $annual($paddock,$accumulator)
        set annual($paddock,$accumulator) 0.0
     }
   }

   set annual($year,accRain) $annual(accRain)
   set annual(accRain) 0.0

   set annual($year,balance) [apsimGetOptional balance]
   lappend annual(years) $year
}

proc close_annual_stuff {} {
   global simName config annual

   # Heading
   set fp [open $simName.annual.csv w]
   puts -nonewline $fp "year"
   foreach {accumulator} {runoff drain soil_loss es rain} {
      puts -nonewline $fp ",$accumulator"
   }
   foreach state $annual(states) {
      if {$state != {}} {
        puts -nonewline $fp ",$state"
      }
   }
   puts $fp ",profit"

   # Area weighted averages of environmental stuff
   set tfa 0.0
   foreach paddock $config(paddocks) {set tfa [expr $tfa + $config($paddock,area)]}

   foreach year [lrange $annual(years) 1 end] {
      puts -nonewline $fp "$year"
      foreach {accumulator} {runoff drain soil_loss es} {
         set s 0.0
         foreach paddock $config(cropPaddocks) {
            set s [expr $s + $annual($year,$paddock,$accumulator) * $config($paddock,area) / $tfa]
         }
         puts -nonewline $fp ",$s"
      }
      puts -nonewline $fp ",$annual($year,accRain)"

      # Number of "state transitions" made in each year
      foreach state $annual(states) {
         if {$state != {}} {
            if {[info exists annual($year,$state)]} {
              puts -nonewline $fp ",$annual($year,$state)"
            } else {
              puts -nonewline $fp ",0"
            }  
         }
      }

      # profit = change in bank balance each year
      catch {
         puts -nonewline $fp ",[expr $annual($year,balance) - $annual([expr $year-1],balance)]"
      }
      puts $fp ""
   }
   close $fp
   
}

# Log a state transition
proc logState {graph paddock state} {
   global config annual
   set today [apsimGet today]
   lappend config(history,$paddock,$graph) $today $state
   if {[lsearch $config(states) $state] < 0} {lappend config(states) $state}

   set day [apsimGet day]
   set year [apsimGet year]
   
   if {![info exists annual($year,$state)]} {
     set annual($year,$state) 1
   } else {
     incr annual($year,$state)
   }
   if {[lsearch $annual(states) $state] < 0} {lappend annual(states) $state}
}




     --->Section: post

doPostAnimals 
   foreach x [array names event  *,daysSinceEvent] {
      incr event($x)
   }

foreach paddock $config(cropPaddocks) {
   foreach crop $config(crops) {
      set ep [apsimGetOptional $paddock.$crop.ep]
      if {$ep != ""} {
        set event($paddock,ep) [expr $event($paddock,ep) + $ep]
      }  
   }
}
   foreach x [array names event  *,daysSinceEcon] {
      incr event($x)
   }

   
   set annual(accRain) [expr $annual(accRain) + [apsimGet rain]]
   
   foreach {accumulator} {runoff drain es } {
      foreach paddock $config(paddocks) {
         if {$paddock != "toplevel"} {
            set annual($paddock,$accumulator) [expr $annual($paddock,$accumulator) + [apsimGet $config($paddock,watBal).$accumulator]]
         }
      }   
   }
   foreach {accumulator} {soil_loss} {
      foreach paddock $config(paddocks) {
         if {$paddock != "toplevel"} {
            set annual($paddock,$accumulator) [expr $annual($paddock,$accumulator) + [apsimGet .masterpm.$paddock.erosion.$accumulator]]
         }
      }   
   }
   
     --->Section: prepare

accumRain

######## Daily Animal Management

# If there's an oats crop ready with no animals on it, put the heaviest mob there
if {[apsimGet "OatsPaddock.oats.biomass"] > 1500 &&
     [numAnimalsIn OatsPaddock] < $config(OatsPaddock,numAnimals) } { ;#if there's no animals on this paddock then
    set heaviest [heaviestMobNotIn OatsPaddock]
    if {$heaviest != {}} {
       moveStockTo $heaviest  OatsPaddock oats  ;# move onto oats paddock
    } else {apsimWriteToSummaryFile "animals: whoops! trying to move empty mob onto oats"}
}

# If the oats are flogged, move any animals there out.
if {[anyAnimalsIn OatsPaddock] &&
     [apsimGet "OatsPaddock.oats.biomass"] < 1000 } {
   foreach mob [listAnimalsIn OatsPaddock] {
      moveStockTo $mob LeucaenaGrassPaddock leucaena      ;# move
   }
}

# Same for sorghum
if {[apsimGet "SorghumPaddock.SweetSorghum.biomass"] > 2500 &&
     [numAnimalsIn SorghumPaddock] < $config(SorghumPaddock,numAnimals) } {
    set heaviest [heaviestMobNotIn SorghumPaddock]
    if {$heaviest != {}} {
       moveStockTo $heaviest  SorghumPaddock SweetSorghum
    } else {apsimWriteToSummaryFile "animals: whoops! trying to move empty mob onto sorg"}
}

if {[anyAnimalsIn SorghumPaddock] &&
    [apsimGet "SorghumPaddock.SweetSorghum.biomass"] < 1000 } {
  foreach mob [listAnimalsIn SorghumPaddock] {
     if {[numAnimalsIn LeucaenaGrassPaddock] < $config(LeucaenaGrassPaddock,numAnimals) } {
         moveStockTo $mob LeucaenaGrassPaddock leucaena      
     } else {    
         moveStockTo $mob BuffelPaddock buffel 
     }
  }    
}

# If buffel is flogged, move animals to leucaena
if {[anyAnimalsIn BuffelPaddock ] &&
     [apsimGet "BuffelPaddock.buffel.tsdm"] < 1000 &&
     [numAnimalsIn LeucaenaGrassPaddock] < $config(LeucaenaGrassPaddock,numAnimals) &&
     [apsimGet "LeucaenaGrassPaddock.leucaena.tsdm"] > 1000 } {
   apsimWriteToSummaryFile "animals: Buffel is scarce - tsdm=[apsimGet BuffelPaddock.buffel.tsdm]"
   set mob [lightestMobIn BuffelPaddock ] 
   if {$mob != {}} {
       moveStockTo $mob LeucaenaGrassPaddock leucaena   
   }
}

# Sell animals if buffel is finished
if {[anyAnimalsIn BuffelPaddock ] &&
    [apsimGet "BuffelPaddock.buffel.tsdm"] < 800 } {
   apsimWriteToSummaryFile "animals: Buffel is flogged - tsdm=[apsimGet BuffelPaddock.buffel.tsdm]"
   foreach mob [listAnimalsIn BuffelPaddock ] {
      sell $mob   
   }
}

# Sell if everything gone - nowhere left to go
if {[anyAnimalsIn LeucaenaGrassPaddock ] &&
    [apsimGet "LeucaenaGrassPaddock.leucaena.tsdm"] < 800 } {
   apsimWriteToSummaryFile "animals: Leucaena is flogged - tsdm=[apsimGet LeucaenaGrassPaddock.leucaena.tsdm]"
   foreach mob [listAnimalsIn LeucaenaGrassPaddock] {
      sell $mob
   }
}

# Replace stock if pasture becomes available
if { [llength [mobsOnFarm]] < [llength $animals(mobs)] } {
#puts "animals: Only have  [llength [mobsOnFarm]] mobs on farm"
   foreach {paddock pasture} {LeucaenaGrassPaddock leucaena BuffelPaddock buffel} {
      set n [numAnimalsIn $paddock]
#puts "there are $n animals on $paddock.$pasture, which is [apsimGet $paddock.$pasture.tsdm]kg/ha"
      if {$n <  $config($paddock,numAnimals) && [apsimGet "$paddock.$pasture.tsdm"]  > 1000} {
#puts "trying to bring 100 animals into $paddock  $pasture"
         set mob [animalsIn 100 steers 250]       ;# replace sold animals @ 250Kg 
         moveStockTo $mob $paddock $pasture
      }
   }
}

# Sell any animal > 450kg
foreach mob $animals(mobs) {
   if { [animalWeight $mob] > 450 } {    
      sellAndReplace $mob
   }
}

     --->Section: process

# Housekeeping
if {[catch {doProcess } msg]} {
   puts "$errorInfo"
   error "$msg\n$errorInfo"
}


checkWeeds
     --->Section: start_simulation

apsimSendMessage ".masterpm.BuffelPaddock.buffel" establish {init_section establishment}
apsimSendMessage ".masterpm.LeucaenaGrassPaddock.leucaena" establish {init_section establishment}


setupAnimals 10

# Start simulation with all mobs of cattle at different growth stages in the one paddock
foreach {mob size num paddock crop} {
       mob1 250 100 BuffelPaddock buffel 
       mob2 250 100 BuffelPaddock buffel
       mob3 300 100 BuffelPaddock buffel
       mob4 300 100 BuffelPaddock buffel
       mob5 325 100 BuffelPaddock buffel
       mob6 325 100 BuffelPaddock buffel
       mob7 350 100 BuffelPaddock buffel
       mob8 350 100 BuffelPaddock buffel
       mob9 400 100 BuffelPaddock buffel
       mob10 400 100 BuffelPaddock buffel} {
     set $mob [animalsIn $num steers $size] 
     moveStockTo $mob  $paddock $crop
}

foreach paddock $config(paddocks) {
  set state($paddock)         $config($paddock,initialState) ;# Should get this from xml
  set history($paddock)       $config($paddock,history)
  set daysSinceLastHarvest($paddock) 60
}

# All our sols are called "Soil.." 
foreach paddock $config(paddocks) {
   set config($paddock,watBal)   ".masterpm.$paddock.Soil Water"
   set config($paddock,nModule)  ".masterpm.$paddock.Soil Nitrogen"
}



setupLogging

foreach paddock $config(paddocks) {
   logState stateGraph $paddock [currentState $paddock]
}

foreach paddock $config(cropPaddocks) {
#   set config($paddock,pawc)        [calcPAWC $paddock]
   set config($paddock,yr)   [apsimGet year]
}


foreach paddock $config(cropPaddocks) {
   set weeds($paddock,GermDay) {}
   set weeds($paddock,Events)  0
}
catch {file delete $simName.event.csv}

set event(lines) {}

foreach paddock $config(paddocks) {
  apsimSendMessage $paddock.tracker blork
  set event($paddock,daysSinceEvent) 0
  set event($paddock,ep) 0.0
}
catch {file delete $simName.economics.csv}

set event(econLines) {}

foreach paddock $config(paddocks) {
  set event($paddock,daysSinceEcon) 0
}
catch {file delete $simName.annual.csv}

open_annual_stuff


     --->End
Machinery: 
     --->Section: init

# Apsim Machinery (sub)Module
# Contains Tractors, Implements & Labour.

# Operations: 
# bool available(<config>)    ; See if a configuration can be used today (read)
# operate <config> <area>     ; Operate a configuration over an area until finished (event)

########################## Apsim interface code here
source $apsuite/Model/TclLink/CIDataTypes.tcl

# A trace handler for status. This handler is called whenever another module 
# asks us whether machinery is available.
#    NB. Careful! Errors in trace routines are not caught!!!
proc machinery:maProc {name1 name2 op} {
   if {$op == "read" } {
      global config $name1
      foreach {junk tractor implement} [split $name1 "_"] { break }

      # Check they are known to us
      if {[lsearch $config(tractors) $tractor] < 0} {
         set msg "tractor \"$tractor\" is unknown - I only know about $config(tractors)"
         error $msg
      }
      if {[lsearch $config(implements) $implement] < 0} {
         set msg "implement \"$implement\" is unknown - I only know about $config(implements)"
         error $msg
      }
      
      # Now see if they are busy
      set avail 1
      catch {
         global machinery:jobs
         foreach job ${machinery:jobs} {
            foreach {tid iid area paddock costtype} [split $job ","] {break}
            if {"$tractor" == "$tid" || "$implement" == "$iid"} {set avail 0}
         }
      } msg
      if {$msg != ""} {apsimWriteToSummaryFile $msg; error $msg}
           
      # Set the variable - this is what is returned to apsim.
      set $name1 $avail
   }  
}

# An event handler. 
proc machinery:operateHandler {args} {
  global incomingVariant
  foreach {name value} [unpack_Variant $incomingVariant] {
     regsub -all "'" $name {} name
     regsub -all "'" $value {} value
     set [string tolower $name] [string tolower $value]
  }
  if {![info exists tractor] || ![info exists implement] || ![info exists area]} {
     error "Must specify a tractor, implement, and area to operate over."
  }
  if { ![info exists paddock] } {set paddock {}}
  if { ![info exists costtype] } {set costtype unknown}
  machinery:operate $tractor $implement $area $paddock $costtype
}

# Now register the event handlers. 
apsimSubscribeVariant operate            "machinery:operateHandler"
apsimSubscribeNull process            "machinery:process"
apsimSubscribeNull end_financial_year "machinery:end_year"
########################## End apsim interface code

########################## Machinery configuration code
# Read in our configuration
proc machinery:initialise {} {
   global config
   if {![info exists config(tractors)]} {set config(tractors) {}}
   if {![info exists config(implements)]} {set config(implements) {}}
} 


# return the work rate for this combo can cover per hour
proc getCombo {tractor implement thing} {
   global config
   if {![info exists config(machinery,$tractor,$implement,$thing)]} {
      error "No $thing specified for $tractor and $implement"
   }
   return $config(machinery,$tractor,$implement,$thing)
}

proc getRate {tid iid} {
   return [getCombo $tid $iid fuelrate]
}

proc getValue {id thing} {
   global config
   if {![info exists config(machinery,$id,$thing)]} {
      error "No $thing for $id specified (get)"
   }
   return $config(machinery,$id,$thing)
}

# Return the cost of fuel per liter
proc fuelCost {} {
   global config
   if {![info exists config(machinery,fuelcost)]} {
      error "No fuelcost specified"
   }
   return $config(machinery,fuelcost)
}

# return the fuel cost this combo uses per hour 
proc getFuelCost {tid iid} {
   return [expr [getCombo $tid $iid fuelrate] * [fuelCost]]
}

# Return the number of hours worked per day
proc getHoursPerDay {tid iid} {
   return [getCombo $tid $iid hoursperday]
}

proc setValue {id thing value} {
   global config
   if {![info exists config(machinery,$id,$thing)]} {
      error "No $thing for $id specified (set)"
   }
   set config(machinery,$id,$thing) $value
}

##############
# Operate a configuration over an area. Just add it to the job queue 
# and let process look after it.
proc machinery:operate {tractor implement area paddock costtype} {
   if {![string is double -strict $area]} {
      error "Area should be a number (not $area)"
   }
   global machinery:jobs
   lappend machinery:jobs $tractor,$implement,$area,$paddock,$costtype
   apsimWriteToSummaryFile "Machinery job \"$tractor + $implement\" is queued"
}

# The daily process routine. Manages the job queue
proc machinery:process {} {
   global machinery:jobs
   set tomorrowsJobs {}
   # Go through each job. If an item is in use in any prior job, we can't do it today. 
   for {set ijob 0} {$ijob < [llength ${machinery:jobs}]} {incr ijob} {
      set job [lindex ${machinery:jobs} $ijob]
      foreach {tid iid area paddock costtype} [split $job ","] {break}
      set inuse 0
      for {set j 0} {$j < $ijob} {incr j} {
         foreach {Ttid Tiid Tarea Tpaddock Tcosttype} [split [lindex ${machinery:jobs} $j] ","] {break}
         if {$tid == $Ttid || $iid == $Tiid} {set inuse 1}
      }
      if {!$inuse} {
        # The job is running today. Work out how many hours, and then the costs
        set maxHours [getHoursPerDay $tid $iid]
        set rate [getRate $tid $iid]

        if {$maxHours * $rate <= $area} {
           set hours $maxHours
           set areaToday [expr $maxHours * $rate]
        } else {   
           set hours [expr $area / $rate]
           set areaToday [expr $hours * $rate]
        }   
        #apsimWriteToSummaryFile "hours='$hours', rate='$rate',cost='[getFuelCost $tid $iid]',oil='[getValue $tid oil]',paddock='$paddock',costtype=$costtype"
        set cost [expr $hours * [getFuelCost $tid $iid] * (1.0 + [getValue $tid oil]/100.0)]
        apsimSendMessage "" expenditure [list cost $cost] [list comment "fuel & oil costs of $tid + $iid"] [list paddock $paddock] [list area $areaToday] [list $costtype {}]

        set cost [expr $hours * [getValue $tid newPrice] * ([getValue $tid repairs]/100.0)/ [getValue $tid lifeOfEquipment]] 
        apsimSendMessage "" expenditure [list cost $cost] [list comment "Repairs & maintenance of $tid"] [list paddock $paddock] [list area $areaToday] [list $costtype {}]

        set cost [expr $hours * [getValue $iid newPrice] * ([getValue $iid repairs]/100.0)/ [getValue $iid lifeOfEquipment]] 
        apsimSendMessage "" expenditure [list cost $cost] [list comment "Repairs & maintenance of $iid"] [list paddock $paddock] [list area $areaToday] [list $costtype {}]

        set rate [expr $hours * [getRate $tid $iid]]
        set area [expr $area - $rate]
        setValue $tid age [expr $hours + [getValue $tid age]]
        setValue $iid age [expr $hours + [getValue $iid age]]

        if {$area > 0} {
           lappend tomorrowsJobs $tid,$iid,$area,$paddock,$costtype
        } else {
           apsimWriteToSummaryFile "Machinery job '$tid + $iid' in $paddock has finished"
        }
      } else {
        lappend tomorrowsJobs $job
      } 
   }
   set machinery:jobs $tomorrowsJobs
}

# The "end_year" routine. Do loan payments and replacement
proc machinery:end_year {} {
   foreach id [concat $config(tractors) $config(implements)] {
     if {$config(machinery,$id,loanInterestRate) > 0.0} {
        if {$config(machinery,$id,loanDuration] > 0} {
           if {$config(machinery,$id,age) >= $config(machinery,$id,lifeOfEquipment)} {
              set newPrice $config(machniery,$id,newPrice)
              set salvage [expr $config(machinery,$id,tradeInValue)/100.0 * $newPrice]
              set loanValue [expr $newPrice - $salvage]
              apsimWriteToSummaryFile "Establishing new loan of \$$loanValue for $id (new price \$$newPrice, salvage \$$salvage)"
              set config(machinery,$id,loanValue) $loanValue
              set config(machinery,$id,age) 0
              set config(machinery,$id,loanPeriod) 1
           } else {
              if {config(machinery,$id,loanPeriod) <=  $config(machinery,$id,loanDuration)} {
                 #A = P(i(1+i)^n)/((1+i)^n - 1)
                 set P $config(machinery,$id,newPrice) 
                 set i [expr $config(machinery,$id,loanInterestRate)/100.0]
                 set n $config(machinery,$id,loanDuration)
                 set A [expr $P * ($i*pow(1+$i,$n))/(pow(1.0+$i,$n) - 1.0) ]
                 apsimSendMessage "" expenditure [list cost $A] [list interest_paid $A] [list comment "Loan repayments for $id"]
                 
                 set config(machinery,$id,loanPeriod) [expr 1 + $config(machinery,$id,loanPeriod)]
                 if { $config(machinery,$id,loanPeriod) >  $config(machinery,$id,loanDuration) } {
                     apsimWriteToSummaryFile "Loan for $id is finished"
                 }
              }
              
           }
        }
     }    
   }  
}

lappend config(tractors) "tractor1"
set config(machinery,tractor1,newPrice) "160000.0"
set config(machinery,tractor1,tradeInValue) "45"
set config(machinery,tractor1,lifeOfEquipment) "5000"
set config(machinery,tractor1,insuranceRate) "6.2"
set config(machinery,tractor1,repairs) "15"
set config(machinery,tractor1,oil) "15"
set config(machinery,tractor1,loanInterestRate) "8"
set config(machinery,tractor1,loanDuration) "5"
set config(machinery,tractor1,age) "0"

set config(machinery,tractor1,sprayrig,fuelrate) "30.0"
set config(machinery,tractor1,sprayrig,workrate) "30.0"
set config(machinery,tractor1,sprayrig,hoursperday) "12"

set config(machinery,tractor1,planter,fuelrate) "40.0"
set config(machinery,tractor1,planter,workrate) "14.0"
set config(machinery,tractor1,planter,hoursperday) "12"

set config(machinery,tractor1,deepplanter,fuelrate) "60.0"
set config(machinery,tractor1,deepplanter,workrate) "100.0"
set config(machinery,tractor1,deepplanter,hoursperday) "8"


lappend config(tractors) "tractor_2"
set config(machinery,tractor_2,newPrice) "47000.0"
set config(machinery,tractor_2,tradeInValue) "45"
set config(machinery,tractor_2,lifeOfEquipment) "8000"
set config(machinery,tractor_2,insuranceRate) "6.2"
set config(machinery,tractor_2,repairs) "10"
set config(machinery,tractor_2,oil) "15"
set config(machinery,tractor_2,loanInterestRate) "7"
set config(machinery,tractor_2,loanDuration) "5"
set config(machinery,tractor_2,age) "0"
set config(machinery,tractor_2,sprayrig,fuelrate) "15.0"
set config(machinery,tractor_2,sprayrig,workrate) "30.0"
set config(machinery,tractor_2,sprayrig,hoursperday) "12"
set config(machinery,tractor_2,planter,fuelrate) "45.0"
set config(machinery,tractor_2,planter,workrate) "9.5"
set config(machinery,tractor_2,planter,hoursperday) "24"


lappend config(implements) "planter"
set config(machinery,planter,newPrice) "20000.0"
set config(machinery,planter,tradeInValue) "35"
set config(machinery,planter,lifeOfEquipment) "1000"
set config(machinery,planter,insuranceRate) "2.3"
set config(machinery,planter,repairs) "20"
set config(machinery,planter,oil) "0"
set config(machinery,planter,loanInterestRate) "8"
set config(machinery,planter,loanDuration) "5"
set config(machinery,planter,age) "0"


lappend config(implements) "sprayrig"
set config(machinery,sprayrig,newPrice) "30000.0"
set config(machinery,sprayrig,tradeInValue) "20"
set config(machinery,sprayrig,lifeOfEquipment) "3000"
set config(machinery,sprayrig,insuranceRate) "2.3"
set config(machinery,sprayrig,repairs) "45"
set config(machinery,sprayrig,oil) "0"
set config(machinery,sprayrig,loanInterestRate) "8"
set config(machinery,sprayrig,loanDuration) "5"
set config(machinery,sprayrig,age) "0"


set config(machinery,fuelcost) "0.0"
          
     --->Section: start_simulation


# Finally, load our configuration database and initialise states
machinery:initialise 
set machinery:jobs {}

# Set the current period of the loan to 1 past its end
foreach id [concat $config(tractors) $config(implements)] {
   set config(machinery,$id,loanPeriod) [expr 1 + $config(machinery,$id,loanDuration)]
}

# Now tell apsim we own it, set up the trace variable we use to trigger when the variable is read
foreach tid $config(tractors) {
  foreach iid $config(implements) {
     set v available_${tid}_${iid}
     set $v 0
     apsimRegisterGetSet $v
     trace add variable $v read "machinery:maProc"
  }
}

apsimWriteToSummaryFile "Machinery:\nTractors=$config(tractors)\nImplements=$config(implements)"


     --->End
Economics: 
     --->End

------- mob1 Initialisation ---------------------------------------------------
  Initial Stocking rate: 0
  Initial Live Weight: 0


------- mob2 Initialisation ---------------------------------------------------
  Initial Stocking rate: 0
  Initial Live Weight: 0


------- mob3 Initialisation ---------------------------------------------------
  Initial Stocking rate: 0
  Initial Live Weight: 0


------- mob4 Initialisation ---------------------------------------------------
  Initial Stocking rate: 0
  Initial Live Weight: 0


------- mob5 Initialisation ---------------------------------------------------
  Initial Stocking rate: 0
  Initial Live Weight: 0


------- mob6 Initialisation ---------------------------------------------------
  Initial Stocking rate: 0
  Initial Live Weight: 0


------- mob7 Initialisation ---------------------------------------------------
  Initial Stocking rate: 0
  Initial Live Weight: 0


------- mob8 Initialisation ---------------------------------------------------
  Initial Stocking rate: 0
  Initial Live Weight: 0


------- mob9 Initialisation ---------------------------------------------------
  Initial Stocking rate: 0
  Initial Live Weight: 0


------- mob10 Initialisation --------------------------------------------------
  Initial Stocking rate: 0
  Initial Live Weight: 0


------- accum Initialisation --------------------------------------------------
     Initialising

------- Grasp Managment Initialisation ----------------------------------------
     Manager rules:
     
     SECTION:- init
     ready_to_graze = 0
     
     SECTION:- start_simulation
     buffel establish init_section = establishment
     pasture_in = 1
     
     SECTION:- start_of_day
     if (day = 273) then
        ready_to_graze = 1
     endif
     
     SECTION:- end_of_day
     END of rules
     
     Manager creating a new local real variable : ready_to_graze = 0.00000

------- soil Water Initialisation ---------------------------------------------
     
         - Reading constants
     
        - Reading Soil Property Parameters
     
        - Reading Soil Profile Parameters
     Initial soilwater distributed using "sw" parameter.
     
     
     
                      Soil Profile Properties
        ---------------------------------------------------------------------
              Depth  Air_Dry  LL15   Dul    Sat     Sw     BD   Runoff  SWCON
                mm     mm/mm  mm/mm  mm/mm  mm/mm  mm/mm  g/cc    wf
        ---------------------------------------------------------------------
            0.-  150.  0.110  0.220  0.410  0.460  0.410  1.360  0.762  0.300
          150.-  300.  0.176  0.220  0.420  0.470  0.420  1.330  0.190  0.300
          300.-  600.  0.230  0.230  0.420  0.470  0.420  1.320  0.048  0.300
          600.-  900.  0.230  0.230  0.420  0.470  0.420  1.320  0.000  0.300
          900.- 1200.  0.230  0.230  0.400  0.450  0.400  1.370  0.000  0.300
         1200.- 1500.  0.230  0.230  0.370  0.420  0.370  1.460  0.000  0.300
         1500.- 1800.  0.230  0.230  0.350  0.400  0.350  1.500  0.000  0.300
        ---------------------------------------------------------------------
     
     
     
                  Soil Water Holding Capacity
          ---------------------------------------------------------
              Depth    Unavailable Available  Max Avail.  Drainable
                          (LL15)   (SW-LL15)  (DUL-LL15)  (SAT-DUL)
                            mm        mm          mm         mm
          ---------------------------------------------------------
            0.-  150.      33.00      28.50      28.50       7.50
          150.-  300.      33.00      30.00      30.00       7.50
          300.-  600.      69.00      57.00      57.00      15.00
          600.-  900.      69.00      57.00      57.00      15.00
          900.- 1200.      69.00      51.00      51.00      15.00
         1200.- 1500.      69.00      42.00      42.00      15.00
         1500.- 1800.      69.00      36.00      36.00      15.00
          ---------------------------------------------------------
               Totals     411.00     301.50     301.50      90.00
          ---------------------------------------------------------
     
     
     
     
     
     
                  Initial Soil Parameters
          ---------------------------------------------------------
                 Insoil        Salb     Dif_Con   Dif_Slope
          ---------------------------------------------------------
                   0.00        0.12       40.00       16.00
          ---------------------------------------------------------
     
     
     
                  Runoff is predicted using scs curve number:
                Cn2  Cn_Red  Cn_Cov   H_Eff_Depth
                                           mm
          ---------------------------------------------------------
              73.00   20.00    0.80  450.00
          ---------------------------------------------------------
     
     
     
           Using Ritchie evaporation model
            Stage 1 Duration (U): Summer        6.00 (mm)
                                  Winter        4.00 (mm)
            Stage 2       (CONA): Summer        3.50 (mm^0.5)
                                  Winter        2.50 (mm^0.5)
            Critical Dates:       Summer        1-Nov
                                  Winter        1-apr
            Eo from priestly-taylor

------- surface organic matter Initialisation ---------------------------------
     
         - Reading constants
     
         - Reading parameters
     
     
     
                         Initial Surface Organic Matter Data
         ----------------------------------------------------------------------
            Name   Type        Dry matter   C        N        P    Cover  Standing_fr
                                (kg/ha)  (kg/ha)  (kg/ha)  (kg/ha) (0-1)     (0-1)
         ----------------------------------------------------------------------
          wheat_stubwheat         1000.0   400.0     5.0     0.0   0.393     0.0
         ----------------------------------------------------------------------
     
                      Effective Cover from Surface Materials =   0.4
     

------- Erosion Initialisation ------------------------------------------------
      Initialising:
     
        - Reading Parameters
     
     
     
                      Erosion Parameters
          -----------------------------------------------
           Profile reduction:                     off
           Freebairn cover-sediment concentration model
     
           LS factor:                             1.0954
     
           K factor:                              0.4000
     
           P factor:                              1.0000
     
          -----------------------------------------------

------- soil Nitrogen Initialisation ------------------------------------------
     
        - Reading Parameters
     
        - Reading Constants
     Using standard soil mineralisation for soil type Grey Vertosol
     
     
     
           TAV and AMP supplied externally
     
     
     
                      Soil Profile Properties
          ------------------------------------------------
           Layer    pH    OC     NO3     NH4    Urea
                         (%) (kg/ha) (kg/ha) (kg/ha)
          ------------------------------------------------
             1     8.20  1.19   12.24    1.92    0.00
             2     8.50  1.01    9.98    1.88    0.00
             3     8.60  0.45   11.88    3.36    0.00
             4     8.60  0.30    7.92    2.61    0.00
             5     7.40  0.20    4.11    0.77    0.00
             6     5.30  0.16    4.38    0.41    0.00
             7     5.30  0.17    4.50    0.04    0.00
          ------------------------------------------------
           Totals               55.00   10.99    0.00
          ------------------------------------------------
     
     
     
     
     
     
                  Initial Soil Organic Matter Status
          ---------------------------------------------------------
           Layer      Hum-C   Hum-N  Biom-C  Biom-N   FOM-C   FOM-N
                    (kg/ha) (kg/ha) (kg/ha) (kg/ha) (kg/ha) (kg/ha)
          ---------------------------------------------------------
             1      23715.8  1976.3   560.2    70.0   138.9     3.5
             2      19991.5  1666.0   158.0    19.8   108.1     2.7
             3      17750.1  1479.2    69.9     8.7    65.6     1.6
             4      11880.0   990.0     0.0     0.0    39.8     1.0
             5       8220.0   685.0     0.0     0.0    24.1     0.6
             6       7008.0   584.0     0.0     0.0    14.6     0.4
             7       7650.0   637.5     0.0     0.0     8.9     0.2
          ---------------------------------------------------------
           Totals   96215.4  8017.9   788.1    98.5   400.0    10.0
          ---------------------------------------------------------
Buffel: 
     Initialising:
     Parameters:
       Transpiration Efficiency:     17.00 kg/ha/mm at 20.0 hPa
       Potential regrowth:            5.00 kg/ha/day
       Radiation use eff.:           12.00 ()
       SWI full green:                0.20 ()
       fpc50 yield(radn):          1000.00 kg/ha
       fcov50 yield(evap):         1000.00 kg/ha
       Frost start:    2.00 oC, kill:     0.00 oC.
       Root Profile:
           Layer    Lower limit       Kl       Max N
            ()        (mm)            ()      (kg/ha)
         --------------------------------------------
               1      33.000       0.500       20.00
               2      33.000       0.500        2.50
               3      75.000       0.500        1.25
               4      78.000       0.500        1.25
               5      78.000       0.000        0.00
               6      90.000       0.000        0.00
               7     102.000       0.000        0.00
         --------------------------------------------                                                                                                                                                        


------- tracker Initialisation ------------------------------------------------
     Tracker variables:
        sum of  growth on end_of_day from reported to now as TotalGrowthMonthly
        sum of rain on end_of_day from start_month to end_month as TotalRain

------- accum Initialisation --------------------------------------------------
     Initialising

------- Oats Sowing rule Initialisation ---------------------------------------
     Manager rules:
     
     SECTION:- start_of_day
     sowingoats=0
           if (paddock_is_fallow() = 1 and fallowin <> 'yes' and (nextcrop = 0 or nextcrop = 'oats')) then
              if (date_within('1-mar, 1-jul') = 1) then
     if (rain[5] >= 20 and esw >= 60) or
         ('no' = 'yes' and today = date('1-jul'))) then
        sowingoats=1
        choosenextcrop = 'yes'
        oats sow plants =100, sowing_depth = 30, cultivar = coolibah, row_spacing = 250, skip = solid
          cuts=0
     endif
     if today = date('1-jul') then
        choosenextcrop = 'yes'
     endif
              endif
           endif
     
     SECTION:- init
     nextcrop = 0
     fallowin = 0
     END of rules
     
     Manager creating a new local real variable : nextcrop = 0.00000
     Manager creating a new local real variable : fallowin = 0.00000

------- Sowing fertiliser Initialisation --------------------------------------
     Manager rules:
     
     SECTION:- oats.sowing
             fertiliser apply amount = 50 (kg/ha), depth = 50 (mm), type = urea_n
     END of rules
     

------- endcrop Initialisation ------------------------------------------------
     Manager rules:
     
     SECTION:- init
     
     SECTION:- start_of_day
          if oats.stagename = 'end_grain_fill' or oats.plant_status = 'dead' or day = 336 then
              oats end_crop
          'soil nitrogen' reset
          'surface organic matter' reset
            act_mods reseting
            delta_dm = 0
        endif
     
     SECTION:- end_of_day
     END of rules
     

------- soil Water Initialisation ---------------------------------------------
     
         - Reading constants
     
        - Reading Soil Property Parameters
     
        - Reading Soil Profile Parameters
     Initial soilwater distributed using "sw" parameter.
     
     
     
                      Soil Profile Properties
        ---------------------------------------------------------------------
              Depth  Air_Dry  LL15   Dul    Sat     Sw     BD   Runoff  SWCON
                mm     mm/mm  mm/mm  mm/mm  mm/mm  mm/mm  g/cc    wf
        ---------------------------------------------------------------------
            0.-  150.  0.110  0.220  0.410  0.460  0.410  1.360  0.762  0.300
          150.-  300.  0.176  0.220  0.420  0.470  0.420  1.330  0.190  0.300
          300.-  600.  0.230  0.230  0.420  0.470  0.420  1.320  0.048  0.300
          600.-  900.  0.230  0.230  0.420  0.470  0.420  1.320  0.000  0.300
          900.- 1200.  0.230  0.230  0.400  0.450  0.400  1.370  0.000  0.300
         1200.- 1500.  0.230  0.230  0.370  0.420  0.370  1.460  0.000  0.300
         1500.- 1800.  0.230  0.230  0.350  0.400  0.350  1.500  0.000  0.300
        ---------------------------------------------------------------------
     
     
     
                  Soil Water Holding Capacity
          ---------------------------------------------------------
              Depth    Unavailable Available  Max Avail.  Drainable
                          (LL15)   (SW-LL15)  (DUL-LL15)  (SAT-DUL)
                            mm        mm          mm         mm
          ---------------------------------------------------------
            0.-  150.      33.00      28.50      28.50       7.50
          150.-  300.      33.00      30.00      30.00       7.50
          300.-  600.      69.00      57.00      57.00      15.00
          600.-  900.      69.00      57.00      57.00      15.00
          900.- 1200.      69.00      51.00      51.00      15.00
         1200.- 1500.      69.00      42.00      42.00      15.00
         1500.- 1800.      69.00      36.00      36.00      15.00
          ---------------------------------------------------------
               Totals     411.00     301.50     301.50      90.00
          ---------------------------------------------------------
     
     
     
     
     
     
                  Initial Soil Parameters
          ---------------------------------------------------------
                 Insoil        Salb     Dif_Con   Dif_Slope
          ---------------------------------------------------------
                   0.00        0.12       40.00       16.00
          ---------------------------------------------------------
     
     
     
                  Runoff is predicted using scs curve number:
                Cn2  Cn_Red  Cn_Cov   H_Eff_Depth
                                           mm
          ---------------------------------------------------------
              73.00   20.00    0.80  450.00
          ---------------------------------------------------------
     
     
     
           Using Ritchie evaporation model
            Stage 1 Duration (U): Summer        6.00 (mm)
                                  Winter        4.00 (mm)
            Stage 2       (CONA): Summer        3.50 (mm^0.5)
                                  Winter        2.50 (mm^0.5)
            Critical Dates:       Summer        1-Nov
                                  Winter        1-apr
            Eo from priestly-taylor

------- surface organic matter Initialisation ---------------------------------
     
         - Reading constants
     
         - Reading parameters
     
     
     
                         Initial Surface Organic Matter Data
         ----------------------------------------------------------------------
            Name   Type        Dry matter   C        N        P    Cover  Standing_fr
                                (kg/ha)  (kg/ha)  (kg/ha)  (kg/ha) (0-1)     (0-1)
         ----------------------------------------------------------------------
          wheat_stubwheat         1000.0   400.0     5.0     0.0   0.393     0.0
         ----------------------------------------------------------------------
     
                      Effective Cover from Surface Materials =   0.4
     

------- Erosion Initialisation ------------------------------------------------
      Initialising:
     
        - Reading Parameters
     
     
     
                      Erosion Parameters
          -----------------------------------------------
           Profile reduction:                     off
           Freebairn cover-sediment concentration model
     
           LS factor:                             1.0954
     
           K factor:                              0.4000
     
           P factor:                              1.0000
     
          -----------------------------------------------

------- soil Nitrogen Initialisation ------------------------------------------
     
        - Reading Parameters
     
        - Reading Constants
     Using standard soil mineralisation for soil type Grey Vertosol
     
     
     
           TAV and AMP supplied externally
     
     
     
                      Soil Profile Properties
          ------------------------------------------------
           Layer    pH    OC     NO3     NH4    Urea
                         (%) (kg/ha) (kg/ha) (kg/ha)
          ------------------------------------------------
             1     8.20  1.19   12.24    1.92    0.00
             2     8.50  1.01    9.98    1.88    0.00
             3     8.60  0.45   11.88    3.36    0.00
             4     8.60  0.30    7.92    2.61    0.00
             5     7.40  0.20    4.11    0.77    0.00
             6     5.30  0.16    4.38    0.41    0.00
             7     5.30  0.17    4.50    0.04    0.00
          ------------------------------------------------
           Totals               55.00   10.99    0.00
          ------------------------------------------------
     
     
     
     
     
     
                  Initial Soil Organic Matter Status
          ---------------------------------------------------------
           Layer      Hum-C   Hum-N  Biom-C  Biom-N   FOM-C   FOM-N
                    (kg/ha) (kg/ha) (kg/ha) (kg/ha) (kg/ha) (kg/ha)
          ---------------------------------------------------------
             1      23715.8  1976.3   560.2    70.0   138.9     3.5
             2      19991.5  1666.0   158.0    19.8   108.1     2.7
             3      17750.1  1479.2    69.9     8.7    65.6     1.6
             4      11880.0   990.0     0.0     0.0    39.8     1.0
             5       8220.0   685.0     0.0     0.0    24.1     0.6
             6       7008.0   584.0     0.0     0.0    14.6     0.4
             7       7650.0   637.5     0.0     0.0     8.9     0.2
          ---------------------------------------------------------
           Totals   96215.4  8017.9   788.1    98.5   400.0    10.0
          ---------------------------------------------------------

------- tracker Initialisation ------------------------------------------------
     Tracker variables:
        sum of rain on newmet from sowing to harvesting as incroprain
        sum of rain on newmet from harvesting to sowing  as fallowrain
        sum of es on post from blork to now as es_sum
        sum of runoff on post from blork to now as runoff_sum
        sum of drain on post from blork to now as drainage_sum
        sum of soil_loss on post from blork to now as soil_loss_sum
        sum of dlt_n_min_tot() on post from blork to now as n_mineralisation_sum

------- accum Initialisation --------------------------------------------------
     Initialising

------- Grasp Managment Initialisation ----------------------------------------
     Manager rules:
     
     SECTION:- init
     pasture_in = 0
     ready_to_graze = 0
     
     SECTION:- start_simulation
     leucaena establish init_section = establishment
     pasture_in = 1
     
     SECTION:- start_of_day
     if (day = 273) then
        ready_to_graze = 1
     endif
     
     SECTION:- end_of_day
     END of rules
     
     Manager creating a new local real variable : pasture_in = 0.00000
     Manager creating a new local real variable : ready_to_graze = 0.00000

------- soil Water Initialisation ---------------------------------------------
     
         - Reading constants
     
        - Reading Soil Property Parameters
     
        - Reading Soil Profile Parameters
     Initial soilwater distributed using "sw" parameter.
     
     
     
                      Soil Profile Properties
        ---------------------------------------------------------------------
              Depth  Air_Dry  LL15   Dul    Sat     Sw     BD   Runoff  SWCON
                mm     mm/mm  mm/mm  mm/mm  mm/mm  mm/mm  g/cc    wf
        ---------------------------------------------------------------------
            0.-  150.  0.110  0.220  0.410  0.460  0.410  1.360  0.762  0.300
          150.-  300.  0.176  0.220  0.420  0.470  0.420  1.330  0.190  0.300
          300.-  600.  0.230  0.230  0.420  0.470  0.420  1.320  0.048  0.300
          600.-  900.  0.230  0.230  0.420  0.470  0.420  1.320  0.000  0.300
          900.- 1200.  0.230  0.230  0.400  0.450  0.400  1.370  0.000  0.300
         1200.- 1500.  0.230  0.230  0.370  0.420  0.370  1.460  0.000  0.300
         1500.- 1800.  0.230  0.230  0.350  0.400  0.350  1.500  0.000  0.300
        ---------------------------------------------------------------------
     
     
     
                  Soil Water Holding Capacity
          ---------------------------------------------------------
              Depth    Unavailable Available  Max Avail.  Drainable
                          (LL15)   (SW-LL15)  (DUL-LL15)  (SAT-DUL)
                            mm        mm          mm         mm
          ---------------------------------------------------------
            0.-  150.      33.00      28.50      28.50       7.50
          150.-  300.      33.00      30.00      30.00       7.50
          300.-  600.      69.00      57.00      57.00      15.00
          600.-  900.      69.00      57.00      57.00      15.00
          900.- 1200.      69.00      51.00      51.00      15.00
         1200.- 1500.      69.00      42.00      42.00      15.00
         1500.- 1800.      69.00      36.00      36.00      15.00
          ---------------------------------------------------------
               Totals     411.00     301.50     301.50      90.00
          ---------------------------------------------------------
     
     
     
     
     
     
                  Initial Soil Parameters
          ---------------------------------------------------------
                 Insoil        Salb     Dif_Con   Dif_Slope
          ---------------------------------------------------------
                   0.00        0.12       40.00       16.00
          ---------------------------------------------------------
     
     
     
                  Runoff is predicted using scs curve number:
                Cn2  Cn_Red  Cn_Cov   H_Eff_Depth
                                           mm
          ---------------------------------------------------------
              73.00   20.00    0.80  450.00
          ---------------------------------------------------------
     
     
     
           Using Ritchie evaporation model
            Stage 1 Duration (U): Summer        6.00 (mm)
                                  Winter        4.00 (mm)
            Stage 2       (CONA): Summer        3.50 (mm^0.5)
                                  Winter        2.50 (mm^0.5)
            Critical Dates:       Summer        1-Nov
                                  Winter        1-apr
            Eo from priestly-taylor

------- surface organic matter Initialisation ---------------------------------
     
         - Reading constants
     
         - Reading parameters
     
     
     
                         Initial Surface Organic Matter Data
         ----------------------------------------------------------------------
            Name   Type        Dry matter   C        N        P    Cover  Standing_fr
                                (kg/ha)  (kg/ha)  (kg/ha)  (kg/ha) (0-1)     (0-1)
         ----------------------------------------------------------------------
          wheat_stubwheat         1000.0   400.0     5.0     0.0   0.393     0.0
         ----------------------------------------------------------------------
     
                      Effective Cover from Surface Materials =   0.4
     

------- Erosion Initialisation ------------------------------------------------
      Initialising:
     
        - Reading Parameters
     
     
     
                      Erosion Parameters
          -----------------------------------------------
           Profile reduction:                     off
           Freebairn cover-sediment concentration model
     
           LS factor:                             1.0954
     
           K factor:                              0.4000
     
           P factor:                              1.0000
     
          -----------------------------------------------

------- soil Nitrogen Initialisation ------------------------------------------
     
        - Reading Parameters
     
        - Reading Constants
     Using standard soil mineralisation for soil type Grey Vertosol
     
     
     
           TAV and AMP supplied externally
     
     
     
                      Soil Profile Properties
          ------------------------------------------------
           Layer    pH    OC     NO3     NH4    Urea
                         (%) (kg/ha) (kg/ha) (kg/ha)
          ------------------------------------------------
             1     8.20  1.19   12.24    1.92    0.00
             2     8.50  1.01    9.98    1.88    0.00
             3     8.60  0.45   11.88    3.36    0.00
             4     8.60  0.30    7.92    2.61    0.00
             5     7.40  0.20    4.11    0.77    0.00
             6     5.30  0.16    4.38    0.41    0.00
             7     5.30  0.17    4.50    0.04    0.00
          ------------------------------------------------
           Totals               55.00   10.99    0.00
          ------------------------------------------------
     
     
     
     
     
     
                  Initial Soil Organic Matter Status
          ---------------------------------------------------------
           Layer      Hum-C   Hum-N  Biom-C  Biom-N   FOM-C   FOM-N
                    (kg/ha) (kg/ha) (kg/ha) (kg/ha) (kg/ha) (kg/ha)
          ---------------------------------------------------------
             1      23715.8  1976.3   560.2    70.0   138.9     3.5
             2      19991.5  1666.0   158.0    19.8   108.1     2.7
             3      17750.1  1479.2    69.9     8.7    65.6     1.6
             4      11880.0   990.0     0.0     0.0    39.8     1.0
             5       8220.0   685.0     0.0     0.0    24.1     0.6
             6       7008.0   584.0     0.0     0.0    14.6     0.4
             7       7650.0   637.5     0.0     0.0     8.9     0.2
          ---------------------------------------------------------
           Totals   96215.4  8017.9   788.1    98.5   400.0    10.0
          ---------------------------------------------------------
leucaena: 
     Initialising:
     Parameters:
       Transpiration Efficiency:     17.00 kg/ha/mm at 20.0 hPa
       Potential regrowth:            5.00 kg/ha/day
       Radiation use eff.:           12.00 ()
       SWI full green:                0.20 ()
       fpc50 yield(radn):          1000.00 kg/ha
       fcov50 yield(evap):         1000.00 kg/ha
       Frost start:    2.00 oC, kill:     0.00 oC.
       Root Profile:
           Layer    Lower limit       Kl       Max N
            ()        (mm)            ()      (kg/ha)
         --------------------------------------------
               1      33.000       0.500       20.00
               2      33.000       0.500        2.50
               3      75.000       0.500        1.25
               4      78.000       0.500        1.25
               5      78.000       0.000        0.00
               6      90.000       0.000        0.00
               7     102.000       0.000        0.00
         --------------------------------------------                                                                                                                                                        


------- tracker Initialisation ------------------------------------------------
     Tracker variables:
        sum of rain on newmet from sowing to harvesting as incroprain
        sum of rain on newmet from harvesting to sowing  as fallowrain
        sum of es on post from blork to now as es_sum
        sum of runoff on post from blork to now as runoff_sum
        sum of drain on post from blork to now as drainage_sum
        sum of soil_loss on post from blork to now as soil_loss_sum
        sum of dlt_n_min_tot() on post from blork to now as n_mineralisation_sum

------- accum Initialisation --------------------------------------------------
     Initialising

------- Sow using a variable rule Initialisation ------------------------------
     Manager rules:
     
     SECTION:- start_of_day
     sowingsorghum=0
           if (paddock_is_fallow() = 1 and fallowin <> 'yes' and (nextcrop = 0 or nextcrop = 'sweetsorghum')) then
              if (date_within('1-sep, 30-dec') = 1) then
     if (rain[3] >= 20 and esw >= 60) or
         ('no' = 'yes' and today = date('30-dec'))) then
        choosenextcrop = 'yes'
        sowingsorghum=1
        sweetsorghum sow plants =20, sowing_depth = 30, cultivar = sugargraze, row_spacing = 500, crop_class = plant
        num_days_grazed = 0
     endif
     if today = date('30-dec') then
        choosenextcrop = 'yes'
     endif
              endif
           endif
           num_days_grazed = num_days_grazed +1
     END of rules
     

------- Sowing fertiliser Initialisation --------------------------------------
     Manager rules:
     
     SECTION:- sweetsorghum.sowing
             fertiliser apply amount = 50 (kg/ha), depth = 50 (mm), type = urea_n
     END of rules
     

------- endcrop Initialisation ------------------------------------------------
     Manager rules:
     
     SECTION:- init
     
     SECTION:- start_of_day
        if  (plant_status = 'alive' and mint < 5.0) or plant_status = 'dead' then
               sweetsorghum end_crop
        endif
     
     SECTION:- end_of_day
     END of rules
     

------- soil Water Initialisation ---------------------------------------------
     
         - Reading constants
     
        - Reading Soil Property Parameters
     
        - Reading Soil Profile Parameters
     Initial soilwater distributed using "sw" parameter.
     
     
     
                      Soil Profile Properties
        ---------------------------------------------------------------------
              Depth  Air_Dry  LL15   Dul    Sat     Sw     BD   Runoff  SWCON
                mm     mm/mm  mm/mm  mm/mm  mm/mm  mm/mm  g/cc    wf
        ---------------------------------------------------------------------
            0.-  150.  0.110  0.220  0.410  0.460  0.410  1.360  0.762  0.300
          150.-  300.  0.176  0.220  0.420  0.470  0.420  1.330  0.190  0.300
          300.-  600.  0.230  0.230  0.420  0.470  0.420  1.320  0.048  0.300
          600.-  900.  0.230  0.230  0.420  0.470  0.420  1.320  0.000  0.300
          900.- 1200.  0.230  0.230  0.400  0.450  0.400  1.370  0.000  0.300
         1200.- 1500.  0.230  0.230  0.370  0.420  0.370  1.460  0.000  0.300
         1500.- 1800.  0.230  0.230  0.350  0.400  0.350  1.500  0.000  0.300
        ---------------------------------------------------------------------
     
     
     
                  Soil Water Holding Capacity
          ---------------------------------------------------------
              Depth    Unavailable Available  Max Avail.  Drainable
                          (LL15)   (SW-LL15)  (DUL-LL15)  (SAT-DUL)
                            mm        mm          mm         mm
          ---------------------------------------------------------
            0.-  150.      33.00      28.50      28.50       7.50
          150.-  300.      33.00      30.00      30.00       7.50
          300.-  600.      69.00      57.00      57.00      15.00
          600.-  900.      69.00      57.00      57.00      15.00
          900.- 1200.      69.00      51.00      51.00      15.00
         1200.- 1500.      69.00      42.00      42.00      15.00
         1500.- 1800.      69.00      36.00      36.00      15.00
          ---------------------------------------------------------
               Totals     411.00     301.50     301.50      90.00
          ---------------------------------------------------------
     
     
     
     
     
     
                  Initial Soil Parameters
          ---------------------------------------------------------
                 Insoil        Salb     Dif_Con   Dif_Slope
          ---------------------------------------------------------
                   0.00        0.12       40.00       16.00
          ---------------------------------------------------------
     
     
     
                  Runoff is predicted using scs curve number:
                Cn2  Cn_Red  Cn_Cov   H_Eff_Depth
                                           mm
          ---------------------------------------------------------
              73.00   20.00    0.80  450.00
          ---------------------------------------------------------
     
     
     
           Using Ritchie evaporation model
            Stage 1 Duration (U): Summer        6.00 (mm)
                                  Winter        4.00 (mm)
            Stage 2       (CONA): Summer        3.50 (mm^0.5)
                                  Winter        2.50 (mm^0.5)
            Critical Dates:       Summer        1-Nov
                                  Winter        1-apr
            Eo from priestly-taylor

------- surface organic matter Initialisation ---------------------------------
     
         - Reading constants
     
         - Reading parameters
     
     
     
                         Initial Surface Organic Matter Data
         ----------------------------------------------------------------------
            Name   Type        Dry matter   C        N        P    Cover  Standing_fr
                                (kg/ha)  (kg/ha)  (kg/ha)  (kg/ha) (0-1)     (0-1)
         ----------------------------------------------------------------------
          wheat_stubwheat         1000.0   400.0     5.0     0.0   0.393     0.0
         ----------------------------------------------------------------------
     
                      Effective Cover from Surface Materials =   0.4
     

------- Erosion Initialisation ------------------------------------------------
      Initialising:
     
        - Reading Parameters
     
     
     
                      Erosion Parameters
          -----------------------------------------------
           Profile reduction:                     off
           Freebairn cover-sediment concentration model
     
           LS factor:                             1.0954
     
           K factor:                              0.4000
     
           P factor:                              1.0000
     
          -----------------------------------------------

------- soil Nitrogen Initialisation ------------------------------------------
     
        - Reading Parameters
     
        - Reading Constants
     Using standard soil mineralisation for soil type Grey Vertosol
     
     
     
           TAV and AMP supplied externally
     
     
     
                      Soil Profile Properties
          ------------------------------------------------
           Layer    pH    OC     NO3     NH4    Urea
                         (%) (kg/ha) (kg/ha) (kg/ha)
          ------------------------------------------------
             1     8.20  1.19   12.24    1.92    0.00
             2     8.50  1.01    9.98    1.88    0.00
             3     8.60  0.45   11.88    3.36    0.00
             4     8.60  0.30    7.92    2.61    0.00
             5     7.40  0.20    4.11    0.77    0.00
             6     5.30  0.16    4.38    0.41    0.00
             7     5.30  0.17    4.50    0.04    0.00
          ------------------------------------------------
           Totals               55.00   10.99    0.00
          ------------------------------------------------
     
     
     
     
     
     
                  Initial Soil Organic Matter Status
          ---------------------------------------------------------
           Layer      Hum-C   Hum-N  Biom-C  Biom-N   FOM-C   FOM-N
                    (kg/ha) (kg/ha) (kg/ha) (kg/ha) (kg/ha) (kg/ha)
          ---------------------------------------------------------
             1      23715.8  1976.3   560.2    70.0   138.9     3.5
             2      19991.5  1666.0   158.0    19.8   108.1     2.7
             3      17750.1  1479.2    69.9     8.7    65.6     1.6
             4      11880.0   990.0     0.0     0.0    39.8     1.0
             5       8220.0   685.0     0.0     0.0    24.1     0.6
             6       7008.0   584.0     0.0     0.0    14.6     0.4
             7       7650.0   637.5     0.0     0.0     8.9     0.2
          ---------------------------------------------------------
           Totals   96215.4  8017.9   788.1    98.5   400.0    10.0
          ---------------------------------------------------------

------- tracker Initialisation ------------------------------------------------
     Tracker variables:
        sum of rain on newmet from sowing to harvesting as incroprain
        sum of rain on newmet from harvesting to sowing  as fallowrain
        sum of es on post from blork to now as es_sum
        sum of runoff on post from blork to now as runoff_sum
        sum of drain on post from blork to now as drainage_sum
        sum of soil_loss on post from blork to now as soil_loss_sum
        sum of dlt_n_min_tot() on post from blork to now as n_mineralisation_sum

------- accum Initialisation --------------------------------------------------
     Initialising

------- Soil Water Initialisation ---------------------------------------------
     
         - Reading constants
     
        - Reading Soil Property Parameters
     
        - Reading Soil Profile Parameters
     Initial soilwater distributed using "sw" parameter.
     
     
     
                      Soil Profile Properties
        ---------------------------------------------------------------------
              Depth  Air_Dry  LL15   Dul    Sat     Sw     BD   Runoff  SWCON
                mm     mm/mm  mm/mm  mm/mm  mm/mm  mm/mm  g/cc    wf
        ---------------------------------------------------------------------
            0.-  150.  0.110  0.220  0.410  0.460  0.220  1.360  0.762  0.300
          150.-  300.  0.176  0.220  0.400  0.450  0.220  1.370  0.190  0.300
          300.-  600.  0.250  0.250  0.400  0.450  0.250  1.380  0.048  0.300
          600.-  900.  0.250  0.250  0.380  0.430  0.250  1.430  0.000  0.300
          900.- 1200.  0.250  0.250  0.370  0.420  0.250  1.470  0.000  0.300
         1200.- 1500.  0.250  0.250  0.340  0.390  0.250  1.530  0.000  0.300
         1500.- 1800.  0.250  0.250  0.340  0.390  0.250  1.530  0.000  0.300
        ---------------------------------------------------------------------
     
     
     
                  Soil Water Holding Capacity
          ---------------------------------------------------------
              Depth    Unavailable Available  Max Avail.  Drainable
                          (LL15)   (SW-LL15)  (DUL-LL15)  (SAT-DUL)
                            mm        mm          mm         mm
          ---------------------------------------------------------
            0.-  150.      33.00       0.00      28.50       7.50
          150.-  300.      33.00       0.00      27.00       7.50
          300.-  600.      75.00       0.00      45.00      15.00
          600.-  900.      75.00       0.00      39.00      15.00
          900.- 1200.      75.00       0.00      36.00      15.00
         1200.- 1500.      75.00       0.00      27.00      15.00
         1500.- 1800.      75.00       0.00      27.00      15.00
          ---------------------------------------------------------
               Totals     441.00       0.00     229.50      90.00
          ---------------------------------------------------------
     
     
     
     
     
     
                  Initial Soil Parameters
          ---------------------------------------------------------
                 Insoil        Salb     Dif_Con   Dif_Slope
          ---------------------------------------------------------
                   0.00        0.12       40.00       16.00
          ---------------------------------------------------------
     
     
     
                  Runoff is predicted using scs curve number:
                Cn2  Cn_Red  Cn_Cov   H_Eff_Depth
                                           mm
          ---------------------------------------------------------
              73.00   20.00    0.80  450.00
          ---------------------------------------------------------
     
     
     
           Using Ritchie evaporation model
            Stage 1 Duration (U): Summer        6.00 (mm)
                                  Winter        4.00 (mm)
            Stage 2       (CONA): Summer        3.50 (mm^0.5)
                                  Winter        2.50 (mm^0.5)
            Critical Dates:       Summer        1-Nov
                                  Winter        1-apr
            Eo from priestly-taylor

------- surface organic matter Initialisation ---------------------------------
     
         - Reading constants
     
         - Reading parameters
     
     
     
                         Initial Surface Organic Matter Data
         ----------------------------------------------------------------------
            Name   Type        Dry matter   C        N        P    Cover  Standing_fr
                                (kg/ha)  (kg/ha)  (kg/ha)  (kg/ha) (0-1)     (0-1)
         ----------------------------------------------------------------------
          wheat_stubwheat         1000.0   400.0     5.0     0.0   0.393     0.0
         ----------------------------------------------------------------------
     
                      Effective Cover from Surface Materials =   0.4
     

------- Erosion Initialisation ------------------------------------------------
      Initialising:
     
        - Reading Parameters
     
     
     
                      Erosion Parameters
          -----------------------------------------------
           Profile reduction:                     off
           Freebairn cover-sediment concentration model
     
           LS factor:                             1.0954
     
           K factor:                              0.4000
     
           P factor:                              1.0000
     
          -----------------------------------------------

------- Soil Nitrogen Initialisation ------------------------------------------
     
        - Reading Parameters
     
        - Reading Constants
     Using standard soil mineralisation for soil type Grey Vertosol
     
     
     
           TAV and AMP supplied externally
     
     
     
                      Soil Profile Properties
          ------------------------------------------------
           Layer    pH    OC     NO3     NH4    Urea
                         (%) (kg/ha) (kg/ha) (kg/ha)
          ------------------------------------------------
             1     8.70  1.50   11.72    0.20    0.00
             2     8.80  1.00   11.80    0.21    0.00
             3     7.70  0.60   23.78    0.41    0.00
             4     7.70  0.40   24.64    0.43    0.00
             5     7.10  0.10   25.33    0.44    0.00
             6     5.80  0.07   26.36    0.46    0.00
             7     5.80  0.07   26.36    0.46    0.00
          ------------------------------------------------
           Totals              150.00    2.61    0.00
          ------------------------------------------------
     
     
     
     
     
     
                  Initial Soil Organic Matter Status
          ---------------------------------------------------------
           Layer      Hum-C   Hum-N  Biom-C  Biom-N   FOM-C   FOM-N
                    (kg/ha) (kg/ha) (kg/ha) (kg/ha) (kg/ha) (kg/ha)
          ---------------------------------------------------------
             1      29893.8  2491.2   706.2    88.3   138.9     3.5
             2      20388.8  1699.1   161.2    20.1   108.1     2.7
             3      24742.6  2061.9    97.4    12.2    65.6     1.6
             4      17160.0  1430.0     0.0     0.0    39.8     1.0
             5       4410.0   367.5     0.0     0.0    24.1     0.6
             6       3213.0   267.8     0.0     0.0    14.6     0.4
             7       3213.0   267.8     0.0     0.0     8.9     0.2
          ---------------------------------------------------------
           Totals  103021.3  8585.1   964.7   120.6   400.0    10.0
          ---------------------------------------------------------

------- Cl Initialisation -----------------------------------------------------
     Initialising
     
        - Reading Constants

------- tracker Initialisation ------------------------------------------------
     Tracker variables:
        sum of rain on newmet from sowing to harvesting as incroprain
        sum of rain on newmet from harvesting to sowing  as fallowrain
        sum of es on post from blork to now as es_sum
        sum of runoff on post from blork to now as runoff_sum
        sum of drain on post from blork to now as drainage_sum
        sum of soil_loss on post from blork to now as soil_loss_sum
        sum of dlt_n_min_tot() on post from blork to now as n_mineralisation_sum

------- accum Initialisation --------------------------------------------------
     Initialising

------- Soil Water Initialisation ---------------------------------------------
     
         - Reading constants
     
        - Reading Soil Property Parameters
     
        - Reading Soil Profile Parameters
     Initial soilwater distributed using "sw" parameter.
     
     
     
                      Soil Profile Properties
        ---------------------------------------------------------------------
              Depth  Air_Dry  LL15   Dul    Sat     Sw     BD   Runoff  SWCON
                mm     mm/mm  mm/mm  mm/mm  mm/mm  mm/mm  g/cc    wf
        ---------------------------------------------------------------------
            0.-  150.  0.110  0.220  0.410  0.460  0.220  1.360  0.762  0.300
          150.-  300.  0.176  0.220  0.400  0.450  0.220  1.370  0.190  0.300
          300.-  600.  0.250  0.250  0.400  0.450  0.250  1.380  0.048  0.300
          600.-  900.  0.250  0.250  0.380  0.430  0.250  1.430  0.000  0.300
          900.- 1200.  0.250  0.250  0.370  0.420  0.250  1.470  0.000  0.300
         1200.- 1500.  0.250  0.250  0.340  0.390  0.250  1.530  0.000  0.300
         1500.- 1800.  0.250  0.250  0.340  0.390  0.250  1.530  0.000  0.300
        ---------------------------------------------------------------------
     
     
     
                  Soil Water Holding Capacity
          ---------------------------------------------------------
              Depth    Unavailable Available  Max Avail.  Drainable
                          (LL15)   (SW-LL15)  (DUL-LL15)  (SAT-DUL)
                            mm        mm          mm         mm
          ---------------------------------------------------------
            0.-  150.      33.00       0.00      28.50       7.50
          150.-  300.      33.00       0.00      27.00       7.50
          300.-  600.      75.00       0.00      45.00      15.00
          600.-  900.      75.00       0.00      39.00      15.00
          900.- 1200.      75.00       0.00      36.00      15.00
         1200.- 1500.      75.00       0.00      27.00      15.00
         1500.- 1800.      75.00       0.00      27.00      15.00
          ---------------------------------------------------------
               Totals     441.00       0.00     229.50      90.00
          ---------------------------------------------------------
     
     
     
     
     
     
                  Initial Soil Parameters
          ---------------------------------------------------------
                 Insoil        Salb     Dif_Con   Dif_Slope
          ---------------------------------------------------------
                   0.00        0.12       40.00       16.00
          ---------------------------------------------------------
     
     
     
                  Runoff is predicted using scs curve number:
                Cn2  Cn_Red  Cn_Cov   H_Eff_Depth
                                           mm
          ---------------------------------------------------------
              73.00   20.00    0.80  450.00
          ---------------------------------------------------------
     
     
     
           Using Ritchie evaporation model
            Stage 1 Duration (U): Summer        6.00 (mm)
                                  Winter        4.00 (mm)
            Stage 2       (CONA): Summer        3.50 (mm^0.5)
                                  Winter        2.50 (mm^0.5)
            Critical Dates:       Summer        1-Nov
                                  Winter        1-apr
            Eo from priestly-taylor

------- surface organic matter Initialisation ---------------------------------
     
         - Reading constants
     
         - Reading parameters
     
     
     
                         Initial Surface Organic Matter Data
         ----------------------------------------------------------------------
            Name   Type        Dry matter   C        N        P    Cover  Standing_fr
                                (kg/ha)  (kg/ha)  (kg/ha)  (kg/ha) (0-1)     (0-1)
         ----------------------------------------------------------------------
          wheat_stubwheat         1000.0   400.0     5.0     0.0   0.393     0.0
         ----------------------------------------------------------------------
     
                      Effective Cover from Surface Materials =   0.4
     

------- Erosion Initialisation ------------------------------------------------
      Initialising:
     
        - Reading Parameters
     
     
     
                      Erosion Parameters
          -----------------------------------------------
           Profile reduction:                     off
           Freebairn cover-sediment concentration model
     
           LS factor:                             1.0954
     
           K factor:                              0.4000
     
           P factor:                              1.0000
     
          -----------------------------------------------

------- Soil Nitrogen Initialisation ------------------------------------------
     
        - Reading Parameters
     
        - Reading Constants
     Using standard soil mineralisation for soil type Grey Vertosol
     
     
     
           TAV and AMP supplied externally
     
     
     
                      Soil Profile Properties
          ------------------------------------------------
           Layer    pH    OC     NO3     NH4    Urea
                         (%) (kg/ha) (kg/ha) (kg/ha)
          ------------------------------------------------
             1     8.70  1.50   11.72    0.20    0.00
             2     8.80  1.00   11.80    0.21    0.00
             3     7.70  0.60   23.78    0.41    0.00
             4     7.70  0.40   24.64    0.43    0.00
             5     7.10  0.10   25.33    0.44    0.00
             6     5.80  0.07   26.36    0.46    0.00
             7     5.80  0.07   26.36    0.46    0.00
          ------------------------------------------------
           Totals              150.00    2.61    0.00
          ------------------------------------------------
     
     
     
     
     
     
                  Initial Soil Organic Matter Status
          ---------------------------------------------------------
           Layer      Hum-C   Hum-N  Biom-C  Biom-N   FOM-C   FOM-N
                    (kg/ha) (kg/ha) (kg/ha) (kg/ha) (kg/ha) (kg/ha)
          ---------------------------------------------------------
             1      29893.8  2491.2   706.2    88.3   138.9     3.5
             2      20388.8  1699.1   161.2    20.1   108.1     2.7
             3      24742.6  2061.9    97.4    12.2    65.6     1.6
             4      17160.0  1430.0     0.0     0.0    39.8     1.0
             5       4410.0   367.5     0.0     0.0    24.1     0.6
             6       3213.0   267.8     0.0     0.0    14.6     0.4
             7       3213.0   267.8     0.0     0.0     8.9     0.2
          ---------------------------------------------------------
           Totals  103021.3  8585.1   964.7   120.6   400.0    10.0
          ---------------------------------------------------------

------- Cl Initialisation -----------------------------------------------------
     Initialising
     
        - Reading Constants

------- tracker Initialisation ------------------------------------------------
     Tracker variables:
        sum of rain on newmet from sowing to harvesting as incroprain
        sum of rain on newmet from harvesting to sowing  as fallowrain
        sum of es on post from blork to now as es_sum
        sum of runoff on post from blork to now as runoff_sum
        sum of drain on post from blork to now as drainage_sum
        sum of soil_loss on post from blork to now as soil_loss_sum
        sum of dlt_n_min_tot() on post from blork to now as n_mineralisation_sum

------- accum Initialisation --------------------------------------------------
     Initialising

------- Soil Water Initialisation ---------------------------------------------
     
         - Reading constants
     
        - Reading Soil Property Parameters
     
        - Reading Soil Profile Parameters
     Initial soilwater distributed using "sw" parameter.
     
     
     
                      Soil Profile Properties
        ---------------------------------------------------------------------
              Depth  Air_Dry  LL15   Dul    Sat     Sw     BD   Runoff  SWCON
                mm     mm/mm  mm/mm  mm/mm  mm/mm  mm/mm  g/cc    wf
        ---------------------------------------------------------------------
            0.-  150.  0.110  0.220  0.410  0.460  0.220  1.360  0.762  0.300
          150.-  300.  0.176  0.220  0.400  0.450  0.220  1.370  0.190  0.300
          300.-  600.  0.250  0.250  0.400  0.450  0.250  1.380  0.048  0.300
          600.-  900.  0.250  0.250  0.380  0.430  0.250  1.430  0.000  0.300
          900.- 1200.  0.250  0.250  0.370  0.420  0.250  1.470  0.000  0.300
         1200.- 1500.  0.250  0.250  0.340  0.390  0.250  1.530  0.000  0.300
         1500.- 1800.  0.250  0.250  0.340  0.390  0.250  1.530  0.000  0.300
        ---------------------------------------------------------------------
     
     
     
                  Soil Water Holding Capacity
          ---------------------------------------------------------
              Depth    Unavailable Available  Max Avail.  Drainable
                          (LL15)   (SW-LL15)  (DUL-LL15)  (SAT-DUL)
                            mm        mm          mm         mm
          ---------------------------------------------------------
            0.-  150.      33.00       0.00      28.50       7.50
          150.-  300.      33.00       0.00      27.00       7.50
          300.-  600.      75.00       0.00      45.00      15.00
          600.-  900.      75.00       0.00      39.00      15.00
          900.- 1200.      75.00       0.00      36.00      15.00
         1200.- 1500.      75.00       0.00      27.00      15.00
         1500.- 1800.      75.00       0.00      27.00      15.00
          ---------------------------------------------------------
               Totals     441.00       0.00     229.50      90.00
          ---------------------------------------------------------
     
     
     
     
     
     
                  Initial Soil Parameters
          ---------------------------------------------------------
                 Insoil        Salb     Dif_Con   Dif_Slope
          ---------------------------------------------------------
                   0.00        0.12       40.00       16.00
          ---------------------------------------------------------
     
     
     
                  Runoff is predicted using scs curve number:
                Cn2  Cn_Red  Cn_Cov   H_Eff_Depth
                                           mm
          ---------------------------------------------------------
              73.00   20.00    0.80  450.00
          ---------------------------------------------------------
     
     
     
           Using Ritchie evaporation model
            Stage 1 Duration (U): Summer        6.00 (mm)
                                  Winter        4.00 (mm)
            Stage 2       (CONA): Summer        3.50 (mm^0.5)
                                  Winter        2.50 (mm^0.5)
            Critical Dates:       Summer        1-Nov
                                  Winter        1-apr
            Eo from priestly-taylor

------- surface organic matter Initialisation ---------------------------------
     
         - Reading constants
     
         - Reading parameters
     
     
     
                         Initial Surface Organic Matter Data
         ----------------------------------------------------------------------
            Name   Type        Dry matter   C        N        P    Cover  Standing_fr
                                (kg/ha)  (kg/ha)  (kg/ha)  (kg/ha) (0-1)     (0-1)
         ----------------------------------------------------------------------
          wheat_stubwheat         1000.0   400.0     5.0     0.0   0.393     0.0
         ----------------------------------------------------------------------
     
                      Effective Cover from Surface Materials =   0.4
     

------- Erosion Initialisation ------------------------------------------------
      Initialising:
     
        - Reading Parameters
     
     
     
                      Erosion Parameters
          -----------------------------------------------
           Profile reduction:                     off
           Freebairn cover-sediment concentration model
     
           LS factor:                             1.0954
     
           K factor:                              0.4000
     
           P factor:                              1.0000
     
          -----------------------------------------------

------- Soil Nitrogen Initialisation ------------------------------------------
     
        - Reading Parameters
     
        - Reading Constants
     Using standard soil mineralisation for soil type Grey Vertosol
     
     
     
           TAV and AMP supplied externally
     
     
     
                      Soil Profile Properties
          ------------------------------------------------
           Layer    pH    OC     NO3     NH4    Urea
                         (%) (kg/ha) (kg/ha) (kg/ha)
          ------------------------------------------------
             1     8.70  1.50   11.72    0.20    0.00
             2     8.80  1.00   11.80    0.21    0.00
             3     7.70  0.60   23.78    0.41    0.00
             4     7.70  0.40   24.64    0.43    0.00
             5     7.10  0.10   25.33    0.44    0.00
             6     5.80  0.07   26.36    0.46    0.00
             7     5.80  0.07   26.36    0.46    0.00
          ------------------------------------------------
           Totals              150.00    2.61    0.00
          ------------------------------------------------
     
     
     
     
     
     
                  Initial Soil Organic Matter Status
          ---------------------------------------------------------
           Layer      Hum-C   Hum-N  Biom-C  Biom-N   FOM-C   FOM-N
                    (kg/ha) (kg/ha) (kg/ha) (kg/ha) (kg/ha) (kg/ha)
          ---------------------------------------------------------
             1      29893.8  2491.2   706.2    88.3   138.9     3.5
             2      20388.8  1699.1   161.2    20.1   108.1     2.7
             3      24742.6  2061.9    97.4    12.2    65.6     1.6
             4      17160.0  1430.0     0.0     0.0    39.8     1.0
             5       4410.0   367.5     0.0     0.0    24.1     0.6
             6       3213.0   267.8     0.0     0.0    14.6     0.4
             7       3213.0   267.8     0.0     0.0     8.9     0.2
          ---------------------------------------------------------
           Totals  103021.3  8585.1   964.7   120.6   400.0    10.0
          ---------------------------------------------------------

------- Cl Initialisation -----------------------------------------------------
     Initialising
     
        - Reading Constants

------- tracker Initialisation ------------------------------------------------
     Tracker variables:
        sum of rain on newmet from sowing to harvesting as incroprain
        sum of rain on newmet from harvesting to sowing  as fallowrain
        sum of es on post from blork to now as es_sum
        sum of runoff on post from blork to now as runoff_sum
        sum of drain on post from blork to now as drainage_sum
        sum of soil_loss on post from blork to now as soil_loss_sum
        sum of dlt_n_min_tot() on post from blork to now as n_mineralisation_sum

------- accum Initialisation --------------------------------------------------
     Initialising

------- Soil Water Initialisation ---------------------------------------------
     
         - Reading constants
     
        - Reading Soil Property Parameters
     
        - Reading Soil Profile Parameters
     Initial soilwater distributed using "sw" parameter.
     
     
     
                      Soil Profile Properties
        ---------------------------------------------------------------------
              Depth  Air_Dry  LL15   Dul    Sat     Sw     BD   Runoff  SWCON
                mm     mm/mm  mm/mm  mm/mm  mm/mm  mm/mm  g/cc    wf
        ---------------------------------------------------------------------
            0.-  150.  0.110  0.220  0.410  0.460  0.220  1.360  0.762  0.300
          150.-  300.  0.176  0.220  0.400  0.450  0.220  1.370  0.190  0.300
          300.-  600.  0.250  0.250  0.400  0.450  0.250  1.380  0.048  0.300
          600.-  900.  0.250  0.250  0.380  0.430  0.250  1.430  0.000  0.300
          900.- 1200.  0.250  0.250  0.370  0.420  0.250  1.470  0.000  0.300
         1200.- 1500.  0.250  0.250  0.340  0.390  0.250  1.530  0.000  0.300
         1500.- 1800.  0.250  0.250  0.340  0.390  0.250  1.530  0.000  0.300
        ---------------------------------------------------------------------
     
     
     
                  Soil Water Holding Capacity
          ---------------------------------------------------------
              Depth    Unavailable Available  Max Avail.  Drainable
                          (LL15)   (SW-LL15)  (DUL-LL15)  (SAT-DUL)
                            mm        mm          mm         mm
          ---------------------------------------------------------
            0.-  150.      33.00       0.00      28.50       7.50
          150.-  300.      33.00       0.00      27.00       7.50
          300.-  600.      75.00       0.00      45.00      15.00
          600.-  900.      75.00       0.00      39.00      15.00
          900.- 1200.      75.00       0.00      36.00      15.00
         1200.- 1500.      75.00       0.00      27.00      15.00
         1500.- 1800.      75.00       0.00      27.00      15.00
          ---------------------------------------------------------
               Totals     441.00       0.00     229.50      90.00
          ---------------------------------------------------------
     
     
     
     
     
     
                  Initial Soil Parameters
          ---------------------------------------------------------
                 Insoil        Salb     Dif_Con   Dif_Slope
          ---------------------------------------------------------
                   0.00        0.12       40.00       16.00
          ---------------------------------------------------------
     
     
     
                  Runoff is predicted using scs curve number:
                Cn2  Cn_Red  Cn_Cov   H_Eff_Depth
                                           mm
          ---------------------------------------------------------
              73.00   20.00    0.80  450.00
          ---------------------------------------------------------
     
     
     
           Using Ritchie evaporation model
            Stage 1 Duration (U): Summer        6.00 (mm)
                                  Winter        4.00 (mm)
            Stage 2       (CONA): Summer        3.50 (mm^0.5)
                                  Winter        2.50 (mm^0.5)
            Critical Dates:       Summer        1-Nov
                                  Winter        1-apr
            Eo from priestly-taylor

------- surface organic matter Initialisation ---------------------------------
     
         - Reading constants
     
         - Reading parameters
     
     
     
                         Initial Surface Organic Matter Data
         ----------------------------------------------------------------------
            Name   Type        Dry matter   C        N        P    Cover  Standing_fr
                                (kg/ha)  (kg/ha)  (kg/ha)  (kg/ha) (0-1)     (0-1)
         ----------------------------------------------------------------------
          wheat_stubwheat         1000.0   400.0     5.0     0.0   0.393     0.0
         ----------------------------------------------------------------------
     
                      Effective Cover from Surface Materials =   0.4
     

------- Erosion Initialisation ------------------------------------------------
      Initialising:
     
        - Reading Parameters
     
     
     
                      Erosion Parameters
          -----------------------------------------------
           Profile reduction:                     off
           Freebairn cover-sediment concentration model
     
           LS factor:                             1.0954
     
           K factor:                              0.4000
     
           P factor:                              1.0000
     
          -----------------------------------------------

------- Soil Nitrogen Initialisation ------------------------------------------
     
        - Reading Parameters
     
        - Reading Constants
     Using standard soil mineralisation for soil type Grey Vertosol
     
     
     
           TAV and AMP supplied externally
     
     
     
                      Soil Profile Properties
          ------------------------------------------------
           Layer    pH    OC     NO3     NH4    Urea
                         (%) (kg/ha) (kg/ha) (kg/ha)
          ------------------------------------------------
             1     8.70  1.50   11.72    0.20    0.00
             2     8.80  1.00   11.80    0.21    0.00
             3     7.70  0.60   23.78    0.41    0.00
             4     7.70  0.40   24.64    0.43    0.00
             5     7.10  0.10   25.33    0.44    0.00
             6     5.80  0.07   26.36    0.46    0.00
             7     5.80  0.07   26.36    0.46    0.00
          ------------------------------------------------
           Totals              150.00    2.61    0.00
          ------------------------------------------------
     
     
     
     
     
     
                  Initial Soil Organic Matter Status
          ---------------------------------------------------------
           Layer      Hum-C   Hum-N  Biom-C  Biom-N   FOM-C   FOM-N
                    (kg/ha) (kg/ha) (kg/ha) (kg/ha) (kg/ha) (kg/ha)
          ---------------------------------------------------------
             1      29893.8  2491.2   706.2    88.3   138.9     3.5
             2      20388.8  1699.1   161.2    20.1   108.1     2.7
             3      24742.6  2061.9    97.4    12.2    65.6     1.6
             4      17160.0  1430.0     0.0     0.0    39.8     1.0
             5       4410.0   367.5     0.0     0.0    24.1     0.6
             6       3213.0   267.8     0.0     0.0    14.6     0.4
             7       3213.0   267.8     0.0     0.0     8.9     0.2
          ---------------------------------------------------------
           Totals  103021.3  8585.1   964.7   120.6   400.0    10.0
          ---------------------------------------------------------

------- Cl Initialisation -----------------------------------------------------
     Initialising
     
        - Reading Constants

------- tracker Initialisation ------------------------------------------------
     Tracker variables:
        sum of rain on newmet from sowing to harvesting as incroprain
        sum of rain on newmet from harvesting to sowing  as fallowrain
        sum of es on post from blork to now as es_sum
        sum of runoff on post from blork to now as runoff_sum
        sum of drain on post from blork to now as drainage_sum
        sum of soil_loss on post from blork to now as soil_loss_sum
        sum of dlt_n_min_tot() on post from blork to now as n_mineralisation_sum

------- accum Initialisation --------------------------------------------------
     Initialising

------- Soil Water Initialisation ---------------------------------------------
     
         - Reading constants
     
        - Reading Soil Property Parameters
     
        - Reading Soil Profile Parameters
     Initial soilwater distributed using "sw" parameter.
     
     
     
                      Soil Profile Properties
        ---------------------------------------------------------------------
              Depth  Air_Dry  LL15   Dul    Sat     Sw     BD   Runoff  SWCON
                mm     mm/mm  mm/mm  mm/mm  mm/mm  mm/mm  g/cc    wf
        ---------------------------------------------------------------------
            0.-  150.  0.110  0.220  0.410  0.460  0.220  1.360  0.762  0.300
          150.-  300.  0.176  0.220  0.400  0.450  0.220  1.370  0.190  0.300
          300.-  600.  0.250  0.250  0.400  0.450  0.250  1.380  0.048  0.300
          600.-  900.  0.250  0.250  0.380  0.430  0.250  1.430  0.000  0.300
          900.- 1200.  0.250  0.250  0.370  0.420  0.250  1.470  0.000  0.300
         1200.- 1500.  0.250  0.250  0.340  0.390  0.250  1.530  0.000  0.300
         1500.- 1800.  0.250  0.250  0.340  0.390  0.250  1.530  0.000  0.300
        ---------------------------------------------------------------------
     
     
     
                  Soil Water Holding Capacity
          ---------------------------------------------------------
              Depth    Unavailable Available  Max Avail.  Drainable
                          (LL15)   (SW-LL15)  (DUL-LL15)  (SAT-DUL)
                            mm        mm          mm         mm
          ---------------------------------------------------------
            0.-  150.      33.00       0.00      28.50       7.50
          150.-  300.      33.00       0.00      27.00       7.50
          300.-  600.      75.00       0.00      45.00      15.00
          600.-  900.      75.00       0.00      39.00      15.00
          900.- 1200.      75.00       0.00      36.00      15.00
         1200.- 1500.      75.00       0.00      27.00      15.00
         1500.- 1800.      75.00       0.00      27.00      15.00
          ---------------------------------------------------------
               Totals     441.00       0.00     229.50      90.00
          ---------------------------------------------------------
     
     
     
     
     
     
                  Initial Soil Parameters
          ---------------------------------------------------------
                 Insoil        Salb     Dif_Con   Dif_Slope
          ---------------------------------------------------------
                   0.00        0.12       40.00       16.00
          ---------------------------------------------------------
     
     
     
                  Runoff is predicted using scs curve number:
                Cn2  Cn_Red  Cn_Cov   H_Eff_Depth
                                           mm
          ---------------------------------------------------------
              73.00   20.00    0.80  450.00
          ---------------------------------------------------------
     
     
     
           Using Ritchie evaporation model
            Stage 1 Duration (U): Summer        6.00 (mm)
                                  Winter        4.00 (mm)
            Stage 2       (CONA): Summer        3.50 (mm^0.5)
                                  Winter        2.50 (mm^0.5)
            Critical Dates:       Summer        1-Nov
                                  Winter        1-apr
            Eo from priestly-taylor

------- surface organic matter Initialisation ---------------------------------
     
         - Reading constants
     
         - Reading parameters
     
     
     
                         Initial Surface Organic Matter Data
         ----------------------------------------------------------------------
            Name   Type        Dry matter   C        N        P    Cover  Standing_fr
                                (kg/ha)  (kg/ha)  (kg/ha)  (kg/ha) (0-1)     (0-1)
         ----------------------------------------------------------------------
          wheat_stubwheat         1000.0   400.0     5.0     0.0   0.393     0.0
         ----------------------------------------------------------------------
     
                      Effective Cover from Surface Materials =   0.4
     

------- Erosion Initialisation ------------------------------------------------
      Initialising:
     
        - Reading Parameters
     
     
     
                      Erosion Parameters
          -----------------------------------------------
           Profile reduction:                     off
           Freebairn cover-sediment concentration model
     
           LS factor:                             1.0954
     
           K factor:                              0.4000
     
           P factor:                              1.0000
     
          -----------------------------------------------

------- Soil Nitrogen Initialisation ------------------------------------------
     
        - Reading Parameters
     
        - Reading Constants
     Using standard soil mineralisation for soil type Grey Vertosol
     
     
     
           TAV and AMP supplied externally
     
     
     
                      Soil Profile Properties
          ------------------------------------------------
           Layer    pH    OC     NO3     NH4    Urea
                         (%) (kg/ha) (kg/ha) (kg/ha)
          ------------------------------------------------
             1     8.70  1.50   11.72    0.20    0.00
             2     8.80  1.00   11.80    0.21    0.00
             3     7.70  0.60   23.78    0.41    0.00
             4     7.70  0.40   24.64    0.43    0.00
             5     7.10  0.10   25.33    0.44    0.00
             6     5.80  0.07   26.36    0.46    0.00
             7     5.80  0.07   26.36    0.46    0.00
          ------------------------------------------------
           Totals              150.00    2.61    0.00
          ------------------------------------------------
     
     
     
     
     
     
                  Initial Soil Organic Matter Status
          ---------------------------------------------------------
           Layer      Hum-C   Hum-N  Biom-C  Biom-N   FOM-C   FOM-N
                    (kg/ha) (kg/ha) (kg/ha) (kg/ha) (kg/ha) (kg/ha)
          ---------------------------------------------------------
             1      29893.8  2491.2   706.2    88.3   138.9     3.5
             2      20388.8  1699.1   161.2    20.1   108.1     2.7
             3      24742.6  2061.9    97.4    12.2    65.6     1.6
             4      17160.0  1430.0     0.0     0.0    39.8     1.0
             5       4410.0   367.5     0.0     0.0    24.1     0.6
             6       3213.0   267.8     0.0     0.0    14.6     0.4
             7       3213.0   267.8     0.0     0.0     8.9     0.2
          ---------------------------------------------------------
           Totals  103021.3  8585.1   964.7   120.6   400.0    10.0
          ---------------------------------------------------------

------- Cl Initialisation -----------------------------------------------------
     Initialising
     
        - Reading Constants

------- tracker Initialisation ------------------------------------------------
     Tracker variables:
        sum of rain on newmet from sowing to harvesting as incroprain
        sum of rain on newmet from harvesting to sowing  as fallowrain
        sum of es on post from blork to now as es_sum
        sum of runoff on post from blork to now as runoff_sum
        sum of drain on post from blork to now as drainage_sum
        sum of soil_loss on post from blork to now as soil_loss_sum
        sum of dlt_n_min_tot() on post from blork to now as n_mineralisation_sum
------- Start of simulation  --------------------------------------------------
     Establishing Sward
     Initial conditions:
       Basal area :    2.50 %
       Pools:
                root     stem     leaf
             +--------+--------+--------+
      green  |    300.0   1000.0   1000.0
      dead   |    100.0    750.0    750.0
             +--------+--------+--------+
       Root depth :   750.0 mm
       Using vpd approximated from maxt, mint.
       NB. Pan evap approximated from eo
     Establishing Sward
     Initial conditions:
       Basal area :    2.50 %
       Pools:
                root     stem     leaf
             +--------+--------+--------+
      green  |    300.0   1000.0   1000.0
      dead   |    100.0    750.0    750.0
             +--------+--------+--------+
       Root depth :   750.0 mm
       Using vpd approximated from maxt, mint.
       NB. Pan evap approximated from eo
     01/01/1980: animals:In: mob mob1 is class steers, weight=250
     01/01/1980: animals:moveStockTo mob=mob1 from=. to=BuffelPaddock.buffel wt=250 sr=0.05
     01/01/1980: animals:In: mob mob2 is class steers, weight=250
     01/01/1980: animals:moveStockTo mob=mob2 from=. to=BuffelPaddock.buffel wt=250 sr=0.05
     01/01/1980: animals:In: mob mob3 is class steers, weight=300
     01/01/1980: animals:moveStockTo mob=mob3 from=. to=BuffelPaddock.buffel wt=300 sr=0.05
     01/01/1980: animals:In: mob mob4 is class steers, weight=300
     01/01/1980: animals:moveStockTo mob=mob4 from=. to=BuffelPaddock.buffel wt=300 sr=0.05
     01/01/1980: animals:In: mob mob5 is class steers, weight=325
     01/01/1980: animals:moveStockTo mob=mob5 from=. to=BuffelPaddock.buffel wt=325 sr=0.05
     01/01/1980: animals:In: mob mob6 is class steers, weight=325
     01/01/1980: animals:moveStockTo mob=mob6 from=. to=BuffelPaddock.buffel wt=325 sr=0.05
     01/01/1980: animals:In: mob mob7 is class steers, weight=350
     01/01/1980: animals:moveStockTo mob=mob7 from=. to=BuffelPaddock.buffel wt=350 sr=0.05
     01/01/1980: animals:In: mob mob8 is class steers, weight=350
     01/01/1980: animals:moveStockTo mob=mob8 from=. to=BuffelPaddock.buffel wt=350 sr=0.05
     01/01/1980: animals:In: mob mob9 is class steers, weight=400
     01/01/1980: animals:moveStockTo mob=mob9 from=. to=BuffelPaddock.buffel wt=400 sr=0.05
     01/01/1980: animals:In: mob mob10 is class steers, weight=400
     01/01/1980: animals:moveStockTo mob=mob10 from=. to=BuffelPaddock.buffel wt=400 sr=0.05
     deleting CQ Mixed GG.GrainCrops.[xml,nc]
     Machinery:
Tractors=tractor1 tractor_2
Implements=planter sprayrig
     Manager sending message :- buffel establish  init_section = establishment
     Establishing Sward
     Initial conditions:
       Basal area :    2.50 %
       Pools:
                root     stem     leaf
             +--------+--------+--------+
      green  |    300.0   1000.0   1000.0
      dead   |    100.0    750.0    750.0
             +--------+--------+--------+
       Root depth :   750.0 mm
       Using vpd approximated from maxt, mint.
       NB. Pan evap approximated from eo
     Manager creating a new local real variable : pasture_in = 1.00000
     Manager sending message :- leucaena establish  init_section = establishment
     Establishing Sward
     Initial conditions:
       Basal area :    2.50 %
       Pools:
                root     stem     leaf
             +--------+--------+--------+
      green  |    300.0   1000.0   1000.0
      dead   |    100.0    750.0    750.0
             +--------+--------+--------+
       Root depth :   750.0 mm
       Using vpd approximated from maxt, mint.
       NB. Pan evap approximated from eo
     Manager creating a new local real variable : sowingoats = 0.00000
     Manager creating a new local real variable : sowingsorghum = 0.00000
1 January 1980(Day of year=1): 
     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      APSIM Warning Error
                      -------------------
     Uninitialised variable "fallowin".
     Variables should have a value before they are used in an expression.
     Component name: Sow using a variable rule
     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     
     
     Manager creating a new local real variable : fallowin = 0.00000
     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      APSIM Warning Error
                      -------------------
     Uninitialised variable "nextcrop".
     Variables should have a value before they are used in an expression.
     Component name: Sow using a variable rule
     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     
     
     Manager creating a new local real variable : nextcrop = 0.00000
     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      APSIM Warning Error
                      -------------------
     Uninitialised variable "num_days_grazed".
     Variables should have a value before they are used in an expression.
     Component name: Sow using a variable rule
     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     
     
     Manager creating a new local real variable : num_days_grazed = 0.00000
28 February 1980(Day of year=59), Farm Manager: 
     28/02/1980: animals:Out: removing 100 of mob mob9 (steers)  at 451 kg
     28/02/1980: animals:Out: mob mob9 is gone
     28/02/1980: animals:In: mob mob9 is class steers, weight=250
     28/02/1980: animals:moveStockTo mob=mob9 from=. to=BuffelPaddock.buffel wt=250 sr=0.05
     28/02/1980: animals:Out: removing 100 of mob mob10 (steers)  at 451 kg
     28/02/1980: animals:Out: mob mob10 is gone
     28/02/1980: animals:In: mob mob10 is class steers, weight=250
     28/02/1980: animals:moveStockTo mob=mob10 from=. to=BuffelPaddock.buffel wt=250 sr=0.05
11 March 1980(Day of year=71), Farm Manager: 
     Weeds germinating in CropPaddock1
     Weeds germinating in CropPaddock2
     Weeds germinating in CropPaddock3
     Weeds germinating in CropPaddock4
     Weeds germinating in CropPaddock5
12 March 1980(Day of year=72), Oats Sowing rule: 
     Manager creating a new local string variable : choosenextcrop = yes
     Manager sending message :- oats sow  plants = 100, sowing_depth = 30, cultivar = coolibah, row_spacing = 250, skip = solid
12 March 1980(Day of year=72), oats: 
     Crop Sow
        ------------------------------------------------
        cultivar                   = coolibah
        Phases:
           out
           sowing
           germination
           emergence
           end_of_juvenile
           floral_initiation
           flowering
              tt_flowering               =     120 (dd)
           start_grain_fill
              tt_start_grain_fill        =     545 (dd)
           end_grain_fill
              tt_end_grain_fill          =      35 (dd)
           maturity
              tt_maturity                =       1 (dd)
           harvest_ripe
              tt_harvest_ripe            =    1000 (dd)
           end_crop
     
        grains_per_gram_stem           =       25.0 (/g)
        potential_grain_filling_rate   =     0.0010 (g/grain/day)
        potential_grain_growth_rate    =     0.0010 (g/grain/day)
        max_grain_size                 =     0.0410 (g)
        ------------------------------------------------
     
     
                        Root Profile
         -----------------------------------------------
          Layer       Kl           Lower    Exploration
          Depth     Factor         Limit      Factor
          (mm)         ()        (mm/mm)       (0-1)
         -----------------------------------------------
         150.0     0.060          0.220       1.000
         150.0     0.060          0.220       1.000
         300.0     0.060          0.240       1.000
         300.0     0.040          0.260       1.000
         300.0     0.040          0.290       1.000
         300.0     0.020          0.300       1.000
         300.0     0.020          0.340       1.000
         -----------------------------------------------
         Extractable SW:   217mm in  1800mm total depth ( 12%).
         Crop factor for bounding water use is set to   1.2 times eo.
      stage 1.0 sowing
     
                      Crop Sowing Data
         ------------------------------------------------
         Sowing  Depth Plants Spacing Skip  Skip  Cultivar
         Day no   mm     m^2     mm   row   plant name
         ------------------------------------------------
             72   30.0  100.0  250.0   0.0   0.0 coolibah
         ------------------------------------------------
     
     Manager creating a new local real variable : cuts = 0.00000
12 March 1980(Day of year=72), Sowing fertiliser: 
     Manager sending message :- fertiliser apply  amount = 50 (kg/ha), depth = 50 (mm), type = urea_n
12 March 1980(Day of year=72), fertiliser: 
     
   - Reading Fertiliser Type Parameters
        50.00 of N as urea (urea_n)
                                         added at depth   50.00 (layer   1)
13 March 1980(Day of year=73), oats: 
      stage 2.0 germination
16 March 1980(Day of year=76), oats: 
      stage 3.0 emergence
                     biomass =           0.46 (g/m^2)   lai          =   0.008 (m^2/m^2)
                     stover N conc =     5.85 (%)    extractable sw =   21.53 (mm)
17 March 1980(Day of year=77), oats: 
      stage 4.0 end_of_juvenile
                     biomass =           0.54 (g/m^2)   lai          =   0.010 (m^2/m^2)
                     stover N conc =     5.91 (%)    extractable sw =   20.96 (mm)
22 March 1980(Day of year=82), Farm Manager: 
     Weeds die in CropPaddock1
     Weeds die in CropPaddock2
     Weeds die in CropPaddock3
     Weeds die in CropPaddock4
     Weeds die in CropPaddock5
16 April 1980(Day of year=107), Farm Manager: 
     16/04/1980: animals:moveStockTo mob=mob7 from=BuffelPaddock.buffel to=OatsPaddock.oats wt=423 sr=0.33
17 April 1980(Day of year=108), Farm Manager: 
     17/04/1980: animals:moveStockTo mob=mob8 from=BuffelPaddock.buffel to=OatsPaddock.oats wt=423 sr=0.33
18 April 1980(Day of year=109), Farm Manager: 
     18/04/1980: animals:moveStockTo mob=mob5 from=BuffelPaddock.buffel to=OatsPaddock.oats wt=399 sr=0.33
28 May 1980(Day of year=149), Farm Manager: 
     28/05/1980: animals:Out: removing 100 of mob mob7 (steers)  at 450 kg
     28/05/1980: animals:Out: mob mob7 is gone
     28/05/1980: animals:In: mob mob7 is class steers, weight=250
     28/05/1980: animals:moveStockTo mob=mob7 from=. to=BuffelPaddock.buffel wt=250 sr=0.05
     28/05/1980: animals:Out: removing 100 of mob mob8 (steers)  at 450 kg
     28/05/1980: animals:Out: mob mob8 is gone
     28/05/1980: animals:In: mob mob8 is class steers, weight=250
     28/05/1980: animals:moveStockTo mob=mob8 from=. to=BuffelPaddock.buffel wt=250 sr=0.05
     Weeds germinating in CropPaddock1
     Weeds germinating in CropPaddock2
     Weeds germinating in CropPaddock3
     Weeds germinating in CropPaddock4
     Weeds germinating in CropPaddock5
29 May 1980(Day of year=150), Farm Manager: 
     29/05/1980: animals:moveStockTo mob=mob6 from=BuffelPaddock.buffel to=OatsPaddock.oats wt=417 sr=0.33
30 May 1980(Day of year=151), Farm Manager: 
     30/05/1980: animals:moveStockTo mob=mob3 from=BuffelPaddock.buffel to=OatsPaddock.oats wt=392 sr=0.33
4 June 1980(Day of year=156), oats: 
      stage 5.0 floral_initiation
                     biomass =         482.41 (g/m^2)   lai          =   7.990 (m^2/m^2)
                     stover N conc =     2.00 (%)    extractable sw =  132.01 (mm)
16 June 1980(Day of year=168), Machinery: 
     Machinery job "tractor1 + sprayrig" is queued
16 June 1980(Day of year=168), Farm Manager: 
     Weeds mature in CropPaddock1 - sprayed out.
     Machinery job "tractor1 + sprayrig" is queued
     Weeds mature in CropPaddock2 - sprayed out.
     Machinery job "tractor1 + sprayrig" is queued
     Weeds mature in CropPaddock3 - sprayed out.
     Machinery job "tractor1 + sprayrig" is queued
     Weeds mature in CropPaddock4 - sprayed out.
     Machinery job "tractor1 + sprayrig" is queued
     Weeds mature in CropPaddock5 - sprayed out.
     Machinery job 'tractor1 + sprayrig' in croppaddock1 has finished
17 June 1980(Day of year=169), Machinery: 
     Machinery job 'tractor1 + sprayrig' in croppaddock2 has finished
18 June 1980(Day of year=170), Machinery: 
     Machinery job 'tractor1 + sprayrig' in croppaddock3 has finished
19 June 1980(Day of year=171), Machinery: 
     Machinery job 'tractor1 + sprayrig' in croppaddock4 has finished
20 June 1980(Day of year=172), Machinery: 
     Machinery job 'tractor1 + sprayrig' in croppaddock5 has finished
27 June 1980(Day of year=179), Farm Manager: 
     27/06/1980: animals:Out: removing 100 of mob mob5 (steers)  at 450 kg
     27/06/1980: animals:Out: mob mob5 is gone
     27/06/1980: animals:In: mob mob5 is class steers, weight=250
     27/06/1980: animals:moveStockTo mob=mob5 from=. to=BuffelPaddock.buffel wt=250 sr=0.05
28 June 1980(Day of year=180), Farm Manager: 
     28/06/1980: animals:moveStockTo mob=mob4 from=BuffelPaddock.buffel to=OatsPaddock.oats wt=396 sr=0.33
7 July 1980(Day of year=189), Farm Manager: 
     07/07/1980: animals:Out: removing 100 of mob mob6 (steers)  at 450 kg
     07/07/1980: animals:Out: mob mob6 is gone
     07/07/1980: animals:In: mob mob6 is class steers, weight=250
     07/07/1980: animals:moveStockTo mob=mob6 from=. to=BuffelPaddock.buffel wt=250 sr=0.05
8 July 1980(Day of year=190), Farm Manager: 
     08/07/1980: animals:moveStockTo mob=mob1 from=BuffelPaddock.buffel to=OatsPaddock.oats wt=347 sr=0.33
19 July 1980(Day of year=201), oats: 
      stage 6.0 flowering
                     biomass =         949.28 (g/m^2)   lai          =   6.897 (m^2/m^2)
                     stover N conc =     0.96 (%)    extractable sw =   60.29 (mm)
29 July 1980(Day of year=211), oats: 
      stage 7.0 start_grain_fill
                     biomass =        1061.16 (g/m^2)   lai          =   6.579 (m^2/m^2)
                     stover N conc =     0.69 (%)    extractable sw =   39.33 (mm)
5 August 1980(Day of year=218), Farm Manager: 
     05/08/1980: animals:Out: removing 100 of mob mob3 (steers)  at 450 kg
     05/08/1980: animals:Out: mob mob3 is gone
     05/08/1980: animals:In: mob mob3 is class steers, weight=250
     05/08/1980: animals:moveStockTo mob=mob3 from=. to=BuffelPaddock.buffel wt=250 sr=0.05
6 August 1980(Day of year=219), Farm Manager: 
     06/08/1980: animals:moveStockTo mob=mob2 from=BuffelPaddock.buffel to=OatsPaddock.oats wt=350 sr=0.33
29 August 1980(Day of year=242), Farm Manager: 
     29/08/1980: animals:Out: removing 100 of mob mob4 (steers)  at 450 kg
     29/08/1980: animals:Out: mob mob4 is gone
     29/08/1980: animals:In: mob mob4 is class steers, weight=250
     29/08/1980: animals:moveStockTo mob=mob4 from=. to=BuffelPaddock.buffel wt=250 sr=0.05
30 August 1980(Day of year=243), Farm Manager: 
     30/08/1980: animals:moveStockTo mob=mob9 from=BuffelPaddock.buffel to=OatsPaddock.oats wt=302 sr=0.33
1 September 1980(Day of year=245), oats: 
      stage 8.0 end_grain_fill
                     biomass =        1172.06 (g/m^2)   lai          =   4.695 (m^2/m^2)
                     stover N conc =     0.31 (%)    extractable sw =   10.61 (mm)
2 September 1980(Day of year=246), endcrop: 
     Manager sending message :- oats end_crop
2 September 1980(Day of year=246), oats: 
     Crop ended. Yield (dw) =  2367.5  (kg/ha)
         Organic matter from crop:-      Tops to surface residue      Roots to soil FOM
                          DM (kg/ha) =               11711.9                  2363.4
                          N  (kg/ha) =                  87.95                   23.74
     
2 September 1980(Day of year=246), soil Nitrogen: 
     
        - Reading Parameters
     
        - Reading Constants
     Using standard soil mineralisation for soil type Grey Vertosol
2 September 1980(Day of year=246), surface organic matter: 
     
         - Reading constants
     
         - Reading parameters
     
     
     
                         Initial Surface Organic Matter Data
         ----------------------------------------------------------------------
            Name   Type        Dry matter   C        N        P    Cover  Standing_fr
                                (kg/ha)  (kg/ha)  (kg/ha)  (kg/ha) (0-1)     (0-1)
         ----------------------------------------------------------------------
          wheat_stubwheat         1000.0   400.0     5.0     0.0   0.393     0.0
         ----------------------------------------------------------------------
     
                      Effective Cover from Surface Materials =   0.4
     
     Manager creating a new local real variable : delta_dm = 0.00000
3 September 1980(Day of year=247), Farm Manager: 
     03/09/1980: animals:moveStockTo mob=mob1 from=OatsPaddock.oats to=LeucaenaGrassPaddock.leucaena wt=395 sr=0.17
     03/09/1980: animals:moveStockTo mob=mob2 from=OatsPaddock.oats to=LeucaenaGrassPaddock.leucaena wt=373 sr=0.17
     03/09/1980: animals:moveStockTo mob=mob9 from=OatsPaddock.oats to=LeucaenaGrassPaddock.leucaena wt=303 sr=0.17
18 October 1980(Day of year=292), Farm Manager: 
     Weeds germinating in CropPaddock1
     Weeds germinating in CropPaddock2
     Weeds germinating in CropPaddock3
     Weeds germinating in CropPaddock4
     Weeds germinating in CropPaddock5
19 October 1980(Day of year=293), Sow using a variable rule: 
     Manager creating a new local string variable : choosenextcrop = yes
     Manager sending message :- sweetsorghum sow  plants = 20, sowing_depth = 30, cultivar = sugargraze, row_spacing = 500, crop_class = plant
19 October 1980(Day of year=293), SweetSorghum: 
     Crop Sow
        ------------------------------------------------
        cultivar                   = sugargraze
        Phases:
           out
           sowing
           germination
              shoot_lag                  =       0 (dd)
              shoot_rate                 =       2 (dd/mm)
           emergence
              tt_emergence               =      70 (dd)
           endjuv_to_fi
              x_pp_endjuv_to_fi          =      13      14    14.6   14.75 (h)
              y_tt_endjuv_to_fi          =      75     150     240     300 (dd)
           fi_to_flag
              Stage duration determined by leaf appearance rates
           flag_to_flower
              tt_flag_to_flower          =      80 (dd)
           flowering
              tt_flowering               =     170 (dd)
           start_grain_fill
              tt_start_grain_fill        =     250 (dd)
           end_grain_fill
              tt_end_grain_fill          =       5 (dd)
           maturity
              tt_maturity                =       1 (dd)
           harvest_ripe
              tt_harvest_ripe            =       1 (dd)
           end_crop
     
        grains_per_gram_stem           =       10.0 (/g)
        potential_grain_filling_rate   =     0.0100 (g/grain/day)
        potential_grain_growth_rate    =     0.0000 (g/grain/day)
        max_grain_size                 =     0.5000 (g)
        ------------------------------------------------
     
     
                        Root Profile
         -----------------------------------------------
          Layer       Kl           Lower    Exploration
          Depth     Factor         Limit      Factor
          (mm)         ()        (mm/mm)       (0-1)
         -----------------------------------------------
         150.0     0.060          0.220       1.000
         150.0     0.060          0.220       1.000
         300.0     0.060          0.240       1.000
         300.0     0.040          0.260       1.000
         300.0     0.040          0.290       1.000
         300.0     0.020          0.300       1.000
         300.0     0.020          0.340       1.000
         -----------------------------------------------
         Extractable SW:   217mm in  1800mm total depth ( 12%).
         Crop factor for bounding water use is set to   1.1 times eo.
      stage 1.0 sowing
     
                      Crop Sowing Data
         ------------------------------------------------
         Sowing  Depth Plants Spacing Skip  Skip  Cultivar
         Day no   mm     m^2     mm   row   plant name
         ------------------------------------------------
            293   30.0   20.0  500.0   0.0   0.0 sugargraze
         ------------------------------------------------
     
