     ###     ######     #####   #   #     #   
    #   #    #     #   #        #   ##   ##   
   #     #   #     #   #        #   ##   ##   
   #######   ######     #####   #   # # # #   
   #     #   #              #   #   #  #  #   
   #     #   #         #####    #   #  #  #   
                                              
                                              
 The Agricultural Production Systems Simulator
             Copyright(c) APSRU               

Version                = 7.4
Title                  = MCA rigid
   Component                        "clock" = %apsim%\Model\Clock.dll
   Component                          "met" = %apsim%\Model\Input.dll
   Component                 "Farm Manager" = %apsim%\Model\TclLink.dll
   Component                    "Economics" = %apsim%\Model\TclLink.dll
   Component                    "Machinery" = %apsim%\Model\TclLink.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component                   "Soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "erosion" = %apsim%\Model\Erosion.dll
   Component                "Soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                        "wheat" = %apsim%\Model\Plant.dll
   Component                     "chickpea" = %apsim%\Model\Plant.dll
   Component                         "weed" = %apsim%\Model\Plant.dll
   Component                      "sorghum" = %apsim%\Model\Sorghum.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component                   "Soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "erosion" = %apsim%\Model\Erosion.dll
   Component                "Soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                        "wheat" = %apsim%\Model\Plant.dll
   Component                     "chickpea" = %apsim%\Model\Plant.dll
   Component                         "weed" = %apsim%\Model\Plant.dll
   Component                      "sorghum" = %apsim%\Model\Sorghum.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component                   "Soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "erosion" = %apsim%\Model\Erosion.dll
   Component                "Soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                        "wheat" = %apsim%\Model\Plant.dll
   Component                     "chickpea" = %apsim%\Model\Plant.dll
   Component                         "weed" = %apsim%\Model\Plant.dll
   Component                      "sorghum" = %apsim%\Model\Sorghum.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component                   "Soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "erosion" = %apsim%\Model\Erosion.dll
   Component                "Soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                        "wheat" = %apsim%\Model\Plant.dll
   Component                     "chickpea" = %apsim%\Model\Plant.dll
   Component                         "weed" = %apsim%\Model\Plant.dll
   Component                      "sorghum" = %apsim%\Model\Sorghum.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component                   "Soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "erosion" = %apsim%\Model\Erosion.dll
   Component                "Soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                        "wheat" = %apsim%\Model\Plant.dll
   Component                     "chickpea" = %apsim%\Model\Plant.dll
   Component                         "weed" = %apsim%\Model\Plant.dll
   Component                      "sorghum" = %apsim%\Model\Sorghum.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component                   "Soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "erosion" = %apsim%\Model\Erosion.dll
   Component                "Soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                        "wheat" = %apsim%\Model\Plant.dll
   Component                     "chickpea" = %apsim%\Model\Plant.dll
   Component                         "weed" = %apsim%\Model\Plant.dll
   Component                      "sorghum" = %apsim%\Model\Sorghum.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component                   "Soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "erosion" = %apsim%\Model\Erosion.dll
   Component                "Soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                        "wheat" = %apsim%\Model\Plant.dll
   Component                     "chickpea" = %apsim%\Model\Plant.dll
   Component                         "weed" = %apsim%\Model\Plant.dll
   Component                      "sorghum" = %apsim%\Model\Sorghum.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component                   "Soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "erosion" = %apsim%\Model\Erosion.dll
   Component                "Soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                        "wheat" = %apsim%\Model\Plant.dll
   Component                     "chickpea" = %apsim%\Model\Plant.dll
   Component                         "weed" = %apsim%\Model\Plant.dll
   Component                      "sorghum" = %apsim%\Model\Sorghum.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component                   "Soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "erosion" = %apsim%\Model\Erosion.dll
   Component                "Soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                        "wheat" = %apsim%\Model\Plant.dll
   Component                     "chickpea" = %apsim%\Model\Plant.dll
   Component                         "weed" = %apsim%\Model\Plant.dll
   Component                      "sorghum" = %apsim%\Model\Sorghum.dll
Paddock:
   Component                        "accum" = %apsim%\Model\Accum.dll
   Component                   "fertiliser" = %apsim%\Model\Fertiliser.dll
   Component                   "Soil Water" = %apsim%\Model\SoilWat.dll
   Component       "surface organic matter" = %apsim%\Model\SurfaceOM.dll
   Component                      "erosion" = %apsim%\Model\Erosion.dll
   Component                "Soil Nitrogen" = %apsim%\Model\SoilN.dll
   Component                        "wheat" = %apsim%\Model\Plant.dll
   Component                     "chickpea" = %apsim%\Model\Plant.dll
   Component                         "weed" = %apsim%\Model\Plant.dll
   Component                      "sorghum" = %apsim%\Model\Sorghum.dll

------- clock Initialisation --------------------------------------------------
     Sequencer phases:
        prepare
        init_step
        do_pasture_water
        process
        do_pasture_growth
        do_stock
        post
        end_step
     Simulation start date =  1/01/1970
     Simulation end date   =  2/07/1972
     Time step =           = 1440 (mins)

------- met Initialisation ----------------------------------------------------
     Sparse data is not allowed
     INPUT File name: %apsim%\Examples\Metfiles\Goond.met
Farm Manager: 
     Copyright (C) 1991-1994 The Regents of the University of California.
     Copyright (C) 1996-1997 Sun Microsystems, Inc.
     Copyright (C) 2001      ActiveState.
     --->Section: end_simulation

close_ef_stuff


closeLogging

     --->Section: init


# apsim 'strings' are returned as arrays of strings and may need this
proc unlist {list} {
   if {[llength $list] == 1} {return [lindex $list 0]}
   return $list
}

set simName  [unlist [apsimGet title]]
apsimWriteToSummaryFile "title = $simName"

# Initial conditions
set myName  "FarmManager"
source $apsuite/UserInterface/APSFarm/FarmManager.tcl

set paddocks [list toplevel p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 ]
set config(cropPaddocks)    [list p1 p2 p3 p4 p5 p6 p7 p8 p9 p10]
set config(foragePaddocks)  {}

set config(toplevel,graphNames)  {}

foreach p $config(cropPaddocks) {
   set config($p,graphNames)  stateGraph
   set config($p,area)        300.0
   set weeds($p,Events)       0                      ;# number of weed germination events
   set weeds($p,GermDay)      {}                     ;# date of next weed spraying

   foreach {accumulator} {runoff drain soil_loss es} {
      set $p.$accumulator 0.0
   }
}

set accRain 0.0

foreach p $paddocks {
  set config($p,watBal)   ".masterpm.$p.Soil Water"
  set config($p,nModule)  ".masterpm.$p.Soil Nitrogen"
}


# Initialisation for MCA

   # Delete any old logfile so we dont get confused..
   catch {file delete -force $simName.log}

   # The 10 day rainfall accumulator - should be the 10 days of rain prior to start of simulation
   set rainList {0.2 1.0 0 0 0 0 15 12 0 0 0 0}

   # A list of variables to report from each paddock on each "event"
   set reportVariables [list esw no3() ]

   # Crop variables - name/event/value triplets
   set reportCropVariables [list sorghum  harvest yield \
                                 wheat    harvest yield \
                                 chickpea harvest yield]

   # Manager variables to report from each paddock on each "event"
   set reportManagerVariables [list weeds(Events) annRunoff annDrain annSoil_loss annEvap annRain state]

# Defaults for a lot of things.
# we use this table to build a list of "name/value" pairs that get fed into
# sow/fertiliser commands etc.
# ***Check the summary file for what it uses, search other files for "gatherArgs"
   set defaults(sow,sowing_depth)              30
   set defaults(fertiliser,calcMethod)         targetN
   set defaults(fertiliser,depth)              50
   set defaults(fertiliser,type)               urea

   set defaults(wheat,sow,cultivar)              Sunvale
   set defaults(Sf_earlyWheat,sow,cultivar)      Sunbri
   set defaults(Lf_earlyWheat,sow,cultivar)      Sunbri
   set defaults(lateWheat,sow,cultivar)          Sunstate
   set defaults(wheat,sow,plants)                100       ;# plants per sq mt established
   set defaults(wheat,fertiliser,amount)         140       ;# kg urea/ha
   set defaults(Lf_earlyWheat,fertiliser,amount) 180       ;# kg urea/ha
   set defaults(Lf_Wheat,fertiliser,amount)      180       ;# kg urea/ha
    
   # (same as chickpea)
   set defaults(wheat,sowingCosts)             {{category seedcost    name Wheat            rate 60  comment  "Wheat seed"} 
                                                {category fertilisercost  name map              rate 20  comment  "Wheat MAP starter"} 
                                                {category herbicide name "MCPALVE"       rate 0.5 comment  "Wheat mcpa starter"}
                                                {category herbicide name "Ally"           rate 5   comment  "Wheat metsulfuran starter"}}

   set defaults(wheat,harvestingCosts)         {{category harvesting   name generic          rate 0.16666  comment  "Wheat contract harvest"} 
                                                {category fuelcosts  name fuelcosts        rate 8.1      comment  "Wheat contract harvest fuel"}}

   set defaults(sorghum,sow,cultivar)             medium
   set defaults(Lf_earlySorghum,sow,cultivar)     late
   set defaults(Sf_earlySorghum,sow,cultivar)     late
   
   set defaults(sorghum,sow,tiller_no_fertile)     0
   set defaults(sorghum,sow,skip)                  "single"
   set defaults(sorghum,sow,region)                "SQ"
   set defaults(sorghum,sow,row_spacing)            1.0
   set defaults(sorghum,sow,plants)                 4.0
   set defaults(Sf_earlySorghum,sow,plants)         4.5
   set defaults(Lf_earlySorghum,sow,plants)         4.5
   
   set defaults(Sf_Sorghum,fertiliser,amount)       140
   set defaults(Sf_earlySorghum,fertiliser,amount)  140
   set defaults(sorghum,fertiliser,amount)          180
   set defaults(sorghum,sowingCosts)           {{category seedcost   name sorghum   rate 4 comment "Sorghum seed"}
                                                 {category fertilisercost  name starter_z   rate 30  comment  "Sorghum Starter_z"}}
## NBNB needs atrazine @3.5lt/ha in wet seasons
   set defaults(sorghum,harvestingCosts)       {{category harvesting   name generic         rate 0.16666 comment  "Sorghum contract harvest"} 
                                                {category herbicide  name Roundup         rate 1.5     comment  "Sorghum spray out"} 
                                                {category fuelcosts  name fuelcosts       rate 8.1     comment  "Sorghum contract harvest fuel"}}

   set defaults(CoverCrop,fertiliser,amount)   0
   
   set defaults(chickpea,sow,cultivar)         amethyst
   set defaults(chickpea,sow,plants)           30
   set defaults(chickpea,fertiliser,amount)    0
   set defaults(chickpea,sowingCosts)          {{category seedcost    name Chickpea         rate 45   comment "Chickpea Seed"}              
                                                {category herbicide   name Roundup          rate 1.3  comment "Pre plant roundup"}
                                                {category herbicide   name Amicide625       rate 0.2  comment "Pre plant 2,4D"} 
                                                {category herbicide   name "simazine"     rate 1.1    comment "Post Simazine"}
                                                {category insecticide name "LarvinLV"    rate 0.75   comment "Insecticide"}
                                                {category fertilisercost  name starter_z   rate 50  comment  "Ckpea Starter_z"}}
                                                
   set defaults(chickpea,harvestingCosts)      {{category harvesting    name generic        rate 0.1851 comment  "Chickpea contract harvest"} 
                                                {category fuelcosts   name fuelcosts      rate 9.0    comment  "Chickpea contract harvest fuel"}}

   set defaults(weed,sow,cultivar)             late
   set defaults(weed,sow,plants)               15
   set defaults(weed,sow,crop_class)           summer_grass
   set defaults(weed,fertiliser,amount)        0

   set defaults(sow,tractor)                   'tractor_1'
   set defaults(sow,implement)                 'planter'
   set defaults(spray,tractor)                 'tractor_1'
   set defaults(spray,implement)               'spray_rig'  ;# this is spray rig
   set defaults(herbicide,spray,name)          "Roundup"

   set config(CoverCrop,alias) weed
   set config(Lf_earlySorghum,alias) sorghum
   set config(Sf_earlySorghum,alias) sorghum
   set config(Lf_Sorghum,alias) sorghum
   set config(Sf_Sorghum,alias) sorghum
   set config(Sf_earlyWheat,alias) wheat
   set config(Lf_earlyWheat,alias) wheat
   set config(Sf_Wheat,alias) wheat
   set config(Lf_Wheat,alias) wheat
   set config(lateWheat,alias) wheat

   set crops {sorghum wheat chickpea}

# Initial conditions for each paddock
set config(p1,initialState)         Fallow
set config(p1,history)              {sorghum sorghum}
set config(p1,daysSinceLastHarvest) 365              ;# A long time
set config(p2,initialState)         Fallow
set config(p2,history)              {wheat sorghum}
set config(p2,daysSinceLastHarvest) 365              ;# A long time
set config(p3,initialState)         Fallow
set config(p3,history)              {wheat wheat}
set config(p3,daysSinceLastHarvest) 365              ;# A long time
set config(p4,initialState)         Fallow
set config(p4,history)              {wheat maize}
set config(p4,daysSinceLastHarvest) 365              ;# A long time
set config(p5,initialState)         Fallow
set config(p5,history)              {maize maize}
set config(p5,daysSinceLastHarvest) 365              ;# A long time
set config(p6,initialState)         Fallow
set config(p6,history)              {sorghum sorghum}
set config(p6,daysSinceLastHarvest) 365              ;# A long time
set config(p7,initialState)         Fallow
set config(p7,history)              {wheat sorghum}
set config(p7,daysSinceLastHarvest) 365              ;# A long time
set config(p8,initialState)         Fallow
set config(p8,history)              {wheat wheat}
set config(p8,daysSinceLastHarvest) 365              ;# A long time
set config(p9,initialState)         Fallow
set config(p9,history)              {wheat maize}
set config(p9,daysSinceLastHarvest) 365              ;# A long time
set config(p10,initialState)         Fallow
set config(p10,history)              {maize maize}
set config(p10,daysSinceLastHarvest) 365              ;# A long time

foreach p $config(cropPaddocks) {
   set state($p)   $config($p,initialState)
   set history($p) $config($p,history)
   set daysSinceLastHarvest($p) 60
}

set state(toplevel) {}
set daysSinceLastHarvest(toplevel) 0



# Return our reluctance to plant sorghum in the current paddock
#  - no more than 3 in a row.
proc sorghumHistory {paddock} {
   global history 
   if {"[lindex $history($paddock) end]" == "sorghum" &&
       "[lindex $history($paddock) end-1]" == "sorghum"} {
      return 0 ;# 2 in a row - no more.
   }
   return 1
}

# Last crop was a failed sorghum crop
## XXX WRONG - should be 1 only if the last sorghum crop failed
proc covercropHistory {paddock} {
   global history
   if {"[lindex $history($paddock) end]" == "sorghum"} {return 1}
   return 0
}

# Return our "reluctance" to plant wheat
proc wheatHistory {paddock} {
   global history
   if {"[lindex $history($paddock) end]" == "wheat" &&
       "[lindex $history($paddock) end-1]" == "wheat"} {
       return 0   ;# 2 in a row - no more.
   }
   return 1
}
# Return our "reluctance" to plant chickpea
proc chickpeaHistory {paddock} {
   global history
   if {[lindex $history($paddock) end] == "chickpea" } {
      return 0   ;# no more than 1 crop
   }
   return 1
}

proc getEsw {paddock} {
   global config
   return [apsimGetOptional $config($paddock,watBal).esw]
}


proc mseek2 {paddock} {
   global config
   set ll2   [lindex [apsimGet $config($paddock,watBal).ll15] 1] 
   set swat2 [lindex [apsimGet $config($paddock,watBal).sw] 1]
   set dul2  [lindex [apsimGet $config($paddock,watBal).dul] 1]
   return [expr (($swat2-$ll2)/($dul2-$ll2))]
}


proc getCover {paddock} {
   global config
   return [apsimGetOptional "$paddock.surface organic matter.surfaceom_cover"]
}

proc sprayChickpeas {paddock} {
   global defaults config
   apsimWriteToSummaryFile "spraying Chickpeas"

   apsimSendMessage economics expenditure \
             {category insecticide} {name Steward} \
             "rate 0.3" "area $config($paddock,area)"  \
             "paddock $paddock" {incrop_cost {}} \
             "crop [currentState $paddock]"     
   apsimSendMessage economics operate \
             "tractor $defaults(spray,tractor)" "implement $defaults(spray,implement)" \
             {category insecticide} {name Steward} \
             "rate 0.3" "area $config($paddock,area)"  "paddock $paddock" {incrop_cost {}} 
}


proc genericCosts {args} {

   # {{category seedcost} {name cotton} {rate 3.5} {Comment "blah blah"}} ...
   foreach {junk items} [concat [array get defaults $crop,sowCosts] [array get defaults $realCrop,sowCosts]]  {
      foreach item $items {
         eval apsimSendMessage economics expenditure \
                    [mash [concat $item area $area  \
                    paddock $paddock incrop_cost {} 
      }
   }
}

proc machineryAvailable {what} {
   return [apsimGet available_$what]
}



proc do_end_financial_year {} {
   global config ef

   set year [apsimGet year]

   foreach {accumulator} {runoff drain soil_loss es} {
     foreach paddock $config(cropPaddocks) {
        global $paddock.$accumulator
        set ef($year,$paddock,$accumulator) [set $paddock.$accumulator]
     }
   }
   global accRain
   set ef($year,accRain) $accRain
   set ef($year,balance) [apsimGet balance]
   lappend ef(years) $year
}

# EF - used to be "end of financial" but has a lot more now.
proc open_ef_stuff {} {
   global ef

   set year [expr [apsimGet year] - 1 ]
   set ef(years) $year
   set ef($year,balance) [apsimGet balance] 
   set ef(states) {}
   set ef(rules) {}
}

proc close_ef_stuff {} {
   global simName config ef

   # Heading
   set fp [open $simName.financial.csv w]
   puts -nonewline $fp "year"
   foreach {accumulator} {runoff drain soil_loss es rain} {
      puts -nonewline $fp ",$accumulator"
   }
   foreach state $ef(states) {
      if {$state != {}} {
        puts -nonewline $fp ",$state"
      }
   }
   puts $fp ",profit"

   # Area weighted averages of environmental stuff
   set tfa 0.0
   foreach paddock $config(cropPaddocks) {set tfa [expr $tfa + $config($paddock,area)]}
   
   foreach year [lrange $ef(years) 2 end] {
      puts -nonewline $fp "$year"
      foreach {accumulator} {runoff drain soil_loss es} {
         set s 0.0
         foreach paddock $config(cropPaddocks) {
            set s [expr $s + $ef($year,$paddock,$accumulator) * $config($paddock,area) / $tfa]
         }
         puts -nonewline $fp ",$s"
      }
      puts -nonewline $fp ",$ef($year,accRain)"

      # Number of "state transitions" made in each year
      foreach state $ef(states) {
         if {$state != {}} {
            if {[info exists ef($year,$state)]} {
              puts -nonewline $fp ",$ef($year,$state)"
            } else {
              puts -nonewline $fp ",0"
            }  
         }
      }

      # profit = change in bank balance each year
      puts -nonewline $fp ",[expr $ef($year,balance) - $ef([expr $year-1],balance)]"
      puts $fp ""
   }
   close $fp
   
   # per-crop yields etc..
   foreach state $ef(states) {
     if {$state != {}} {
         set fp [open $simName.$state.csv w]
         if {[info exists ef($state,yield)]} {
            foreach yield $ef($state,yield) {
               puts $fp $yield
            }   
         }  
         close $fp
      }   
   }

   # Finally the rule "failures"
}
# Newer version of weed germination - spray 2 weeks after a {germination event & swCrit & temp}.
proc checkWeeds {} {
   global daysSinceLastHarvest weeds paddocks config

   foreach paddock $paddocks {
      if {$paddock != "toplevel" &&
          ([currentState $paddock] == "Fallow" ) && 
          $daysSinceLastHarvest($paddock) > 30} {

         if {$weeds($paddock,GermDay) == {} && [sumLastRain 4] >= 30} {
            set weeds($paddock,GermDay) [apsimGet day]
            set weeds($paddock,tt) 0.0
            apsimWriteToSummaryFile "Weeds germinating in $paddock"

         } elseif {$weeds($paddock,GermDay) != {}} {
            # Thermal time calc
            set weeds($paddock,tt) [expr $weeds($paddock,tt) + ([apsimGet maxt] + [apsimGet mint])/2.0]
         
            # Surface SW calc
            set ll [lindex [apsimGet $config($paddock,watBal).ll15] 0];
            set sw [lindex [apsimGet $config($paddock,watBal).sw] 0]
            set dul [lindex [apsimGet $config($paddock,watBal).dul] 0]
            set swf [expr (($sw-$ll)/($dul-$ll))]
            if {$swf < 0.5} {
               # kill off weeds
               set weeds($paddock,GermDay) {}
               apsimWriteToSummaryFile "Weeds die in $paddock"
         
            } elseif {$weeds($paddock,tt) > 250.0} {
               # Weeds are mature - spray them
               incr weeds($paddock,Events)
               eval apsimSendMessage economics operate [mash [concat [gatherArgs spray herbicide] \
                      area $config($paddock,area)  paddock $paddock  costtype fallow_cost]]

               apsimSendMessage economics expenditure "category herbicide" "name Roundup" \
                         "rate 5" "area $config($paddock,area)"  \
                         "paddock $paddock" {fallow_cost {}} \
                         {comment "Roundup weeds"}
               apsimWriteToSummaryFile "Weeds mature in $paddock - sprayed out."
         
               set weeds($paddock,GermDay) {}
               set weeds($paddock,tt)      0.0
            }
         }
      }   
   }
}
# Rug plotting facility

# 2 areas of interest:
# - logState - called when a graph is changing state, called just after the "actions" have been evaluated

# a logfile is used to generate the rugplots of farm activities. There are 2 parts:
# an xml of paddocks, states & times,
# a binary of decision rules on each evaluation cycle
proc log {msg} {
   #puts $msg
}

package require cdftcl
package require tdom

proc setupLogging {} {
   global simName config paddocks
   set config(paddocks) $paddocks

   # Find the number of graphs - 1 file for each. Delete each.
   set config(graphs) {}
   foreach paddock $config(paddocks) {
     foreach graph $config($paddock,graphNames) {
        if {[lsearch $config(graphs) $graph] < 0} {
           lappend config(graphs) $graph
        }
     }
  }
  foreach graph $config(graphs) {
    apsimWriteToSummaryFile "deleting $simName.$graph.\[xml,nc\]"
    file delete -force $simName.$graph.xml
    file delete -force $simName.$graph.nc
    foreach paddock $config(paddocks) {
       set config(history,$paddock,$graph) {}
    }
  }
  set config(states) {}
  set config(rules) {}
  set config(historyDays) {}
}

# Log a set of rule evaluations
proc logRules {paddock graph rules values } {
   global config

   set data {}
   for {set i 0} {$i < [llength $rules]} {incr i} {
      lappend data [lindex $rules $i] [lindex $values $i]
   }

   set today [apsimGet today]

   lappend config(history,$paddock,$graph,$today) $data

   if {[lsearch $config(historyDays) $today] < 0} {
       lappend config(historyDays) $today
       set config($today,ddmmyyyy) [apsimGet clock.dd/mm/yyyy]
   }
}

# Log a state transition
proc logState {graph paddock state} {
   global config
   set today [apsimGet today]
   lappend config(history,$paddock,$graph) $today $state
   if {[lsearch $config(states) $state] < 0} {lappend config(states) $state}
}

# Write the files. 
proc closeLogging {} {
   global config simName

   package require tdom
   set config(xmldoc) [dom parse [apsimGetComponentXML]]
   set config(docroot) [$config(xmldoc) documentElement]

   foreach graph $config(graphs) {
apsimWriteToSummaryFile "creating $simName.$graph.nc"
      set ncfp [ncdf create $simName.$graph.nc] 
      ncdfdim $ncfp create index [llength $config(historyDays)]
      ncdfdim $ncfp create time -1

      ncdfvar $ncfp create position long {index}
      ncdfvar $ncfp create daynum float {index}

      ncdfvar $ncfp create day     float {time}
      ncdfvar $ncfp create paddock short {time}
      ncdfvar $ncfp create rule    short {time}
      ncdfvar $ncfp create value   float {time}

      set day [lindex $config(historyDays) 0]
      ncdfatt $ncfp GLOBAL put startdate float $day
      ncdfatt $ncfp GLOBAL put startddmmyyyy char $config($day,ddmmyyyy)

      set day [lindex $config(historyDays) end]
      ncdfatt $ncfp GLOBAL put enddate float $day
      ncdfatt $ncfp GLOBAL put endddmmyyyy char $config($day,ddmmyyyy)

      ncdf enddef $ncfp
      set id 0
      foreach p $config(paddocks) {
         set pid($p) $id; incr id
      }   

      set i 0
      foreach day $config(historyDays) {
         foreach paddock $config(paddocks) {
            if {[info exists config(history,$paddock,$graph,$day)]} {
               set pos($paddock,$day) $i
               foreach data $config(history,$paddock,$graph,$day) {
                  foreach {rule value} $data {
                     ncdfvar $ncfp put day     $i $day
                     ncdfvar $ncfp put paddock $i $pid($paddock)
                     ncdfvar $ncfp put rule    $i $rule
                     ncdfvar $ncfp put value   $i $value
                     incr i
                  } 
               }
            }
         }
      }

      #Positions
      for {set i 0} {$i < [llength $config(historyDays)]} {incr i} {
         set day [lindex $config(historyDays) $i]
         set f 0
         foreach paddock $config(paddocks) {
            if {[info exists pos($paddock,$day)]} {
               ncdfvar $ncfp put position  $i $pos($paddock,$day)
               set f 1
               break
            } 
         }
         if {!$f} {
            ncdfvar $ncfp put position  $i -1
         }   
      }
      
      for {set j 0} {$j < [llength $config(historyDays)]} {incr j} {
         ncdfvar $ncfp put daynum $j [lindex $config(historyDays) $j]
      }   

      ncdf close $ncfp

      set fp [open $simName.$graph.xml w]
      puts $fp "<?xml version=\"1.0\" encoding=\"UTF-8\"?><simulation>"
      set id 0
      foreach paddock $config(paddocks) {
         puts $fp "<history id=\"$id\" name=\"$paddock\">"
         foreach {day state} $config(history,$paddock,$graph) {
            if {[info exists pos($paddock,$day)]} {
               puts $fp "<transition day=\"$day\" to=\"$state\" position=\"$pos($paddock,$day)\" />"
            } 
         }
         puts $fp "</history>"
         incr id
      }

      foreach paddock $config(paddocks) {
         puts $fp "<paddock id=\"$pid($paddock)\" name=\"$paddock\" />"
      }   
      set id 0
      foreach rule $config(rules) {
         set rule [string map {\< "&lt;"  \> "&gt;"     
                               \& "&amp;" \" "&quot;"  
                               \[ "&#91;" \] "&#93;"    } $rule]
         puts $fp "<rule id=\"$id\" name=\"$rule\" />"
         incr id
      }

      # Colours
      foreach node [$config(docroot) selectNodes //node] {
          set state [getValue $node "name"]
          set colour [getValue $node "fill"]
          puts $fp "<state name=\"$state\" colour=\"$colour\" />"
      }

      set day [lindex $config(historyDays) 0]
      puts $fp "<startdate ddmmyyyy=\"$config($day,ddmmyyyy)\" day=\"$day\" />"
      set day [lindex $config(historyDays) end]
      puts $fp "<enddate ddmmyyyy=\"$config($day,ddmmyyyy)\" day=\"$day\" />"

      puts $fp "</simulation>"
      close $fp
   }  
   # $config(xmldoc) delete
}

# Override the "standard" decision routine to keep track of state info
proc checkRules {thisPaddock} {
  global config 
  uplevel #0 set paddock $thisPaddock
  set bestScore -1.0; set bestTarget {}; set bestArc {}; set bestGraph {}
  foreach graph $config($thisPaddock,graphNames) {
     foreach arc [$graph arcs -out [currentState $thisPaddock]] {
        set values {}; set rules {}
        set target [$graph arc target $arc]
        if {[$graph arc keyexists $arc window]} {set inWindow [uplevel #0 expr [$graph arc get $arc window]]} else {set inWindow 0}
        foreach rule [$graph arc get $arc rules] {
           set value [uplevel #0 expr $rule]
           lappend values $value
           lappend rules [enCodeRule $target $rule]
        }
        logRules $thisPaddock $graph $rules $values
        if {[llength $values] > 0} {
           set score [expr [join $values "*"]]
           if {$score > $bestScore} {
              set bestScore  $score
              set bestTarget $target
              set bestArc    $arc
              set bestGraph  $graph
           }
        }
     }
  }   
  return [list  $bestScore $bestGraph $bestTarget $bestArc]
}

proc enCodeRule {target ruleText} {
  global config
  regsub -all "\," $ruleText "\-" ruleText

  for {set i 0} {$i < [llength $config(rules)]} {incr i} {
     set rule [lindex $config(rules) $i]
     if {[string equal $rule "$target,$ruleText"]} {
        return $i
     }
  }
  lappend config(rules) "$target,$ruleText"
  return [expr [llength $config(rules)] - 1]
}


# Get the value of an objects 'thing'
proc getValue {id thing} {
   foreach node [$id childNodes] {
      if {[string equal -nocase [$node nodeName] $thing]} {
         return [$node text]
      }
   }
   return ""
}

package require struct
::struct::graph stateGraph
stateGraph node insert "Sf_earlySorghum"
set colour(Sf_earlySorghum) "-32640"
stateGraph node insert "CoverCrop"
set colour(CoverCrop) "-8355648"
stateGraph node insert "Sf_Sorghum"
set colour(Sf_Sorghum) "-6639379"
stateGraph node insert "Lf_Sorghum"
set colour(Lf_Sorghum) "-2498055"
stateGraph node insert "Sf_earlyWheat"
set colour(Sf_earlyWheat) "-8323200"
stateGraph node insert "Spray"
set colour(Spray) "-657956"
stateGraph node insert "lateWheat"
set colour(lateWheat) "-8355776"
stateGraph node insert "Chickpea"
set colour(Chickpea) "-32768"
stateGraph node insert "Sf_Wheat"
set colour(Sf_Wheat) "-16744448"
stateGraph node insert "Lf_Wheat"
set colour(Lf_Wheat) "-16744384"
stateGraph node insert "Lf_earlySorghum"
set colour(Lf_earlySorghum) "-8323073"
stateGraph node insert "Fallow"
set colour(Fallow) "-657956"
stateGraph node insert "Lf_earlyWheat"
set colour(Lf_earlyWheat) "-16711872"
stateGraph arc insert "Sf_earlyWheat" "Fallow" "arc11"
stateGraph arc lappend "arc11" actions {harvestAndEndCrop $paddock wheat}
stateGraph arc lappend "arc11" rules {[canHarvestCrop $paddock wheat]}
stateGraph arc insert "Fallow" "Chickpea" "arc12"
stateGraph arc lappend "arc12" actions {sowCrop $paddock chickpea}
stateGraph arc lappend "arc12" actions {lappend history($paddock) chickpea}
stateGraph arc lappend "arc12" actions {set chickPeaRain($paddock) 0.0}
stateGraph arc lappend "arc12" actions {set numChickSprays($paddock) 0}
stateGraph arc lappend "arc12" rules {[dayWithin 135 151]}
stateGraph arc lappend "arc12" rules {[getEsw $paddock] > 80}
stateGraph arc lappend "arc12" rules {[sumLastRain 1] == 0}
stateGraph arc lappend "arc12" rules {[areaPlanted Chickpea] <0.2}
stateGraph arc lappend "arc12" rules {[mseek2 $paddock] > 0.8}
stateGraph arc lappend "arc12" rules {[machineryAvailable tractor1_planter]}
stateGraph arc lappend "arc12" rules {[getEsw $paddock]}
stateGraph arc lappend "arc12" rules {[chickpeaHistory $paddock]}
stateGraph arc insert "Chickpea" "Fallow" "arc13"
stateGraph arc lappend "arc13" actions {harvestAndEndCrop $paddock chickpea}
stateGraph arc lappend "arc13" rules {[canHarvestCrop $paddock chickpea]}
stateGraph arc insert "Fallow" "Lf_earlyWheat" "arc14"
stateGraph arc lappend "arc14" actions {sowCrop $paddock Lf_earlyWheat; lappend history($paddock) wheat}
stateGraph arc lappend "arc14" rules {[dayWithin 116 128]}
stateGraph arc lappend "arc14" rules {[getEsw $paddock] > 80}
stateGraph arc lappend "arc14" rules {[sumLastRain 1] == 0}
stateGraph arc lappend "arc14" rules {$daysSinceLastHarvest($paddock) >300}
stateGraph arc lappend "arc14" rules {[mseek2 $paddock] > 0.8}
stateGraph arc lappend "arc14" rules {[areaPlanted wheat] < 0.2}
stateGraph arc lappend "arc14" rules {[machineryAvailable tractor1_planter]}
stateGraph arc lappend "arc14" rules {[getEsw $paddock]}
stateGraph arc lappend "arc14" rules {[wheatHistory $paddock]}
stateGraph arc insert "Lf_earlyWheat" "Fallow" "arc15"
stateGraph arc lappend "arc15" actions {harvestAndEndCrop $paddock wheat}
stateGraph arc lappend "arc15" rules {[canHarvestCrop $paddock wheat]}
stateGraph arc insert "Chickpea" "Spray" "arc16"
stateGraph arc lappend "arc16" actions {sprayChickpeas $paddock}
stateGraph arc lappend "arc16" actions {set numChickSprays($paddock) 1}
stateGraph arc lappend "arc16" rules {[set chickPeaRain($paddock) [expr $chickPeaRain($paddock) + [apsimGet rain]]] > 150}
stateGraph arc lappend "arc16" rules {$numChickSprays($paddock) == 0}
stateGraph arc insert "Fallow" "Sf_Wheat" "arc0"
stateGraph arc lappend "arc0" actions {sowCrop $paddock Sf_Wheat; lappend history($paddock) wheat}
stateGraph arc lappend "arc0" rules {[dayWithin 129 152]}
stateGraph arc lappend "arc0" rules {[getEsw $paddock] > 80}
stateGraph arc lappend "arc0" rules {[mseek2 $paddock] > 0.8}
stateGraph arc lappend "arc0" rules {$daysSinceLastHarvest($paddock) >30}
stateGraph arc lappend "arc0" rules {$daysSinceLastHarvest($paddock)<200}
stateGraph arc lappend "arc0" rules {[sumLastRain 1] == 0}
stateGraph arc lappend "arc0" rules {[machineryAvailable tractor1_planter]}
stateGraph arc lappend "arc0" rules {[areaPlanted wheat]  <0.8}
stateGraph arc lappend "arc0" rules {[getEsw $paddock]}
stateGraph arc lappend "arc0" rules {[wheatHistory $paddock]}
stateGraph arc insert "Spray" "Chickpea" "arc17"
stateGraph arc lappend "arc17" actions {}
stateGraph arc lappend "arc17" rules {1}
stateGraph arc insert "Fallow" "Lf_Wheat" "arc18"
stateGraph arc lappend "arc18" actions {sowCrop $paddock Lf_Wheat; lappend history($paddock) wheat}
stateGraph arc lappend "arc18" rules {[dayWithin 129 152]}
stateGraph arc lappend "arc18" rules {[getEsw $paddock] > 80}
stateGraph arc lappend "arc18" rules {[mseek2 $paddock] > 0.8}
stateGraph arc lappend "arc18" rules {[sumLastRain 1] == 0}
stateGraph arc lappend "arc18" rules {$daysSinceLastHarvest($paddock) >300}
stateGraph arc lappend "arc18" rules {[machineryAvailable tractor1_planter]}
stateGraph arc lappend "arc18" rules {[areaPlanted wheat]  <0.8}
stateGraph arc lappend "arc18" rules {[getEsw $paddock]}
stateGraph arc lappend "arc18" rules {[wheatHistory $paddock]}
stateGraph arc insert "Sf_Wheat" "Fallow" "arc1"
stateGraph arc lappend "arc1" actions {harvestAndEndCrop $paddock wheat}
stateGraph arc lappend "arc1" rules {[canHarvestCrop $paddock wheat]}
stateGraph arc insert "Fallow" "Lf_earlySorghum" "arc20"
stateGraph arc lappend "arc20" actions {sowCrop $paddock Lf_earlySorghum; lappend history($paddock) sorghum}
stateGraph arc lappend "arc20" rules {[dayWithin 244 350]}
stateGraph arc lappend "arc20" rules {[expr [sumLastRain 4] > 20 && [sumLastRain 1] == 0]}
stateGraph arc lappend "arc20" rules {$daysSinceLastHarvest($paddock) >300}
stateGraph arc lappend "arc20" rules {[machineryAvailable tractor1_planter]}
stateGraph arc lappend "arc20" rules {[getEsw $paddock] >100}
stateGraph arc lappend "arc20" rules {[areaPlanted sorghum] <0.8}
stateGraph arc lappend "arc20" rules {[getEsw $paddock]}
stateGraph arc lappend "arc20" rules {[sorghumHistory $paddock]}
stateGraph arc insert "Lf_Wheat" "Fallow" "arc19"
stateGraph arc lappend "arc19" actions {harvestAndEndCrop $paddock wheat}
stateGraph arc lappend "arc19" rules {[canHarvestCrop $paddock wheat]}
stateGraph arc insert "Fallow" "Sf_earlySorghum" "arc2"
stateGraph arc lappend "arc2" actions {sowCrop $paddock Sf_earlySorghum; lappend history($paddock) sorghum}
stateGraph arc lappend "arc2" rules {[dayWithin 244 350]}
stateGraph arc lappend "arc2" rules {[expr [sumLastRain 4] > 20 && [sumLastRain 1] == 0]}
stateGraph arc lappend "arc2" rules {$daysSinceLastHarvest($paddock) >30}
stateGraph arc lappend "arc2" rules {$daysSinceLastHarvest($paddock) <200}
stateGraph arc lappend "arc2" rules {[machineryAvailable tractor1_planter]}
stateGraph arc lappend "arc2" rules {[getEsw $paddock] >100}
stateGraph arc lappend "arc2" rules {[areaPlanted sorghum] <0.2}
stateGraph arc lappend "arc2" rules {[getEsw $paddock]}
stateGraph arc lappend "arc2" rules {[sorghumHistory $paddock]}
stateGraph arc insert "Lf_earlySorghum" "Fallow" "arc21"
stateGraph arc lappend "arc21" actions {harvestAndEndCrop $paddock sorghum}
stateGraph arc lappend "arc21" rules {[canHarvestCrop $paddock sorghum]}
stateGraph arc insert "Sf_earlySorghum" "Fallow" "arc3"
stateGraph arc lappend "arc3" actions {harvestAndEndCrop $paddock sorghum}
stateGraph arc lappend "arc3" rules {[canHarvestCrop $paddock sorghum]}
stateGraph arc insert "Fallow" "Lf_Sorghum" "arc22"
stateGraph arc lappend "arc22" actions {sowCrop $paddock Lf_Sorghum; lappend history($paddock) sorghum}
stateGraph arc lappend "arc22" rules {[dayWithin 244  350] }
stateGraph arc lappend "arc22" rules {[expr [sumLastRain 4] > 20 && [sumLastRain 1] == 0]}
stateGraph arc lappend "arc22" rules {$daysSinceLastHarvest($paddock) >300}
stateGraph arc lappend "arc22" rules {[machineryAvailable tractor1_planter]}
stateGraph arc lappend "arc22" rules {[getEsw $paddock] >100}
stateGraph arc lappend "arc22" rules {[areaPlanted sorghum] <0.8}
stateGraph arc lappend "arc22" rules {[getEsw $paddock]}
stateGraph arc lappend "arc22" rules {[sorghumHistory $paddock]}
stateGraph arc insert "Fallow" "Sf_Sorghum" "arc4"
stateGraph arc lappend "arc4" actions {sowCrop $paddock Sf_Sorghum; lappend history($paddock) sorghum}
stateGraph arc lappend "arc4" rules {[dayWithin 244 350] }
stateGraph arc lappend "arc4" rules {[expr [sumLastRain 4] > 20 && [sumLastRain 1] == 0]}
stateGraph arc lappend "arc4" rules {$daysSinceLastHarvest($paddock) >30}
stateGraph arc lappend "arc4" rules {$daysSinceLastHarvest($paddock)<200}
stateGraph arc lappend "arc4" rules {[machineryAvailable tractor1_planter]}
stateGraph arc lappend "arc4" rules {[getEsw $paddock] >100}
stateGraph arc lappend "arc4" rules {[areaPlanted sorghum] <0.2}
stateGraph arc lappend "arc4" rules {[getEsw $paddock]}
stateGraph arc lappend "arc4" rules {[sorghumHistory $paddock]}
stateGraph arc insert "Lf_Sorghum" "Fallow" "arc23"
stateGraph arc lappend "arc23" actions {harvestAndEndCrop $paddock sorghum}
stateGraph arc lappend "arc23" rules {[canHarvestCrop $paddock sorghum]}
stateGraph arc insert "Sf_Sorghum" "Fallow" "arc5"
stateGraph arc lappend "arc5" actions {harvestAndEndCrop $paddock sorghum}
stateGraph arc lappend "arc5" rules {[canHarvestCrop $paddock sorghum]}
stateGraph arc insert "Fallow" "lateWheat" "arc6"
stateGraph arc lappend "arc6" actions {sowCrop $paddock lateWheat; lappend history($paddock) wheat}
stateGraph arc lappend "arc6" rules {[dayWithin 153 160]}
stateGraph arc lappend "arc6" rules {[getEsw $paddock] > 80}
stateGraph arc lappend "arc6" rules {[expr [sumLastRain 4] > 20 && [sumLastRain 1] == 0]}
stateGraph arc lappend "arc6" rules {$daysSinceLastHarvest($paddock) >30}
stateGraph arc lappend "arc6" rules {[machineryAvailable tractor1_planter]}
stateGraph arc lappend "arc6" rules {[areaPlanted wheat]  <0.8}
stateGraph arc lappend "arc6" rules {[getEsw $paddock]}
stateGraph arc lappend "arc6" rules {[wheatHistory $paddock]}
stateGraph arc insert "lateWheat" "Fallow" "arc7"
stateGraph arc lappend "arc7" actions {harvestAndEndCrop $paddock wheat}
stateGraph arc lappend "arc7" rules {[canHarvestCrop $paddock wheat]}
stateGraph arc insert "Fallow" "CoverCrop" "arc8"
stateGraph arc lappend "arc8" actions {sowCrop $paddock weed; lappend history($paddock) weed}
stateGraph arc lappend "arc8" rules {[dayWithin 245 274]}
stateGraph arc lappend "arc8" rules {[expr [sumLastRain 1] == 0]}
stateGraph arc lappend "arc8" rules {[getCover $paddock] < 0.1}
stateGraph arc lappend "arc8" rules {[getEsw $paddock] >60}
stateGraph arc lappend "arc8" rules {[machineryAvailable tractor1_planter]}
stateGraph arc lappend "arc8" rules {[getEsw $paddock]}
stateGraph arc lappend "arc8" rules {$daysSinceLastHarvest($paddock) <14}
stateGraph arc insert "CoverCrop" "Fallow" "arc9"
stateGraph arc lappend "arc9" actions {harvestAndEndCrop $paddock weed}
stateGraph arc lappend "arc9" rules {{[apsimGet $paddock.weed.das] == 60 ||  "[apsimGet $paddock.weed.plant_status]" == "dead"}}
stateGraph arc insert "Fallow" "Sf_earlyWheat" "arc10"
stateGraph arc lappend "arc10" actions {sowCrop $paddock Sf_earlyWheat; lappend history($paddock) wheat}
stateGraph arc lappend "arc10" rules {[dayWithin 116 128]}
stateGraph arc lappend "arc10" rules {[getEsw $paddock] > 80}
stateGraph arc lappend "arc10" rules {[sumLastRain 1] == 0}
stateGraph arc lappend "arc10" rules {$daysSinceLastHarvest($paddock) >30}
stateGraph arc lappend "arc10" rules {$daysSinceLastHarvest($paddock)<200}
stateGraph arc lappend "arc10" rules {[mseek2 $paddock] > 0.8}
stateGraph arc lappend "arc10" rules {[areaPlanted wheat] < 0.2}
stateGraph arc lappend "arc10" rules {[machineryAvailable tractor1_planter]}
stateGraph arc lappend "arc10" rules {[getEsw $paddock]}
stateGraph arc lappend "arc10" rules {[wheatHistory $paddock]}

     --->Section: post

   set accRain [expr $accRain + [apsimGet rain]]
   
   foreach {accumulator} {runoff drain es } {
      foreach paddock $paddocks {
         if {$paddock != "toplevel"} {
            set $paddock.$accumulator [expr [set $paddock.$accumulator] + [apsimGet $config($paddock,watBal).$accumulator]]
         }
      }   
   }
   foreach {accumulator} {soil_loss} {
      foreach paddock $paddocks {
         if {$paddock != "toplevel"} {
            s