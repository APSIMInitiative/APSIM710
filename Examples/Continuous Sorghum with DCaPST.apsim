<folder version="37" creator="Apsim 7.10-r0" name="Validation">
  <simulation name="Continuous Sorghum with DCaPST">
    <metfile name="met">
      <filename name="filename" input="yes">%apsim%/Examples/MetFiles/Bhola.met</filename>
    </metfile>
    <clock>
      <start_date type="date" description="Select the start date of the simulation">01/10/1985</start_date>
      <end_date type="date" description="Select the end date of the simulation">01/06/1989</end_date>
    </clock>
    <summaryfile />
    <area name="paddock">
      <Soil name="HRS">
        <RecordNumber>0</RecordNumber>
        <SoilType>HMM</SoilType>
        <LocalName>HRS</LocalName>
        <Site>HRS</Site>
        <NearestTown>Unknown</NearestTown>
        <Region>SE Queensland</Region>
        <NaturalVegetation>Unknown</NaturalVegetation>
        <Latitude>0</Latitude>
        <Longitude>0</Longitude>
        <YearOfSampling>0</YearOfSampling>
        <Water>
          <Thickness>
            <double>100</double>
            <double>100</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
          </Thickness>
          <BD>
            <double>1.34</double>
            <double>1.34</double>
            <double>1.33</double>
            <double>1.38</double>
            <double>1.4</double>
            <double>1.55</double>
            <double>1.59</double>
            <double>1.63</double>
            <double>1.66</double>
            <double>1.68</double>
          </BD>
          <AirDry>
            <double>0.08</double>
            <double>0.19</double>
            <double>0.23</double>
            <double>0.26</double>
            <double>0.26</double>
            <double>0.28</double>
            <double>0.25</double>
            <double>0.28</double>
            <double>0.3</double>
            <double>0.31</double>
          </AirDry>
          <LL15>
            <double>0.226</double>
            <double>0.226</double>
            <double>0.258</double>
            <double>0.27</double>
            <double>0.268</double>
            <double>0.304</double>
            <double>0.335</double>
            <double>0.33</double>
            <double>0.32</double>
            <double>0.33</double>
          </LL15>
          <DUL>
            <double>0.42</double>
            <double>0.42</double>
            <double>0.46</double>
            <double>0.46</double>
            <double>0.43</double>
            <double>0.4</double>
            <double>0.37</double>
            <double>0.33</double>
            <double>0.32</double>
            <double>0.33</double>
          </DUL>
          <SAT>
            <double>0.45</double>
            <double>0.45</double>
            <double>0.48</double>
            <double>0.47</double>
            <double>0.45</double>
            <double>0.41</double>
            <double>0.38</double>
            <double>0.37</double>
            <double>0.37</double>
            <double>0.36</double>
          </SAT>
          <SoilCrop name="Sorghum">
            <Thickness>
              <double>100</double>
              <double>100</double>
              <double>200</double>
              <double>200</double>
              <double>200</double>
              <double>200</double>
              <double>200</double>
              <double>200</double>
              <double>200</double>
              <double>200</double>
            </Thickness>
            <LL>
              <double>0.226</double>
              <double>0.226</double>
              <double>0.258</double>
              <double>0.27</double>
              <double>0.268</double>
              <double>0.304</double>
              <double>0.335</double>
              <double>0.33</double>
              <double>0.32</double>
              <double>0.33</double>
            </LL>
            <KL>
              <double>0.07</double>
              <double>0.07</double>
              <double>0.07</double>
              <double>0.07</double>
              <double>0.06</double>
              <double>0.06</double>
              <double>0.06</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.04</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
        </Water>
        <SoilWater>
          <SummerCona>6.5</SummerCona>
          <SummerU>1.5</SummerU>
          <SummerDate>1-Nov</SummerDate>
          <WinterCona>6.5</WinterCona>
          <WinterU>1.5</WinterU>
          <WinterDate>1-Apr</WinterDate>
          <DiffusConst>40</DiffusConst>
          <DiffusSlope>16</DiffusSlope>
          <Salb>0.2</Salb>
          <CN2Bare>85</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <Slope>NaN</Slope>
          <DischargeWidth>NaN</DischargeWidth>
          <CatchmentArea>NaN</CatchmentArea>
          <MaxPond>NaN</MaxPond>
          <Thickness>
            <double>100</double>
            <double>100</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
          </Thickness>
          <SWCON>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
        </SoilWater>
        <SoilOrganicMatter>
          <RootCN>50</RootCN>
          <RootWt>1000</RootWt>
          <SoilCN>12.5</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>100</double>
            <double>100</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
          </Thickness>
          <OC>
            <double>1.19</double>
            <double>0.59</double>
            <double>0.45</double>
            <double>0.3</double>
            <double>0.2</double>
            <double>0.16</double>
            <double>0.17</double>
            <double>0.17</double>
            <double>0.17</double>
            <double>0.17</double>
          </OC>
          <FBiom>
            <double>0.05</double>
            <double>0.02</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.05</double>
            <double>0.02</double>
            <double>0.01</double>
          </FBiom>
          <FInert>
            <double>0.45</double>
            <double>0.6</double>
            <double>0.75</double>
            <double>0.9</double>
            <double>0.9</double>
            <double>0.9</double>
            <double>0.9</double>
            <double>0.9</double>
            <double>0.9</double>
            <double>0.9</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <Analysis>
          <Thickness>
            <double>100</double>
            <double>100</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
          </Thickness>
          <Texture>
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
          </Texture>
          <MunsellColour>
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
          </MunsellColour>
          <PH>
            <double>6.3</double>
            <double>6.4</double>
            <double>6.5</double>
            <double>6.6</double>
            <double>6.6</double>
            <double>6.5</double>
            <double>6.5</double>
            <double>6.5</double>
            <double>6.5</double>
            <double>6.5</double>
          </PH>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Sample name="Initial nitrogen">
          <Thickness>
            <double>100</double>
            <double>100</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
          </Thickness>
          <NO3>
            <double>13.936000000000002</double>
            <double>2.1882200000000003</double>
            <double>3.27978</double>
            <double>2.4840000000000004</double>
            <double>3.080000000000001</double>
            <double>4.5477</double>
            <double>11.552939999999998</double>
            <double>18.47442</double>
            <double>19.256</double>
            <double>24.41712</double>
          </NO3>
          <NH4>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </NH4>
          <NO3Units>kgha</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
        <Sample name="Initial water">
          <Thickness>
            <double>100</double>
            <double>100</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
          </Thickness>
          <SW>
            <double>23.5</double>
            <double>25.2</double>
            <double>54</double>
            <double>60</double>
            <double>53.6</double>
            <double>60.8</double>
            <double>67</double>
            <double>66</double>
            <double>64</double>
            <double>66</double>
          </SW>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>mm</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
      </Soil>
      <folder name="Manager folder">
        <manager2 name="Crop Management">
          <ui>
            <category type="category" description="Crop properties" />
            <crop type="crop" description="Name of this crop">sorghum</crop>
            <category type="category" description="Sowing criteria" />
            <date1 type="ddmmmdate" description="Enter sowing window START date (dd-mmm)">1-nov</date1>
            <date3 type="ddmmmdate" description="Enter cultivar change date (na if not in use)">na</date3>
            <date2 type="ddmmmdate" description="Enter sowing window END date (dd-mmm)">30-dec</date2>
            <must_sow type="yesno" description="Must Sow">no</must_sow>
            <rain_amount type="text" description="Enter amount of cumulative rainfall (mm)">25</rain_amount>
            <rain_days type="text" description="Enter number of days to accumulate rainfall (days)">7</rain_days>
            <esw_amount type="text" description="Enter amount of soil water (mm)">100</esw_amount>
            <category type="category" description="Sowing Parameters" />
            <cultivar1 type="cultivars" description="Enter cultivar : ">Buster</cultivar1>
            <cultivar2 type="cultivars" description="Enter 2nd Cultivar (na if not using a second cultivar)" />
            <density1 type="text" description="Enter sowing density  (plants/m2)">10</density1>
            <depth1 type="text" description="Enter sowing depth  (mm)">30</depth1>
            <row_spacing1 type="text" description="Enter row spacing  (mm)">500</row_spacing1>
            <category type="category" description="Extra Parameters" />
            <plants_pm1 type="text" description="Enter sowing density  (plants/ m row cotton)" />
            <ftn1 type="text" description="Enter Fertile Tiller Number (na for auto) : ">0</ftn1>
            <skiprow1 type="list" listvalues="solid, single, double" description="Skip row : ">solid</skiprow1>
            <tillageImplement type="text" description="Name of tillage implement (na if not in use): ">na</tillageImplement>
          </ui>
          <text>using System;
using ModelFramework;
using CSGeneral;

// Basic crop management: sowing &amp; harvesting.
// Multi-paddock aware.
// This component DOES NOT require a trigger from the sequencer.
// It will assume it is the only crop in the system if it doesnt find a sequencer.
// If it does find a sequencer, it will do nothing until told to (via Enter/Leave).
public class Script 
{      
   [Link()]  public Simulation MySimulation;
   
   [Param()] private string crop;         // The module name of this crop
   [Param()] private string date1;         //Start of sowing window
   [Param()] private string date2;         //End of sowing window
   [Param()] private string date3;         //date to change to different cultivar
   [Param()] int esw_amount;
   [Param()] private string must_sow;

   [Input()] private DateTime today;

   // Rainfall accumulator
   [Param()] int rain_days;              //check for rain over this period
   [Param()] int rain_amount;            //this much rain over that period

   // Daily rainfall from the system
   [Input] private double rain;
   private ManagerUtility.Tracker&lt;double&gt; rainTracker; 

   private bool inWindow = false;
   private bool endOfWindow = false;
   private bool ChangeCultivar = false;

   //initialise tracker, telling it how many days to track
   [EventHandler] public void OnInitialised()
   {
      rainTracker = new ManagerUtility.Tracker&lt;double&gt;(rain_days); 
   }

   // Daily tests common to all paddocks
   [EventHandler] public void OnPrepare()
   {
      bool startOfWindow = DateUtility.DatesEqual(date1, today);

      inWindow = DateUtility.WithinDates(date1, today, date2);
      ChangeCultivar = false;
      if(date3 != "na")  
         ChangeCultivar = DateUtility.WithinDates(date3, today, date2);
      endOfWindow = DateUtility.DatesEqual(date2, today);

      rainTracker.Add(rain);
      string currentPaddock = "";
      if (MySimulation.Get("currentPaddock", out currentPaddock) == false) 
      {
         // If there is no sequencer plugged in then we are it..
         if (canEnter &gt; 0) {
            OnEnter();
         }
         if (canLeave &gt; 0) {
            OnLeave();
         }
      }
   }
   // Test whether we can sow a crop today
   // +ve number - yes
   // 0          - no
   // -ve number - no, out of scope (planting window)
   [Output, Description("Test whether we can sow a crop today")] public int canEnter  {
      get {
         bool isPossibleToday = false;
         
         string currentPaddock;
         MySimulation.Get("currentPaddock", out currentPaddock);
         //Console.WriteLine("1. '" + currentPaddock + "'");

         Component paddockModule;
         if (currentPaddock != "")
            paddockModule = (Component) MySimulation.LinkByName(currentPaddock);
         else
            paddockModule = (Component) MySimulation.ChildPaddocks[0];
         //Console.WriteLine("2. " + paddockModule.Name);

         Component cropModule = (Component) paddockModule.LinkByName( crop );

         //Console.WriteLine("3. " + cropModule.Name);
         string plantStatus = "";
         cropModule.Get("plant_status", out plantStatus);

         double esw = 0.0;
         Component soilModule = (Component) paddockModule.LinkByType("SoilWat");
         soilModule.Get("esw", out esw);
         if (plantStatus == "out" &amp;&amp;
             inWindow &amp;&amp;
             rainTracker.Sum() &gt;= rain_amount &amp;&amp;
             esw &gt; esw_amount) 
         {
             isPossibleToday = true;
         } 

	     if (isPossibleToday)
            return 1;
         
         if (plantStatus == "out" &amp;&amp; endOfWindow &amp;&amp; must_sow == "yes")
            return 1;

         if (plantStatus == "out" &amp;&amp; !inWindow)
            return -1;
         
         return 0;
      }
   }  
   
[Output, Description("Test whether we have passed the end of the window")] public int pastWindow  {
      get {
         return( (DateUtility.CompareDates(date2, today) &lt; 0) ? 1 : 0);
      }
   }   
   // Sow a crop
   [Param()] private string cultivar1;
   [Param()] private string cultivar2;
   [Param()] private string density1;
   [Param()] private string plants_pm1;
   [Param()] private double depth1;
   [Param()] private double row_spacing1;
   [Param()] private string ftn1;
   [Param()] private string skiprow1;
   [Param()] private string tillageImplement;
   
   [EventHandler, Description("Sow the crop")] public void OnEnter()
   {
      Console.WriteLine(today.ToString("dd/MM/yyyy") + " Sowing Crop");
      SowType data = new SowType();
      data.Cultivar = cultivar1;
      if(ChangeCultivar)
         data.Cultivar = cultivar2;

      double density = 0;
      if (! double.TryParse(density1, out density) &amp;&amp; density1 != "")
         Console.WriteLine(today.ToString("dd/MM/yyyy") + " Ignoring density parameter \"" + density1 + "\"");

      double plants_pm = 0;
      if (! double.TryParse(plants_pm1, out plants_pm)&amp;&amp; plants_pm1 != "")
         Console.WriteLine(today.ToString("dd/MM/yyyy") + " Ignoring plants_pm parameter \"" + plants_pm1 + "\"");

      data.plants = density;
      data.plants_pm = plants_pm;
      data.sowing_depth = depth1;
      data.row_spacing = row_spacing1;
      data.tiller_no_fertile = (ftn1 == "na") ? "" : ftn1;
      data.SkipRow = 0 ;
      if (skiprow1 == "single")
         data.SkipRow = 1;
      else if (skiprow1 == "double")
         data.SkipRow = 2;

      string currentPaddock;
      MySimulation.Get("currentPaddock", out currentPaddock);
      Component cropModule;
      if (currentPaddock != "")
         cropModule = (Component) MySimulation.LinkByName(currentPaddock + "." + crop);
      else 
         cropModule = (Component) MySimulation.ChildPaddocks[0].LinkByName(crop);

      cropModule.Publish("Sow", data);

      if (tillageImplement.ToLower() != "na") 
	  {
         TillageType t = new TillageType();
         t.type = tillageImplement;
         Component paddockModule;
         if (currentPaddock != "")
            paddockModule = (Component) MySimulation.LinkByName(currentPaddock);
         else
            paddockModule = MySimulation.ChildPaddocks[0];
         paddockModule.Publish("tillage", t);
      }		 
   }

   // Test whether we can harvest a crop today
   // +ve number - yes
   // 0          - no
   // -ve        - out of scope
   [Output] public int canLeave  
   {
      get 
      {
         string currentPaddock;
         MySimulation.Get("currentPaddock", out currentPaddock);

         string plantStatus = "";
         MySimulation.Get((currentPaddock != "" ? currentPaddock + "." : "") + crop + ".plant_status", out plantStatus);
         if (plantStatus == "out")
            return -1;

         string StageName = "";
         MySimulation.Get((currentPaddock != "" ? currentPaddock + "." : "") + crop + ".StageName", out StageName);
         if (StageName == "harvest_ripe" || plantStatus == "dead")
            return 1;
         return 0;
      }
   }

   [EventHandler] public void OnLeave()
   {
      Console.WriteLine(today + " Harvesting Crop");
      HarvestType hdata = new HarvestType();
      hdata.Remove = 0.0;
      string currentPaddock;
      MySimulation.Get("currentPaddock", out currentPaddock);
      Component cropModule;
      if (currentPaddock != "")
         cropModule = (Component) MySimulation.LinkByName(currentPaddock + "." + crop);
      else 
         cropModule = (Component) MySimulation.ChildPaddocks[0].LinkByName(crop);

      cropModule.Publish("harvest", hdata);

      KillCropType kdata = new KillCropType();
      kdata.KillFraction = 0.0F;
      cropModule.Publish("killcrop", kdata);
      cropModule.Publish("end_crop");
   } 
}
       </text>
        </manager2>
        <manager2 name="DCaPS_C4_short">
          <ui />
          <text>using System;
using System.IO;
using ModelFramework;

using DCAPST;
using DCAPST.Interfaces;
using DCAPST.Utilities;
 

public class Script 
{      
   [Link]  public Simulation MySimulation;
   [Link] Paddock MyPaddock; // Can be used to dynamically get access to simulation structure and variables
   [Input] DateTime Today;   // Equates to the value of the current simulation date - value comes from CLOCK
   [Output] public double[] dcaps = new double[5];
   
   //Additional Outputs
   [Output] public double BIOtotalDAY;
   [Output] public double BIOshootDAY;
   [Output] public double RootShoot;
   [Output] public double EcanDemand; 
   [Output] public double EcanSupply;
   [Output] public double RUE;
   [Output] public double TE; 
   [Output] public double RadIntDcapst; 
   [Output] public double BIOshootDAYPot;
   
   public CanopyParameters CP;
   public PathwayParameters PP;
   public DCAPSTModel DM;
   
   public double LAITrigger = 0.5;
   public double PsiFactor = 0.4; //psiFactor-Psi Reduction Factor
   
   private FileStream stream;
   private StreamWriter writer;
   
   // The following event handler will be called once at the beginning of the simulation
   [EventHandler] public void OnInitialised()
   {
      //string path = "IntervalValues.csv";
      //stream = new FileStream(path, FileMode.Create);
      //writer = new StreamWriter(stream);
      
      /* Do NOT change the order of these values */

      CP = Classic.SetUpCanopy(
         CanopyType.C4, // Canopy type
         363, // CO2 partial pressure
         0.7, // Curvature factor
         0.047, // Diffusivity-solubility ratio
         210000, // O2 partial pressure
         0.78, // Diffuse extinction coefficient
         0.8, // Diffuse extinction coefficient NIR
         0.036, // Diffuse reflection coefficient
         0.389, // Diffuse reflection coefficient NIR
         60, // Leaf angle
         0.15, // Leaf scattering coefficient
         0.8, // Leaf scattering coefficient NIR
         0.15, // Leaf width
         1.3, // SLN ratio at canopy top
         14, // Minimum Nitrogen
         1.5, // Wind speed
         1.5);             // Wind speed extinction
         

      PP = Classic.SetUpPathway(
         0, // jTMin
         37.8649150880407, // jTOpt
         55, // jTMax
         0.711229539802063, // jC
         1, // jBeta

         0, // gTMin
         42, // gTOpt
         55, // gTMax
         0.462820450976839, // gC
         1, // gBeta

         1210, // KcAt25
         64200, // KcFactor

         292000, // KoAt25
         10500, // KoFactor

         5.51328906454566, // VcVoAt25
         21265.4029552906, // VcVoFactor

         75, // KpAt25
         36300, // KpFactor

         78000, // VcFactor
         46390, // RdFactor
         57043.2677590512, // VpFactor


         120, // pepRegeneration
         0.15, // spectralCorrectionFactor
         0.1, // ps2ActivityFraction
         0.003, // bundleSheathConductance
         0.465 * PsiFactor, // maxRubiscoActivitySLNRatio
         2.7 * PsiFactor, // maxElectronTransportSLNRatio
         0.0 * PsiFactor, // respirationSLNRatio
         1.55 * PsiFactor, // maxPEPcActivitySLNRatio
         0.0135 * PsiFactor, // mesophyllCO2ConductanceSLNRatio
         2, // extraATPCost
         0.45);   // intercellularToAirCO2Ratio

      //Set the LAI trigger
      MyPaddock.Set("laiTrigger", LAITrigger);
   }
   
   // This routine is called when the plant model wants us to do the calculation
   private bool empty = true; // tracks if the header has been printed for the interval value data
   [EventHandler] public void Ondodcaps() 
   {
      int DOY = 0;
      double latitude = 0;
      double maxT = 0;
      double minT = 0;
      double radn = 0;
      double RootShootRatio = 0;
      double SLN = 0;
      double SWAvailable = 0;
      double lai = 0;
     
      MyPaddock.Get("DOY", out DOY);
      MyPaddock.Get("latitude", out latitude);
      MyPaddock.Get("maxT", out maxT);
      MyPaddock.Get("minT", out minT);
      MyPaddock.Get("radn", out radn);
      MyPaddock.Get("RootShootRatio", out RootShootRatio);
      MyPaddock.Get("SLN", out SLN);
      MyPaddock.Get("SWAvailable", out SWAvailable);
      MyPaddock.Get("lai", out lai);
            
      // Model the photosynthesis
      DCAPSTModel DM = Classic.SetUpModel(CP, PP, DOY, latitude, maxT, minT, radn);

      // Optional values 
      DM.PrintIntervalValues = false; // Switch to print extra data (default = false)
      DM.Biolimit = 0;     // Biological transpiration limit of the crop (0 disables mechanism)
      DM.Reduction = 0;    // Excess water reduction fraction for bio-limited transpiration (0 disables mechanism)

      // Run the simulation
      DM.DailyRun(lai, SLN, SWAvailable, RootShootRatio);
      
      if (DM.PrintIntervalValues)
      {
         if (empty)
         {
            writer.WriteLine(DM.PrintResultHeader());
            empty = false;
         }
         
         writer.WriteLine(DM.IntervalResults);
      }
      
      // Outputs
      RootShoot = RootShootRatio;
      BIOshootDAY = dcaps[0] = DM.ActualBiomass;
      BIOtotalDAY = BIOshootDAY * (1 + RootShoot);
      EcanDemand = dcaps[1] = DM.WaterDemanded; 
      EcanSupply = dcaps[2] = DM.WaterSupplied;
      RadIntDcapst = dcaps[3] = DM.InterceptedRadiation;
      RUE = (RadIntDcapst == 0 ? 0 : BIOshootDAY / RadIntDcapst);
      TE = (EcanSupply == 0 ? 0 : BIOshootDAY / EcanSupply);
      BIOshootDAYPot = dcaps[4] = DM.PotentialBiomass;
   }
      
   // Set its default value to garbage so that we find out quickly
   [EventHandler] public void OnPrepare()
   {
      RootShoot = 0;
      BIOshootDAY = 0;
      BIOtotalDAY = 0;
      EcanDemand = 0; 
      EcanSupply = 0;
      RadIntDcapst = 0;

      RUE = 0;
      TE = 0;
      BIOshootDAYPot = 0;
      
      for(int i = 0; i &lt; 5; i++) { dcaps[i] = -1.0f;}
   }
}</text>
          <Reference>
            <ref type=" text" description="Path to assembly:">%apsim%/Model/DCaPST.dll</ref>
          </Reference>
        </manager2>
      </folder>
      <irrigation name="Irrigation">
        <automatic_irrigation type="text" description="switch">off</automatic_irrigation>
        <asw_depth type="text" description="Depth to which ASW is calculated. (mm)">600.0</asw_depth>
        <crit_fr_asw type="text" description="Fraction of ASW below which irrigation is applied (0-1.0)">0.5</crit_fr_asw>
        <irrigation_efficiency description="Efficiency of the irrigation. (0-1.0)">1.0</irrigation_efficiency>
        <default_no3_conc type="text" description="Nitrate concentration (ppm N)">0.0</default_no3_conc>
        <default_nh4_conc type="text" description="Ammonium concentration (ppm N)">0.0</default_nh4_conc>
        <default_cl_conc type="text" description="Chloride concentration (ppm Cl)">0.0</default_cl_conc>
      </irrigation>
      <fertiliser />
      <sorghum />
      <outputfile>
        <filename name="filename" output="yes">Continuous Sorghum with DCaPST.out</filename>
        <title>Continuous Sorghum with DCaPST</title>
        <variables name="My Variables">
          <variable>dd/mm/yyyy as date</variable>
          <variable>stage</variable>
          <variable>DaysAfterSowing</variable>
          <variable>day_of_year</variable>
          <variable>MaxT</variable>
          <variable>MinT</variable>
          <variable>Radn</variable>
          <variable>LAI</variable>
          <variable>SLN</variable>
          <variable>swdef_photo</variable>
          <variable>BIOtotalDAY</variable>
          <variable>BIOshootDAYPot</variable>
          <variable>BIOshootDAY</variable>
          <variable>RootShoot</variable>
          <variable>EcanDemand</variable>
          <variable>EcanSupply</variable>
          <variable>TE</variable>
          <variable>RadIntDcapst</variable>
          <variable>Biomass</variable>
          <variable>Yield</variable>
        </variables>
        <events name="My Variables Events">
          <event>Daily</event>
        </events>
      </outputfile>
    </area>
  </simulation>
</folder>