<folder version="37" creator="Apsim 7.10-r4145" name="simulations">
  <simulation name="Wether in pasture crop rotation">
    <memo>
This simulates a wether/lamb trading system where young animals are bought in
to fatten over winter and spring. They are then sold to a specified weight.

Two paddocks. 
  The first paddock is a pasture paddock. Stocking rate is calculated for this area. 
  Second paddock has wheat sown and the animals are moved here for winter feeding and stubble feeding.
  The Feedlot could be used for feeding stock away from pasture.


The Pasture component is the AusFarm pasture. (**** Only single species supported at this stage)
The Stock component is the Livestock manager (not stockscienceconverter)
Supplement is the AusFarm supplement (no science converter)

Note:

The Stock component initialisation values should be edited. The rand_seed value should
be set to 0 for normal use. When it is set to 9999 the animal mortalities will be replicated
between runs.</memo>
    <metfile name="met">
      <filename name="filename" input="yes">%apsim%\Examples\MetFiles\wagga_aps.met</filename>
    </metfile>
    <clock>
      <start_date type="date" description="Select the start date of the simulation">01/01/1990</start_date>
      <end_date type="date" description="Select the end date of the simulation">30/12/2000</end_date>
    </clock>
    <summaryfile />
    <area name="PasturePaddock">
      <paddock_area>100</paddock_area>
      <Soil>
        <RecordNumber>263</RecordNumber>
        <ASCOrder>Sodosol</ASCOrder>
        <ASCSubOrder>Red</ASCSubOrder>
        <SoilType>?</SoilType>
        <Site>Wagga Wagga</Site>
        <NearestTown>Wagga Wagga</NearestTown>
        <Region>Riverina</Region>
        <State>New South Wales</State>
        <Country>Australia</Country>
        <ApsoilNumber>550-YP</ApsoilNumber>
        <Latitude>-35.123</Latitude>
        <Longitude>147.354</Longitude>
        <LocationAccuracy>Regional Soil Type</LocationAccuracy>
        <YearOfSampling>0</YearOfSampling>
        <DataSource>PAWC estimated by A. Peake, CSIRO Sustainable Ecosystems (2005) </DataSource>
        <Water>
          <Thickness>
            <double>100</double>
            <double>100</double>
            <double>200</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <BD>
            <double>1.55</double>
            <double>1.55</double>
            <double>1.5</double>
            <double>1.5</double>
            <double>1.55</double>
            <double>1.55</double>
            <double>1.55</double>
          </BD>
          <AirDry>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.12</double>
            <double>0.12</double>
            <double>0.12</double>
            <double>0.12</double>
            <double>0.12</double>
          </AirDry>
          <LL15>
            <double>0.12</double>
            <double>0.1</double>
            <double>0.12</double>
            <double>0.12</double>
            <double>0.12</double>
            <double>0.12</double>
            <double>0.12</double>
          </LL15>
          <DUL>
            <double>0.24</double>
            <double>0.22</double>
            <double>0.24</double>
            <double>0.34</double>
            <double>0.34</double>
            <double>0.34</double>
            <double>0.34</double>
          </DUL>
          <SAT>
            <double>0.38</double>
            <double>0.39</double>
            <double>0.4</double>
            <double>0.4</double>
            <double>0.4</double>
            <double>0.4</double>
            <double>0.4</double>
          </SAT>
          <BDMetadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </BDMetadata>
          <AirDryMetadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </AirDryMetadata>
          <LL15Metadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </LL15Metadata>
          <DULMetadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </DULMetadata>
          <SATMetadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </SATMetadata>
          <SoilCrop name="wheat">
            <Thickness>
              <double>100</double>
              <double>100</double>
              <double>200</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.12</double>
              <double>0.1</double>
              <double>0.12</double>
              <double>0.17</double>
              <double>0.18</double>
              <double>0.22</double>
              <double>0.29</double>
            </LL>
            <KL>
              <double>0.06</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.04</double>
              <double>0.03</double>
              <double>0.02</double>
              <double>0.02</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
            <LLMetadata>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
            </LLMetadata>
          </SoilCrop>
          <SoilCrop name="barley">
            <Thickness>
              <double>100</double>
              <double>100</double>
              <double>200</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.12</double>
              <double>0.1</double>
              <double>0.12</double>
              <double>0.17</double>
              <double>0.18</double>
              <double>0.22</double>
              <double>0.29</double>
            </LL>
            <KL>
              <double>0.07</double>
              <double>0.07</double>
              <double>0.07</double>
              <double>0.07</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.03</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
            <LLMetadata>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
            </LLMetadata>
          </SoilCrop>
          <SoilCrop name="oats">
            <Thickness>
              <double>100</double>
              <double>100</double>
              <double>200</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.12</double>
              <double>0.1</double>
              <double>0.12</double>
              <double>0.17</double>
              <double>0.18</double>
              <double>0.22</double>
              <double>0.29</double>
            </LL>
            <KL>
              <double>0.06</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.04</double>
              <double>0.03</double>
              <double>0.02</double>
              <double>0.02</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
            <LLMetadata>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
            </LLMetadata>
          </SoilCrop>
        </Water>
        <SoilWater>
          <SummerCona>3.5</SummerCona>
          <SummerU>6</SummerU>
          <SummerDate>1-Nov</SummerDate>
          <WinterCona>2</WinterCona>
          <WinterU>2</WinterU>
          <WinterDate>1-Apr</WinterDate>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>78</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <Slope>NaN</Slope>
          <DischargeWidth>NaN</DischargeWidth>
          <CatchmentArea>NaN</CatchmentArea>
          <MaxPond>NaN</MaxPond>
          <Thickness>
            <double>100</double>
            <double>100</double>
            <double>200</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <SWCON>
            <double>0.6</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.4</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
        </SoilWater>
        <SoilOrganicMatter>
          <RootCN>45</RootCN>
          <RootWt>1500</RootWt>
          <SoilCN>12.5</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>100</double>
            <double>100</double>
            <double>200</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <OC>
            <double>1.23076923076923</double>
            <double>0.615384615384615</double>
            <double>0.307692307692308</double>
            <double>0.153846153846154</double>
            <double>0.0769230769230769</double>
            <double>0.0769230769230769</double>
            <double>0.0769230769230769</double>
          </OC>
          <OCMetadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </OCMetadata>
          <FBiom>
            <double>0.03</double>
            <double>0.02</double>
            <double>0.02</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
          </FBiom>
          <FInert>
            <double>0.4</double>
            <double>0.5</double>
            <double>0.7</double>
            <double>0.8</double>
            <double>0.9</double>
            <double>1</double>
            <double>1</double>
          </FInert>
          <OCUnits>WalkleyBlack</OCUnits>
        </SoilOrganicMatter>
        <Analysis>
          <Thickness>
            <double>100</double>
            <double>100</double>
            <double>200</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <Texture>
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
          </Texture>
          <MunsellColour>
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
          </MunsellColour>
          <EC>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </EC>
          <ECMetadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </ECMetadata>
          <PH>
            <double>6.6</double>
            <double>5.3</double>
            <double>6</double>
            <double>6.6</double>
            <double>9</double>
            <double>9</double>
            <double>9</double>
          </PH>
          <PHMetadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </PHMetadata>
          <CL>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </CL>
          <CLMetadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </CLMetadata>
          <ESP>
            <double>1</double>
            <double>2</double>
            <double>4</double>
            <double>8</double>
            <double>16</double>
            <double>32</double>
            <double>32</double>
          </ESP>
          <ESPMetadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </ESPMetadata>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <InitialWater>
          <FractionFull>1</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
          <PercentMethod>FilledFromTop</PercentMethod>
        </InitialWater>
        <Sample name="InitialNitrogen">
          <Thickness>
            <double>100</double>
            <double>100</double>
            <double>200</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <NO3>
            <double>6.5</double>
            <double>2.1</double>
            <double>2.1</double>
            <double>1.7</double>
            <double>1.7</double>
            <double>1.7</double>
            <double>1.7</double>
          </NO3>
          <NH4>
            <double>0.6</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
      </Soil>
      <surfaceom name="SurfaceOrganicMatter">
        <PoolName type="text" description="Organic Matter pool name">pasture_residue</PoolName>
        <type type="text" description="Organic Matter type">pasture</type>
        <mass type="text" description="Initial surface residue (kg/ha)">1000</mass>
        <cnr type="text" description="C:N ratio of initial residue">80</cnr>
        <standing_fraction type="text" description="Fraction of residue standing">0.1</standing_fraction>
      </surfaceom>
      <Pasture name="Ryegrass">
        <initsection>
          <init name="published_events" array="T" />
          <init name="subscribed_events" array="T" />
          <init name="driver_connections" array="T" />
          <init name="param_file" kind="string">
            <val />
          </init>
          <init name="species" kind="string">
            <val>Perennial Ryegrass</val>
          </init>
          <init name="nutrients" kind="string">
            <val>N</val>
          </init>
          <init name="fertility" kind="double">
            <val>0.68</val>
          </init>
          <init name="layers" kind="double" array="T" unit="mm">
            <val>150</val>
            <val>150</val>
            <val>300</val>
            <val>300</val>
            <val>300</val>
            <val>300</val>
          </init>
          <init name="max_rtdep" kind="double" unit="mm">
            <val>700</val>
          </init>
          <init name="lagged_day_t" kind="double" unit="oC">
            <val>-999.9</val>
          </init>
          <init name="phenology" kind="double">
            <val>3.04999995231628</val>
          </init>
          <init name="flower_len" kind="double" unit="d">
            <val>0</val>
          </init>
          <init name="flower_time" kind="double" unit="d">
            <val>0</val>
          </init>
          <init name="senc_index" kind="double" unit="d">
            <val>0</val>
          </init>
          <init name="dorm_index" kind="double" unit="d">
            <val>0</val>
          </init>
          <init name="dorm_t" kind="double" unit="oC">
            <val>-999.9</val>
          </init>
          <init name="extinct_coeff" kind="double" array="T">
            <val>0</val>
            <val>0.600000023841858</val>
            <val>0.550000011920929</val>
          </init>
          <init name="green" array="T">
            <element>
              <field name="status" kind="string">
                <val>established</val>
              </field>
              <field name="herbage" array="T">
                <element>
                  <field name="dmd" kind="double" array="T" unit="kg/kg">
                    <val>0.825</val>
                  </field>
                  <field name="weight" kind="double" array="T" unit="kg/ha">
                    <val>1000</val>
                  </field>
                  <field name="n_conc" kind="double" array="T" unit="kg/kg">
                    <val>0</val>
                  </field>
                  <field name="p_conc" kind="double" array="T" unit="kg/kg" />
                  <field name="s_conc" kind="double" array="T" unit="kg/kg" />
                  <field name="spec_area" kind="double" array="T" unit="cm^2/g">
                    <val>10</val>
                  </field>
                </element>
                <element>
                  <field name="dmd" kind="double" array="T" unit="kg/kg">
                    <val>0.825</val>
                  </field>
                  <field name="weight" kind="double" array="T" unit="kg/ha">
                    <val>800</val>
                  </field>
                  <field name="n_conc" kind="double" array="T" unit="kg/kg">
                    <val>0</val>
                  </field>
                  <field name="p_conc" kind="double" array="T" unit="kg/kg" />
                  <field name="s_conc" kind="double" array="T" unit="kg/kg" />
                  <field name="spec_area" kind="double" array="T" unit="cm^2/g">
                    <val>10</val>
                  </field>
                </element>
              </field>
              <field name="root_wt" array="T">
                <element kind="double" array="T" unit="kg/ha">
                  <val>200</val>
                </element>
                <element kind="double" array="T" unit="kg/ha">
                  <val>0</val>
                </element>
              </field>
              <field name="rt_dep" kind="double" unit="mm">
                <val>600</val>
              </field>
              <field name="estab_index" kind="double">
                <val>0</val>
              </field>
              <field name="stress_index" kind="double">
                <val>0</val>
              </field>
              <field name="stem_reloc" kind="double" unit="kg/ha">
                <val>0</val>
              </field>
              <field name="frosts" kind="integer4">
                <val>0</val>
              </field>
            </element>
            <element>
              <field name="status" kind="string">
                <val>senescing</val>
              </field>
              <field name="herbage" array="T">
                <element>
                  <field name="dmd" kind="double" array="T" unit="kg/kg">
                    <val>0.825</val>
                  </field>
                  <field name="weight" kind="double" array="T" unit="kg/ha">
                    <val>500</val>
                  </field>
                  <field name="n_conc" kind="double" array="T" unit="kg/kg">
                    <val>0</val>
                  </field>
                  <field name="p_conc" kind="double" array="T" unit="kg/kg" />
                  <field name="s_conc" kind="double" array="T" unit="kg/kg" />
                  <field name="spec_area" kind="double" array="T" unit="cm^2/g">
                    <val>305</val>
                  </field>
                </element>
                <element>
                  <field name="dmd" kind="double" array="T" unit="kg/kg">
                    <val>0.825</val>
                  </field>
                  <field name="weight" kind="double" array="T" unit="kg/ha">
                    <val>1000</val>
                  </field>
                  <field name="n_conc" kind="double" array="T" unit="kg/kg">
                    <val>0</val>
                  </field>
                  <field name="p_conc" kind="double" array="T" unit="kg/kg" />
                  <field name="s_conc" kind="double" array="T" unit="kg/kg" />
                  <field name="spec_area" kind="double" array="T" unit="cm^2/g">
                    <val>55</val>
                  </field>
                </element>
              </field>
              <field name="root_wt" array="T">
                <element kind="double" array="T" unit="kg/ha">
                  <val>500</val>
                </element>
                <element kind="double" array="T" unit="kg/ha">
                  <val>0</val>
                </element>
              </field>
              <field name="rt_dep" kind="double" unit="mm">
                <val>600</val>
              </field>
              <field name="estab_index" kind="double">
                <val>0</val>
              </field>
              <field name="stress_index" kind="double">
                <val>0</val>
              </field>
              <field name="stem_reloc" kind="double" unit="kg/ha">
                <val>0</val>
              </field>
              <field name="frosts" kind="integer4">
                <val>0</val>
              </field>
            </element>
          </init>
          <init name="dry" array="T">
            <element>
              <field name="status" kind="string">
                <val>dead</val>
              </field>
              <field name="herbage" array="T">
                <element>
                  <field name="dmd" kind="double" array="T" unit="kg/kg">
                    <val>0.65</val>
                  </field>
                  <field name="weight" kind="double" array="T" unit="kg/ha">
                    <val>1000</val>
                  </field>
                  <field name="n_conc" kind="double" array="T" unit="kg/kg">
                    <val>0</val>
                  </field>
                  <field name="p_conc" kind="double" array="T" unit="kg/kg" />
                  <field name="s_conc" kind="double" array="T" unit="kg/kg" />
                  <field name="spec_area" kind="double" array="T" unit="cm^2/g">
                    <val>10</val>
                  </field>
                </element>
                <element>
                  <field name="dmd" kind="double" array="T" unit="kg/kg">
                    <val>0.35</val>
                  </field>
                  <field name="weight" kind="double" array="T" unit="kg/ha">
                    <val>1000</val>
                  </field>
                  <field name="n_conc" kind="double" array="T" unit="kg/kg">
                    <val>0</val>
                  </field>
                  <field name="p_conc" kind="double" array="T" unit="kg/kg" />
                  <field name="s_conc" kind="double" array="T" unit="kg/kg" />
                  <field name="spec_area" kind="double" array="T" unit="cm^2/g">
                    <val>10</val>
                  </field>
                </element>
              </field>
            </element>
            <element>
              <field name="status" kind="string">
                <val>litter</val>
              </field>
              <field name="herbage" array="T">
                <element>
                  <field name="dmd" kind="double" array="T" unit="kg/kg">
                    <val>0.65</val>
                  </field>
                  <field name="weight" kind="double" array="T" unit="kg/ha">
                    <val>500</val>
                  </field>
                  <field name="n_conc" kind="double" array="T" unit="kg/kg">
                    <val>0</val>
                  </field>
                  <field name="p_conc" kind="double" array="T" unit="kg/kg" />
                  <field name="s_conc" kind="double" array="T" unit="kg/kg" />
                  <field name="spec_area" kind="double" array="T" unit="cm^2/g">
                    <val>10</val>
                  </field>
                </element>
                <element>
                  <field name="dmd" kind="double" array="T" unit="kg/kg">
                    <val>0.35</val>
                  </field>
                  <field name="weight" kind="double" array="T" unit="kg/ha">
                    <val>500</val>
                  </field>
                  <field name="n_conc" kind="double" array="T" unit="kg/kg">
                    <val>0</val>
                  </field>
                  <field name="p_conc" kind="double" array="T" unit="kg/kg" />
                  <field name="s_conc" kind="double" array="T" unit="kg/kg" />
                  <field name="spec_area" kind="double" array="T" unit="cm^2/g">
                    <val>10</val>
                  </field>
                </element>
              </field>
            </element>
          </init>
          <init name="seeds">
            <field name="soft_unripe" kind="double" array="T" unit="kg/ha" />
            <field name="soft_ripe" kind="double" array="T" unit="kg/ha" />
            <field name="hard_unripe" kind="double" array="T" unit="kg/ha" />
            <field name="hard_ripe" kind="double" array="T" unit="kg/ha" />
          </init>
          <init name="seed_dorm_time" kind="double" unit="d">
            <val>0</val>
          </init>
          <init name="germ_index" kind="double" unit="d">
            <val>0</val>
          </init>
          <init name="kl" kind="single" array="T" unit="/d" />
          <init name="ll" kind="single" array="T" unit="mm/mm" />
        </initsection>
      </Pasture>
      <folder name="Manager folder">
        <manager2 name="Constants">
          <ui>
            <A type="text" description="Param A">Parameter value</A>
          </ui>
          <text>
using System;
using ModelFramework;

public class Script 
{      
   [Link] Paddock MyPaddock; // Can be used to dynamically get access to simulation structure and variables
   [Input] DateTime Today;   // Equates to the value of the current simulation date - value comes from CLOCK
   [Output()] public double[] sand;


   // The following event handler will be called once at the beginning of the simulation
   [EventHandler] public void OnInitialised()
   {
      // the grazplan pasture component requires some PSD values
      sand = new double[] {0.5, 0.45, 0.35, 0.35, 0.35, 0.25, 0.15, 0.15, 0.05, 0.05};
   }

   // The following event handler will be called each day at the beginning of the day
   [EventHandler] public void OnPrepare()
   {

   }

}
  </text>
        </manager2>
      </folder>
      <TextOutput name="DailyOutput">
        <initsection>
          <init name="published_events" array="T" />
          <init name="subscribed_events" array="T" />
          <init name="driver_connections" array="T" />
          <init name="filename" kind="string">
            <val>Wether in pasture crop rotation_PasturePaddock_DailyOutput.out</val>
          </init>
          <init name="interval" kind="integer4">
            <val>1</val>
          </init>
          <init name="intervalunit" kind="string">
            <val>day</val>
          </init>
          <init name="outputs" array="T">
            <element>
              <field name="varname" kind="string">
                <val>cover_tot</val>
              </field>
              <field name="alias" kind="string">
                <val>cover_tot</val>
              </field>
              <field name="aggreg" kind="string">
                <val />
              </field>
              <field name="decplaces" kind="integer4">
                <val>2</val>
              </field>
            </element>
            <element>
              <field name="varname" kind="string">
                <val>avail_dm</val>
              </field>
              <field name="alias" kind="string">
                <val>avail_dm</val>
              </field>
              <field name="aggreg" kind="string">
                <val />
              </field>
              <field name="decplaces" kind="integer4">
                <val>2</val>
              </field>
            </element>
            <element>
              <field name="varname" kind="string">
                <val>green_dm</val>
              </field>
              <field name="alias" kind="string">
                <val>green_dm</val>
              </field>
              <field name="aggreg" kind="string">
                <val />
              </field>
              <field name="decplaces" kind="integer4">
                <val>2</val>
              </field>
            </element>
            <element>
              <field name="varname" kind="string">
                <val>dry_dm</val>
              </field>
              <field name="alias" kind="string">
                <val>dry_dm</val>
              </field>
              <field name="aggreg" kind="string">
                <val />
              </field>
              <field name="decplaces" kind="integer4">
                <val>2</val>
              </field>
            </element>
            <element>
              <field name="varname" kind="string">
                <val>nh4_uptake</val>
              </field>
              <field name="alias" kind="string">
                <val>nh4_uptake</val>
              </field>
              <field name="aggreg" kind="string">
                <val />
              </field>
              <field name="decplaces" kind="integer4">
                <val>4</val>
              </field>
            </element>
          </init>
          <init name="summary_file" kind="string">
            <val />
          </init>
          <init name="apsim_format" kind="boolean">
            <val>true</val>
          </init>
          <init name="title" kind="string">
            <val>ApsimVersion = 7.10
Title = Wether in pasture crop rotation_PasturePaddock_DailyOutput.out</val>
          </init>
          <init name="outputfrequency" kind="string" array="T">
            <val>post</val>
          </init>
          <init name="dateformat" kind="string">
            <val>dd/MM/yyyy</val>
          </init>
        </initsection>
      </TextOutput>
      <GraphReport>
        <Graph name="GreenAndDry">
          <Legend>
            <CheckedTitles> green_dm</CheckedTitles>
            <CheckedTitles> dry_dm</CheckedTitles>
          </Legend>
          <Format></Format>
          <Plot>
            <SeriesType>Stacked area</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>green_dm</Y>
            <Y>dry_dm</Y>
            <GDApsimFileReader name="ApsimFileReader">
              <FileName>%apsim%\Examples\Wether in pasture crop rotation_PasturePaddock_DailyOutput.out</FileName>
            </GDApsimFileReader>
          </Plot>
        </Graph>
        <Graph name="Cover">
          <Legend>
            <CheckedTitles> Wether in pasture crop rotation_PasturePaddock_DailyOutput.out</CheckedTitles>
          </Legend>
          <Format></Format>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>cover_tot</Y>
            <GDApsimFileReader name="ApsimFileReader">
              <FileName>%apsim%\Examples\Wether in pasture crop rotation_PasturePaddock_DailyOutput.out</FileName>
            </GDApsimFileReader>
          </Plot>
        </Graph>
        <Graph name="Available">
          <Legend>
            <CheckedTitles> Wether in pasture crop rotation_PasturePaddock_DailyOutput.out</CheckedTitles>
          </Legend>
          <Format></Format>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>avail_dm</Y>
            <GDApsimFileReader name="ApsimFileReader">
              <FileName>%apsim%\Examples\Wether in pasture crop rotation_PasturePaddock_DailyOutput.out</FileName>
            </GDApsimFileReader>
          </Plot>
        </Graph>
      </GraphReport>
    </area>
    <area name="WheatPaddock">
      <paddock_area>100.0</paddock_area>
      <Soil>
        <RecordNumber>263</RecordNumber>
        <ASCOrder>Sodosol</ASCOrder>
        <ASCSubOrder>Red</ASCSubOrder>
        <SoilType>?</SoilType>
        <Site>Wagga Wagga</Site>
        <NearestTown>Wagga Wagga</NearestTown>
        <Region>Riverina</Region>
        <State>New South Wales</State>
        <Country>Australia</Country>
        <ApsoilNumber>550-YP</ApsoilNumber>
        <Latitude>-35.123</Latitude>
        <Longitude>147.354</Longitude>
        <LocationAccuracy>Regional Soil Type</LocationAccuracy>
        <YearOfSampling>0</YearOfSampling>
        <DataSource>PAWC estimated by A. Peake, CSIRO Sustainable Ecosystems (2005) </DataSource>
        <Water>
          <Thickness>
            <double>100</double>
            <double>100</double>
            <double>200</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <BD>
            <double>1.55</double>
            <double>1.55</double>
            <double>1.5</double>
            <double>1.5</double>
            <double>1.55</double>
            <double>1.55</double>
            <double>1.55</double>
          </BD>
          <AirDry>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.12</double>
            <double>0.12</double>
            <double>0.12</double>
            <double>0.12</double>
            <double>0.12</double>
          </AirDry>
          <LL15>
            <double>0.12</double>
            <double>0.1</double>
            <double>0.12</double>
            <double>0.12</double>
            <double>0.12</double>
            <double>0.12</double>
            <double>0.12</double>
          </LL15>
          <DUL>
            <double>0.24</double>
            <double>0.22</double>
            <double>0.24</double>
            <double>0.34</double>
            <double>0.34</double>
            <double>0.34</double>
            <double>0.34</double>
          </DUL>
          <SAT>
            <double>0.38</double>
            <double>0.39</double>
            <double>0.4</double>
            <double>0.4</double>
            <double>0.4</double>
            <double>0.4</double>
            <double>0.4</double>
          </SAT>
          <BDMetadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </BDMetadata>
          <AirDryMetadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </AirDryMetadata>
          <LL15Metadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </LL15Metadata>
          <DULMetadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </DULMetadata>
          <SATMetadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </SATMetadata>
          <SoilCrop name="wheat">
            <Thickness>
              <double>100</double>
              <double>100</double>
              <double>200</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.12</double>
              <double>0.1</double>
              <double>0.12</double>
              <double>0.17</double>
              <double>0.18</double>
              <double>0.22</double>
              <double>0.29</double>
            </LL>
            <KL>
              <double>0.06</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.04</double>
              <double>0.03</double>
              <double>0.02</double>
              <double>0.02</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
            <LLMetadata>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
            </LLMetadata>
          </SoilCrop>
          <SoilCrop name="barley">
            <Thickness>
              <double>100</double>
              <double>100</double>
              <double>200</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.12</double>
              <double>0.1</double>
              <double>0.12</double>
              <double>0.17</double>
              <double>0.18</double>
              <double>0.22</double>
              <double>0.29</double>
            </LL>
            <KL>
              <double>0.07</double>
              <double>0.07</double>
              <double>0.07</double>
              <double>0.07</double>
              <double>0.05</double>
              <double>0.05</double>
              <double>0.03</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
            <LLMetadata>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
            </LLMetadata>
          </SoilCrop>
          <SoilCrop name="oats">
            <Thickness>
              <double>100</double>
              <double>100</double>
              <double>200</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.12</double>
              <double>0.1</double>
              <double>0.12</double>
              <double>0.17</double>
              <double>0.18</double>
              <double>0.22</double>
              <double>0.29</double>
            </LL>
            <KL>
              <double>0.06</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.04</double>
              <double>0.03</double>
              <double>0.02</double>
              <double>0.02</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
            <LLMetadata>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
              <string>Estimated based on local knowledge</string>
            </LLMetadata>
          </SoilCrop>
        </Water>
        <SoilWater>
          <SummerCona>3.5</SummerCona>
          <SummerU>6</SummerU>
          <SummerDate>1-Nov</SummerDate>
          <WinterCona>2</WinterCona>
          <WinterU>2</WinterU>
          <WinterDate>1-Apr</WinterDate>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>78</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <Slope>NaN</Slope>
          <DischargeWidth>NaN</DischargeWidth>
          <CatchmentArea>NaN</CatchmentArea>
          <MaxPond>NaN</MaxPond>
          <Thickness>
            <double>100</double>
            <double>100</double>
            <double>200</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <SWCON>
            <double>0.6</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.4</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
        </SoilWater>
        <SoilOrganicMatter>
          <RootCN>45</RootCN>
          <RootWt>1500</RootWt>
          <SoilCN>12.5</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>100</double>
            <double>100</double>
            <double>200</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <OC>
            <double>1.23076923076923</double>
            <double>0.615384615384615</double>
            <double>0.307692307692308</double>
            <double>0.153846153846154</double>
            <double>0.0769230769230769</double>
            <double>0.0769230769230769</double>
            <double>0.0769230769230769</double>
          </OC>
          <OCMetadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </OCMetadata>
          <FBiom>
            <double>0.03</double>
            <double>0.02</double>
            <double>0.02</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
          </FBiom>
          <FInert>
            <double>0.4</double>
            <double>0.5</double>
            <double>0.7</double>
            <double>0.8</double>
            <double>0.9</double>
            <double>1</double>
            <double>1</double>
          </FInert>
          <OCUnits>WalkleyBlack</OCUnits>
        </SoilOrganicMatter>
        <Analysis>
          <Thickness>
            <double>100</double>
            <double>100</double>
            <double>200</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <Texture>
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
          </Texture>
          <MunsellColour>
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
          </MunsellColour>
          <EC>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </EC>
          <ECMetadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </ECMetadata>
          <PH>
            <double>6.6</double>
            <double>5.3</double>
            <double>6</double>
            <double>6.6</double>
            <double>9</double>
            <double>9</double>
            <double>9</double>
          </PH>
          <PHMetadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </PHMetadata>
          <CL>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </CL>
          <CLMetadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </CLMetadata>
          <ESP>
            <double>1</double>
            <double>2</double>
            <double>4</double>
            <double>8</double>
            <double>16</double>
            <double>32</double>
            <double>32</double>
          </ESP>
          <ESPMetadata>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
            <string>Estimated based on local knowledge</string>
          </ESPMetadata>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <InitialWater>
          <FractionFull>1</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
          <PercentMethod>FilledFromTop</PercentMethod>
        </InitialWater>
        <Sample name="InitialNitrogen">
          <Thickness>
            <double>100</double>
            <double>100</double>
            <double>200</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <NO3>
            <double>6.5</double>
            <double>2.1</double>
            <double>2.1</double>
            <double>1.7</double>
            <double>1.7</double>
            <double>1.7</double>
            <double>1.7</double>
          </NO3>
          <NH4>
            <double>0.6</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
      </Soil>
      <surfaceom name="SurfaceOrganicMatter">
        <PoolName type="text" description="Organic Matter pool name">wheat</PoolName>
        <type type="list" listvalues="bambatsi,barley,base_type,broccoli,camaldulensis,canola,centro,chickpea,chikenmanure_base,cm,cmA,cmB,constants,cotton,cowpea,danthonia,fababean,fieldpea,fym,gbean,globulus,goatmanure,grandis,grass,horsegram,inert,lablab,lentil,lucerne,lupin,maize,manB,manure,medic,millet,mucuna,nativepasture,navybean,oats,orobanche,peanut,pigeonpea,potato,rice,sorghum,soybean,stylo,sugar,sunflower,sweetcorn,sweetsorghum,tillage,tithonia,vetch,weed,wheat" description="Organic Matter type">wheat</type>
        <mass type="text" description="Initial surface residue (kg/ha)">1000</mass>
        <cnr type="text" description="C:N ratio of initial residue">80</cnr>
        <standing_fraction type="text" description="Fraction of residue standing">0.2</standing_fraction>
      </surfaceom>
      <fertiliser />
      <wheat />
      <folder name="Management">
        <manager2 name="Crop Management">
          <ui>
            <category type="category" description="Crop properties" />
            <crop type="crop" description="Name of this crop">wheat</crop>
            <category type="category" description="Sowing criteria" />
            <date1 type="ddmmmdate" description="Enter sowing window START date (dd-mmm)">15-may</date1>
            <date3 type="ddmmmdate" description="Enter cultivar change date (na if not in use)">na</date3>
            <date2 type="ddmmmdate" description="Enter sowing window END date (dd-mmm)">10-jul</date2>
            <must_sow type="yesno" description="Must Sow">no</must_sow>
            <rain_amount type="text" description="Enter amount of cumulative rainfall (mm)">25</rain_amount>
            <rain_days type="text" description="Enter number of days to accumulate rainfall (days)">7</rain_days>
            <esw_amount type="text" description="Enter amount of soil water (mm)">100</esw_amount>
            <category type="category" description="Sowing Parameters" />
            <cultivar1 type="cultivars" description="Enter cultivar : ">hartog</cultivar1>
            <cultivar2 type="cultivars" description="Enter 2nd Cultivar (na if not using a second cultivar)">na</cultivar2>
            <density1 type="text" description="Enter sowing density  (plants/m2)">100</density1>
            <depth1 type="text" description="Enter sowing depth  (mm)">30</depth1>
            <row_spacing1 type="text" description="Enter row spacing  (mm)">250</row_spacing1>
            <category type="category" description="Extra Parameters" />
            <ftn1 type="text" description="Enter Fertile Tiller Number (na for auto) : ">na</ftn1>
            <skiprow1 type="list" listvalues="solid, single, double" description="Skip row : ">solid</skiprow1>
            <tillageImplement type="text" description="Name of tillage implement (na if not in use): ">chisel</tillageImplement>
          </ui>
          <text>using System;
using ModelFramework;
using CSGeneral;

// Basic crop management: sowing &amp; harvesting.
// Multi-paddock aware.
// This component DOES NOT require a trigger from the sequencer.
// It will assume it is the only crop in the system if it doesnt find a sequencer.
// If it does find a sequencer, it will do nothing until told to (via Enter/Leave).
public class Script 
{      
   [Link] Paddock MyPaddock;
   [Link()] Cashbook cashbook;
   [Link()]  public Simulation MySimulation;
   
   [Param()] private string crop;         // The module name of this crop
   [Param()] private string date1;         //Start of sowing window
   [Param()] private string date2;         //End of sowing window
   [Param()] private string date3;         //date to change to different cultivar
   [Param()] int esw_amount;
   [Param()] private string must_sow;

   [Input()] private DateTime today;

   // Rainfall accumulator
   [Param()] int rain_days;              //check for rain over this period
   [Param()] int rain_amount;            //this much rain over that period

   // Daily rainfall from the system
   [Input] private double rain;
   private ManagerUtility.Tracker&lt;double&gt; rainTracker; 

   [Output()] public int CropHarvested {get{return crop_harvested;}} 
   [Output()] public double GrainSpilt {get{return grain_spilt;}} 
   private int crop_harvested;
   private double grain_spilt;
   
   private bool inWindow = false;
   private bool endOfWindow = false;
   private bool ChangeCultivar = false;

   //initialise tracker, telling it how many days to track
   [EventHandler] public void OnInitialised()
   {
      rainTracker = new ManagerUtility.Tracker&lt;double&gt;(rain_days); 
   }

   // Daily tests common to all paddocks
   [EventHandler] public void OnPrepare()
   {
      crop_harvested = 0;
      grain_spilt = 0;
      
      bool startOfWindow = DateUtility.DatesEqual(date1, today);

      inWindow = DateUtility.WithinDates(date1, today, date2);
      ChangeCultivar = false;
      if(date3 != "na")  
         ChangeCultivar = DateUtility.WithinDates(date3, today, date2);
      endOfWindow = DateUtility.DatesEqual(date2, today);

      rainTracker.Add(rain);
      string currentPaddock = "";
      if (MySimulation.Get("currentPaddock", out currentPaddock) == false) 
      {
         // If there is no sequencer plugged in then we are it..
         if (canEnter &gt; 0) {
            OnEnter();
         }
         if (canLeave &gt; 0) {
            OnLeave();
         }
      }
   }
   // Test whether we can sow a crop today
   // +ve number - yes
   // 0          - no
   // -ve number - no, out of scope (planting window)
   [Output, Description("Test whether we can sow a crop today")] 
   public int canEnter  {
      get {
         bool isPossibleToday = false;
         
         string currentPaddock;
         MySimulation.Get("currentPaddock", out currentPaddock);
         //Console.WriteLine("1. '" + currentPaddock + "'");

         Component paddockModule;
         if (currentPaddock != "")
            paddockModule = (Component) MySimulation.LinkByName(currentPaddock);
         else
            paddockModule = (Component) MySimulation.ChildPaddocks[1];
         //Console.WriteLine("2. " + paddockModule.Name);

         Component cropModule = (Component) paddockModule.LinkByName( crop );

         //Console.WriteLine("3. " + cropModule.Name);
         string plantStatus = "";
         cropModule.Get("plant_status", out plantStatus);

         double esw = 0.0;
         Component soilModule = (Component) paddockModule.LinkByType("SoilWat");
         soilModule.Get("esw", out esw);
         if (plantStatus == "out" &amp;&amp;
             inWindow &amp;&amp;
             rainTracker.Sum() &gt;= rain_amount &amp;&amp;
             esw &gt; esw_amount) 
         {
             isPossibleToday = true;
         } 

	     if (isPossibleToday)
            return 1;
         
         if (plantStatus == "out" &amp;&amp; endOfWindow &amp;&amp; must_sow == "yes")
            return 1;

         if (plantStatus == "out" &amp;&amp; !inWindow)
            return -1;
         
         return 0;
      }
   }  
   
   
   // Sow a crop
   [Param()] private string cultivar1;
   [Param()] private string cultivar2;
   [Param()] private double density1;
   [Param()] private double depth1;
   [Param()] private double row_spacing1;
   [Param()] private string ftn1;
   [Param()] private string skiprow1;
   [Param()] private string tillageImplement;
   
   [EventHandler, Description("Sow the crop")] 
   public void OnEnter()
   {
      Console.WriteLine(today + " Sowing Crop");
      SowType data = new SowType();
      data.Cultivar = cultivar1;
      if(ChangeCultivar)
         data.Cultivar = cultivar2;

      data.plants = density1;
      data.sowing_depth = depth1;
      data.row_spacing = row_spacing1;
      data.tiller_no_fertile = (ftn1 == "na") ? "" : ftn1;
      data.SkipRow = 0 ;
      if (skiprow1 == "single")
         data.SkipRow = 1;
      else if (skiprow1 == "double")
         data.SkipRow = 2;

      string currentPaddock;
      MySimulation.Get("currentPaddock", out currentPaddock);
      Component cropModule;
      if (currentPaddock != "")
         cropModule = (Component) MySimulation.LinkByName(currentPaddock + "." + crop);
      else 
         cropModule = (Component) MySimulation.ChildPaddocks[1].LinkByName(crop);

      cropModule.Publish("Sow", data);

      if (tillageImplement.ToLower() != "na") 
	  {
         TillageType t = new TillageType();
         t.type = tillageImplement;
         Component paddockModule;
         if (currentPaddock != "")
            paddockModule = (Component) MySimulation.LinkByName(currentPaddock);
         else
            paddockModule = MySimulation.ChildPaddocks[1];
         paddockModule.Publish("tillage", t);
      }		 
   }

   // Test whether we can harvest a crop today
   // +ve number - yes
   // 0          - no
   // -ve        - out of scope
   [Output] 
   public int canLeave  
   {
      get 
      {
         string currentPaddock;
         MySimulation.Get("currentPaddock", out currentPaddock);

         string plantStatus = "";
         MySimulation.Get((currentPaddock != "" ? currentPaddock + "." : "") + crop + ".plant_status", out plantStatus);
         if (plantStatus == "out")
            return -1;

         string StageName = "";
         MySimulation.Get((currentPaddock != "" ? currentPaddock + "." : "") + crop + ".StageName", out StageName);
         if (StageName == "harvest_ripe" || plantStatus == "dead")
            return 1;
         return 0;
      }
   }

   [EventHandler] 
   public void OnLeave()
   {
      Console.WriteLine(today + " Harvesting Crop");
      HarvestType hdata = new HarvestType();
      hdata.Remove = 0.0;
      string currentPaddock;
      MySimulation.Get("currentPaddock", out currentPaddock);
      Component cropModule;
      Component cropPaddock;
      if (currentPaddock != "")
      {
         cropModule = (Component) MySimulation.LinkByName(currentPaddock + "." + crop);
         cropPaddock = (Component) MySimulation.LinkByName(currentPaddock);
      }
      else
      {
         cropModule = (Component) MySimulation.ChildPaddocks[1].LinkByName(crop);   // WheatPaddock.wheat
         cropPaddock = (Component) MySimulation.ChildPaddocks[1];                   // WheatPaddock
      }
      
      // record the income from the harvest
      double area;
      cropPaddock.Get(cropPaddock.Name + ".area", out area);
      double crop_yield;
      cropModule.Get(cropModule.Name + ".Yield", out crop_yield);
            
      // spilt grain for stubble feeding
      double grainSpillage = 0.025;                      // kg split / kg of yield
      grain_spilt = crop_yield * grainSpillage;          // kg/ha spilt
      crop_yield -= grain_spilt;                         // kg/ha yield
      
      EarnType income = new EarnType();
      income.name = "wheat_sales";
      income.amount = 0.001 * area * crop_yield;
      cashbook.Earn(income);
      
      hdata.Height = 300.00;
      cropModule.Publish("harvest", hdata);
      crop_harvested = 1;                    // allows the grazing of stubbles to occure
      
      KillCropType kdata = new KillCropType();
      kdata.KillFraction = 0.0F;
      cropModule.Publish("killcrop", kdata);
      cropModule.Publish("end_crop");
   } 
}
       </text>
        </manager2>
        <manager2 name="Fertilise at Sowing">
          <ui>
            <tag type="category" description="When should fertiliser be applied" />
            <ModuleName type="modulename" description="On which module should the event come from: ">wheat</ModuleName>
            <EventName type="text" description="On which event should spraying be triggered">sowing</EventName>
            <tag type="category" description="Event details" />
            <fertType type="text" description="The type of fertiliser">urea_N</fertType>
            <fertAmt type="text" description="Amount of fertiliser to apply (kg/ha)">100</fertAmt>
          </ui>
          <text>using System;
using System.Linq;
using System.Collections.Generic;
using ModelFramework;

// Crop management: fertilise at sowing
// Multi-paddock aware.
// This component DOES NOT require a trigger from the sequencer.

public class Script 
{      
   [Link]  public Simulation MySimulation;
   [Param] string fertType;
   [Param] float fertAmt;
   [Param] string ModuleName;
   [Param] string EventName;
   
   [EventHandler] public void OnStart_Simulation()
   {
      foreach (Paddock paddock in MySimulation.ChildPaddocks) 
      {
         foreach (Component child in paddock.Children) {
            if(child.Name == ModuleName){
               RuntimeEventHandler.NullFunction curried = () =&gt; OnTrigger(paddock.Name);
               MySimulation.Subscribe(child.FullName + "." + EventName, curried);
               //Console.WriteLine("Subscribed '" + child.FullName + "." + EventName + " =&gt; " + paddock.Name + "'"); 
            }
         }
      }
   }

   public void OnTrigger(string paddock)
   {
      Console.WriteLine("Fertiliser OnTrigger called, paddock='" + paddock + "'"); 
      if (fertAmt &gt; 0) 
      {         
         Component paddockModule;
         if (paddock != "")
            paddockModule = (Component) MySimulation.LinkByName(paddock);
         else
            paddockModule = (Component) MySimulation.ChildPaddocks[0];
         //Console.WriteLine("2. " + paddockModule.Name);

         Fertiliser fertModule = (Fertiliser) paddockModule.LinkByName("Fertiliser");
         fertModule.Apply(fertAmt, 50, fertType);
      }
   }
}
       </text>
        </manager2>
        <manager2 name="SOMForStock">
          <ui />
          <text>
using System;
using System.Collections.Generic;
using ModelFramework;

/// &lt;summary&gt;
/// This script is designed to be the AvailableToAnimal interface for the SurfaceOM component.
/// &lt;/summary&gt;
public class Script 
{      
   [Link()] Simulation MySimulation;
   [Link] Paddock MyPaddock; // Can be used to dynamically get access to simulation structure and variables
   [Input] DateTime Today;   // Equates to the value of the current simulation date - value comes from CLOCK
   
   // the animal forage interface
   [Output()] public AvailableToAnimalType AvailableToAnimal {get {getSOMState(); return availableToStock;} set{;}}  
   [Writable, Output] public RemovedByAnimalType RemovedByAnimal {get {return removedByStock;} set {setSOM(value);}}
   
   private const int STANDING = 0;
   private const int LYING = 1;
   
   private SurfaceOM som;           // the surfaceom component that animals will forage on
   private RemovedByAnimalType removedByStock;
   private AvailableToAnimalType availableToStock;
   
   /// &lt;summary&gt;
   /// This is the list of valid residues that can be used here
   /// &lt;/summary&gt;
   private string[] residueTypes = new string[] { "wheat", "barley", "oats", "sorghum", "canola", "lupins", "fababean", "chickpea", "fieldpea" };
   private ResidueData[] ResidueDataArray;
   
   /// &lt;summary&gt;
   /// A lookup list of forage parameters
   /// &lt;/summary&gt;
   private Dictionary&lt;string, CropParams&gt; forageParams = new Dictionary&lt;string, CropParams&gt;();
   
   // The following event handler will be called once at the beginning of the simulation
   [EventHandler] public void OnInitialised()
   {
      som = (SurfaceOM) MyPaddock.LinkByType("SurfaceOM");
      
      removedByStock = new RemovedByAnimalType();
      availableToStock = new AvailableToAnimalType();
      
      // setup common forage type parameters objects
      forageParams.Add("wheat", new CerealParams());
      forageParams.Add("barley", new CerealParams());
      forageParams.Add("oats", new CerealParams());
      forageParams.Add("sorghum", new CerealParams());

      forageParams.Add("canola", new DicotParams());

      forageParams.Add("lupins", new LegumeParams());
      forageParams.Add("fababean", new LegumeParams());
      forageParams.Add("chickpea", new LegumeParams());
      forageParams.Add("fieldpea", new LegumeParams());
      
      readResidueParams(); // now read these parameters into the residue item
   }

   // The following event handler will be called each day at the beginning of the day
   [EventHandler] public void OnPrepare()
   {
      //double scover;
      //som.Get("surfaceom_cover", out scover);
      
   }

   [EventHandler] public void OnProcess()
   {
   }
   
   // Handle the response to the request for the SOM status
   [EventHandler] public void OnSurfaceOrganicMatterState(SurfaceOrganicMatterType data)
   {  
      storeResidueData(data);    // store the SOM data
      getGrazingData();          // populate the AvailableToAnimal
   }
   
   [EventHandler] public void OnPost()
   {

   }

   /// &lt;summary&gt;
   /// Store the SOM data retrieved from SurfaceOM 
   /// &lt;/summary&gt;
   /// &lt;param name="data"&gt;The SOM state&lt;/param&gt;
   private void storeResidueData(SurfaceOrganicMatterType data)
   {
      for (int Idx = 0; Idx &lt; ResidueDataArray.Length; Idx++)
         ResidueDataArray[Idx].Pools = null;
      
      for (int iType = 0; iType &lt; data.Pool.Length; iType++)
      {
         SurfaceOrganicMatterPoolType residueValue = data.Pool[iType];     // wheat, canola ......

         string sType = residueValue.OrganicMatterType;
         int Idx = ResidueDataArray.Length - 1;
         while ((Idx &gt;= 0) &amp;&amp; (string.Compare(sType, ResidueDataArray[Idx].ResidueType, true) != 0)) 
            Idx--;
         
         if (Idx &lt; 0) 
            ;//   log("Surface OM type " + sType + " not recognised in OnSurfaceOrganicMatterState()");
         else
         {
            ResidueDataArray[Idx].Pools = new PoolData[2, 3];
            for (int iPool = 0; iPool &lt;= Math.Min(2, residueValue.StandingFraction.Length - 1); iPool++)
            {
               FOMType fom = residueValue.StandingFraction[iPool];
               ResidueDataArray[Idx].Pools[0, iPool] = new PoolData();
               ResidueDataArray[Idx].Pools[0, iPool].DM = fom.amount; 
               ResidueDataArray[Idx].Pools[0, iPool].C = fom.C;
               ResidueDataArray[Idx].Pools[0, iPool].N = fom.N; 
               ResidueDataArray[Idx].Pools[0, iPool].P = fom.P;
               ResidueDataArray[Idx].Pools[0, iPool].AshAlk = fom.AshAlk;
            }
            
            for (int iPool = 0; iPool &lt;= Math.Min(2, residueValue.LyingFraction.Length - 1); iPool++)
            {
               FOMType fom = residueValue.LyingFraction[iPool];
               ResidueDataArray[Idx].Pools[1, iPool] = new PoolData();
               ResidueDataArray[Idx].Pools[1, iPool].DM = fom.amount;
               ResidueDataArray[Idx].Pools[1, iPool].C = fom.C;
               ResidueDataArray[Idx].Pools[1, iPool].N = fom.N; 
               ResidueDataArray[Idx].Pools[1, iPool].P = fom.P;
               ResidueDataArray[Idx].Pools[1, iPool].AshAlk = fom.AshAlk;
            }
            ResidueDataArray[Idx].PotDecomp = residueValue.PotDecompRate;
         }
      }
   }

   //=========================================================================
   /// &lt;summary&gt;
   /// Using the SOM state data, populate an AvailableToAnimal
   /// &lt;/summary&gt;
   private void getGrazingData()
   {
      
      string[] organ = new string[]{"standing", "lying"};
      double[] height = new double[]{300.0, 90.0};
            
      // populate the forage structure for animals
      List&lt;AvailableToAnimalelementType&gt; cohorts = new List&lt;AvailableToAnimalelementType&gt;();
      
      for (int Idx = 0; Idx &lt; ResidueDataArray.Length; Idx++)     
      {
         // each residue type that has data from SOM
         ResidueData residue = ResidueDataArray[Idx];
         
         // if there was residue found in SOM for this residue type
         if (residue.Pools != null)
         {
            // get the weighted averages for N and DMD of the standing and lying pools
            double biomass;
            double sumDMD;
            double sumN;
            double sumAsh;
            for (int part = STANDING; part &lt;= LYING; part++)
            {
               biomass = 0;
               sumDMD = 0;
               sumN = 0;
               sumAsh = 0;
               // carbohydrate, cellulose, lignin 
               for (int i = 0; i &lt; 3; i++)
               {
                  biomass += residue.Pools[part, i].DM;
                  sumDMD += calcPoolDMD(Idx, residue.Pools[part, i].N / residue.Pools[part, i].DM) * residue.Pools[part, i].DM;
                  sumN += residue.Pools[part, i].DM * residue.Pools[part, i].N;
                  sumAsh += residue.Pools[part, i].DM * residue.Pools[part, i].AshAlk;
               }
               // store the ratio of this pool DM to the total standing or lying
               for (int i = 0; i &lt; 3; i++)
                  ResidueDataArray[Idx].Pools[part, i].DmFract = residue.Pools[part, i].DM / biomass;
                  
               double avDMD = sumDMD / biomass;
               double avN = sumN / biomass;
               double avAsh = sumAsh / biomass;
            
               AvailableToAnimalelementType cohort = new AvailableToAnimalelementType();
               cohort.CohortID = residue.ResidueType;
               cohort.Organ = organ[part];
               cohort.AgeID = "senesced";
               cohort.Bottom = 20;
               cohort.Top = height[part];
               cohort.Chem = "ddm";
               cohort.Weight = biomass * avDMD;
               cohort.N = avN * avDMD;
               cohort.P = 0;
               cohort.S = cohort.N * residue.S2N;
               cohort.AshAlk = avAsh * avDMD;
               cohorts.Add(cohort);
            
               cohort = new AvailableToAnimalelementType();
               cohort.CohortID = residue.ResidueType;
               cohort.Organ = organ[part];
               cohort.AgeID = "senesced";
               cohort.Bottom = 0;
               cohort.Top = height[part];
               cohort.Chem = "idm";
               cohort.Weight = biomass * (1 - avDMD);
               cohort.N = avN * (1 - avDMD);
               cohort.P = 0;
               cohort.S = cohort.N * residue.S2N;
               cohort.AshAlk = avAsh * (1 - avDMD);
               cohorts.Add(cohort);
            }
         }
      }
      
      availableToStock.element = new AvailableToAnimalelementType[cohorts.Count];
      for(int c = 0; c &lt; cohorts.Count; c++)
      {
         availableToStock.element[c] = new AvailableToAnimalelementType();
         availableToStock.element[c].CohortID = cohorts[c].CohortID;
         availableToStock.element[c].Organ = cohorts[c].Organ;
         availableToStock.element[c].AgeID = cohorts[c].AgeID;
         availableToStock.element[c].Bottom = cohorts[c].Bottom;
         availableToStock.element[c].Top = cohorts[c].Top;
         availableToStock.element[c].Chem = cohorts[c].Chem;
         availableToStock.element[c].Weight = cohorts[c].Weight;
         availableToStock.element[c].N = cohorts[c].N;
         availableToStock.element[c].P = cohorts[c].P;
         availableToStock.element[c].S = cohorts[c].S;
         availableToStock.element[c].AshAlk = cohorts[c].AshAlk;
         //log(string.Format("Available: {0} {1} {2} {3}", cohorts[c].CohortID, cohorts[c].Organ, cohorts[c].Chem, cohorts[c].Weight));
      }
   }
     
   private double[] ClassDig = new double[] {0.8,0.7,0.6,0.5,0.4,0.3};
   
   /// &lt;summary&gt;
   /// Do some estimation of the DMD for the N concentration value
   /// &lt;/summary&gt;
   /// &lt;param name="residueIdx"&gt;The residue item/type&lt;/param&gt;
   /// &lt;param name="NConc"&gt;The N value&lt;/param&gt;
   /// &lt;returns&gt;Estimate of the DMD&lt;/returns&gt;
   private double calcPoolDMD(int residueIdx, double NConc)
   {
      double dmd;
      ResidueData residueData = ResidueDataArray[residueIdx];
      
      if (NConc &gt;= residueData.RefNConc[0])
         dmd = ClassDig[0];
      else if (NConc &lt;= residueData.RefNConc[5])
         dmd = ClassDig[5];
      else
      {
         // fairly rough interpolation estimate
         int z = 1;
         while (NConc &lt; residueData.RefNConc[z])
         {
            z++;
         }

         double fracN = (NConc - residueData.RefNConc[z]) / (residueData.RefNConc[z - 1] - residueData.RefNConc[z]);
         double digWidth = ClassDig[z - 1] - ClassDig[z];
         dmd = fracN * digWidth + ClassDig[z];
      }
      return dmd;
   }
          
   /// &lt;summary&gt;
   /// Make a request for the SOM state hence triggering an event
   /// &lt;/summary&gt;
   private void getSOMState()
   { 
      // request the SOM status and it will be handled by OnSurfaceOrganicMatterState()
      if (som != null)
      {
         int som_status;
         som.Get("surface_organic_matter", out som_status);
      }
      else
         log("Cannot request surface_organic_matter in getSOMState()");
   }
   
   /// &lt;summary&gt;
   /// Is called whenever the Stock component sets a RemovedByAnimal value.
   /// The forage removed is then removed from SOM. 
   /// &lt;/summary&gt;
   /// &lt;param name="removed"&gt;The residue removed by Stock&lt;/param&gt;
   private void setSOM(RemovedByAnimalType removed)
   {
      //log("setSOM");
      // the RemovedByAnimal structure has been populated by Stock.
      if (removed != null)
      {
         if (removed.element != null)
         {
            List&lt;string&gt; residueList = new List&lt;string&gt;();
            SurfaceOrganicMatterType somRemoved = new SurfaceOrganicMatterType();
            
            // more than one residue can be removed
            // get a unique list of residues removed
            for (int c = 0; c &lt; removed.element.Length; c++)
            {
               if (residueList.IndexOf(removed.element[c].CohortID) &lt; 0)
               {
                  residueList.Add(removed.element[c].CohortID);
               }
            }
            
            // create all the removal pools
            int somTypes = residueList.Count; // the som types removed
            somRemoved.Pool = new SurfaceOrganicMatterPoolType[somTypes];
            for (int idx = 0; idx &lt; residueList.Count; idx++)        // for each residue
            {
               somRemoved.Pool[idx] = new SurfaceOrganicMatterPoolType();
               somRemoved.Pool[idx].OrganicMatterType = residueList[idx];     // name of the residue type
               somRemoved.Pool[idx].Name = residueList[idx];     // name of the residue type
               
               // find the residue data details used when retrieving the residue and populating AvailableToAnimal (assuming everything is synchronous)
               int resIdx = ResidueDataArray.Length - 1;
               while ((resIdx &gt;= 0) &amp;&amp; (string.Compare(residueList[idx], ResidueDataArray[resIdx].ResidueType, true) != 0)) 
                  resIdx--;
               
               if (resIdx &gt;= 0)
               {
                  // create the pools
                  somRemoved.Pool[idx].StandingFraction = new FOMType[3];
                  somRemoved.Pool[idx].LyingFraction = new FOMType[3];
                  for(int i = 0;i &lt; 3;i++)
                  {
                     somRemoved.Pool[idx].StandingFraction[i] = new FOMType();
                     somRemoved.Pool[idx].LyingFraction[i] = new FOMType();
                  }
                  
                  somRemoved.Pool[idx].PotDecompRate = Convert.ToSingle(ResidueDataArray[resIdx].PotDecomp);
                  
                  double totalFromLying = 0;
                  double totalFromStanding = 0;
                  for (int c = 0; c &lt; removed.element.Length; c++)
                  {
                     //log(string.Format("Removed: {0} {1} {2} {3}", removed.element[c].CohortID, removed.element[c].Organ, removed.element[c].Chem, removed.element[c].WeightRemoved));
            
                     if (string.Compare(residueList[idx], removed.element[c].CohortID, true) == 0) // if this cohort returned is the residue
                     {
                        if (removed.element[c].Organ == "standing")
                           totalFromStanding += removed.element[c].WeightRemoved;
                        else
                           totalFromLying += removed.element[c].WeightRemoved; // calculate the removal
                     } 
                  }  // next cohort
                  
                  // proportion out the total standing or lying into the 3 pools
                  for (int pool = 0; pool &lt; 3; pool++)
                  {
                     somRemoved.Pool[idx].StandingFraction[pool].amount = (float) (ResidueDataArray[resIdx].Pools[STANDING, pool].DmFract * totalFromStanding);
                     double dmRemovedFract = 0.0;
                     if (ResidueDataArray[resIdx].Pools[STANDING, pool].DM &gt; 0)
                        dmRemovedFract = somRemoved.Pool[idx].StandingFraction[pool].amount / ResidueDataArray[resIdx].Pools[STANDING, pool].DM; // prop removed
                     
                     // proportion the removal of the following properties
                     somRemoved.Pool[idx].StandingFraction[pool].N = (float) (ResidueDataArray[resIdx].Pools[STANDING, pool].N * dmRemovedFract);
                     somRemoved.Pool[idx].StandingFraction[pool].P = (float) (ResidueDataArray[resIdx].Pools[STANDING, pool].P * dmRemovedFract);
                     somRemoved.Pool[idx].StandingFraction[pool].C = (float) (ResidueDataArray[resIdx].Pools[STANDING, pool].C * dmRemovedFract);
                     somRemoved.Pool[idx].StandingFraction[pool].AshAlk = (float) (ResidueDataArray[resIdx].Pools[STANDING, pool].AshAlk * dmRemovedFract);
                  }
                  for (int pool = 0; pool &lt; 3; pool++)
                  {
                     somRemoved.Pool[idx].LyingFraction[pool].amount = (float) (ResidueDataArray[resIdx].Pools[LYING, pool].DmFract * totalFromLying);
                     double dmRemovedFract = 0.0;
                     if (ResidueDataArray[resIdx].Pools[LYING, pool].DM &gt; 0)
                        dmRemovedFract = somRemoved.Pool[idx].LyingFraction[pool].amount / ResidueDataArray[resIdx].Pools[LYING, pool].DM; // prop removed
                     
                     somRemoved.Pool[idx].LyingFraction[pool].N = (float) (ResidueDataArray[resIdx].Pools[LYING, pool].N * dmRemovedFract);
                     somRemoved.Pool[idx].LyingFraction[pool].P = (float) (ResidueDataArray[resIdx].Pools[LYING, pool].P * dmRemovedFract);
                     somRemoved.Pool[idx].LyingFraction[pool].C = (float) (ResidueDataArray[resIdx].Pools[LYING, pool].C * dmRemovedFract);
                     somRemoved.Pool[idx].LyingFraction[pool].AshAlk = (float) (ResidueDataArray[resIdx].Pools[LYING, pool].AshAlk * dmRemovedFract);
                  }
               }
            }  // next residue
            // Send the removal to Surface OM
            som.RemoveSurfaceom(somRemoved);  //call SOM.remove_surfaceom
         }
      } 
   }
   
   private void log(string msg)
   {
      Console.WriteLine(msg);
   }
   
   /// &lt;summary&gt;
   /// Copy the forage parameters into the residue structures
   /// &lt;/summary&gt;
   private void readResidueParams()
   {
      ResidueDataArray = new ResidueData[residueTypes.Length];
      for (int i = 0; i &lt; residueTypes.Length;i++)
      {
         CropParams forage;
         string residueName = residueTypes[i];
         if (forageParams.TryGetValue(residueName, out forage))
         {
            ResidueDataArray[i] = new ResidueData();
            ResidueData item = ResidueDataArray[i];
            item.ResidueType = residueName;
            if (forage.IsLegume)
               item.Legume = 1.0;
            else
               item.Legume = 0.0;
            item.RefNConc = forage.ResidueRefNConc;
            item.CP2N = forage.CP2N[ParamConsts.STEM];
            item.P2N = forage.P2N[ParamConsts.STEM];
            item.S2N = forage.S2N[ParamConsts.STEM];
            item.AshAlkalinity = forage.AshAlk[ParamConsts.STEM];
            ResidueDataArray[i] = item;
         }
         else
            log("Missing surface OM type " + residueTypes[i]);
      }
   }
}
  

///&lt;summary&gt;
/// Constants used when accessing forage parameters
///&lt;/summary&gt;
public class ParamConsts
{
   // age
   static public int GREEN = 0;
   static public int SEN = 1;
   static public int DEAD = 2;

   // part
   //static public int ROOT = 0;
   static public int LEAF = 0;
   static public int STEM = 1;
   static public int POD = 2;
   static public int MEAL = 3;
   static public int OIL = 4;

   static public string[] PLANT_PART = new string[] { "leaf", "stem", "pod", "meal", "oil" };
   static public string[] PLANT_COMP = new string[] { "green", "senesced", "dead" };
}

///&lt;summary&gt;
/// Base class for any forage parameters
///&lt;/summary&gt;
public class CropParams
{
   public bool IsLegume;

   public double[,] MaxDMD;           // [age, part]
   public double[,] MinDMD;           // [age, part]

   // interpolation - average DMD vs stage
   public double[] StagePoints;       // [stage] 
   public double[,,] StageDMD;        // [age, part, stage]

   public double SeedRipeStage;
   public double[] SeedDMD;           // [part]  part = POD..OIL
   public int[] SeedClass;            // [UNRIPE..RIPE]

   public double[] CP2N;              // [part] part = leaf..oil
   public double[] P2N;               // [part] part = leaf..oil
   public double[] S2N;               // [part] part = leaf..oil
   public double[] AshAlk;            // [part] part = leaf..oil

   public int DefolStageCount;
   public double[] DefolStagePoints;  // [stage]
   public double[] DefolStageLower;   // [stage]
   public double[] DefolStageUpper;   // [stage]
   public double DefolPower;

   /// &lt;summary&gt;
   /// reference N concentrations of each DMD class (80%-30%) for use with SurfaceOM 
   /// &lt;/summary&gt;
   public double[] ResidueRefNConc;
}

/// &lt;summary&gt;
/// Cereal crops
/// &lt;/summary&gt;
public class CerealParams : CropParams
{
   /// &lt;summary&gt;
   /// wheat, barley, oats, sorghum
   /// &lt;/summary&gt;
   public CerealParams()
   {
      this.IsLegume = false;
      //                        leaf stem 
      this.MaxDMD = new double[,] {{0.85,0.85},   //green
                                   {0.75,0.55},   //sen 
                                   {0.75,0.55} }; //dead          

      this.MinDMD = new double[,]{{0.50,0.45},    //green
                                  {0.40,0.25},    //sen 
                                  {0.40,0.25} };  //dead          

      // interpolation - average DMD vs stage
      this.StagePoints = new double[] { 0.0, 5.0, 6.0, 6.5, 8.0, 9.0, 10.0, 11.0 };
      this.StageDMD = new double[,,] { //green
         {
            {0.82, 0.82, 0.82, 0.82, 0.70, 0.68, 0.68, 0.68}, //leaf
            {0.82, 0.82, 0.65, 0.64, 0.59, 0.51, 0.42, 0.30 } //stem   
         },
         { //sen
            {0.75, 0.75, 0.70, 0.68, 0.60, 0.58, 0.50, 0.43}, //leaf
            {0.55, 0.55, 0.55, 0.55, 0.45, 0.38, 0.30, 0.30}  //stem
         },
         { //dead
            {0.60, 0.60, 0.60, 0.60, 0.60, 0.57, 0.43, 0.43}, //leaf
            {0.55, 0.55, 0.55, 0.55, 0.45, 0.38, 0.30, 0.30}  //stem
         }
         };
      this.SeedRipeStage = 9.0;
      this.SeedClass = new int[] { 1, 3 };
      this.SeedDMD = new double[] { 0, 0, 0.67, 0.9, 1.0 };

      this.CP2N = new double[] { 6.25, 6.25, 6.25, 5.70, 5.70 };
      this.P2N = new double[] { 0.05, 0.05, 0.05, 0.15, 0.00 };
      this.S2N = new double[] { 0.07, 0.07, 0.07, 0.09, 0.00 };
      this.AshAlk = new double[] { 0.60, 0.60, 1.10, 1.10, 1.10 };

      this.ResidueRefNConc = new double[] { 0.040, 0.029, 0.019, 0.011, 0.005, 0.003 };
   }
}

/// &lt;summary&gt;
/// Dicot crops
/// &lt;/summary&gt;    
public class DicotParams : CropParams
{
   /// &lt;summary&gt;
   /// canola
   /// &lt;/summary&gt;
   public DicotParams()
   {
      this.IsLegume = false;
      //                        leaf stem 
      this.MaxDMD = new double[,] {{0.85,0.85},   //green
                                   {0.75,0.55},   //sen 
                                   {0.75,0.55} }; //dead          

      this.MinDMD = new double[,]{{0.50,0.45},    //green
                                  {0.40,0.25},    //sen 
                                  {0.40,0.25} };  //dead          

      // interpolation - average DMD vs stage
      this.StagePoints = new double[] { 0.00, 6.00, 7.00, 8.00, 10.00 };
      this.StageDMD = new double[,,] { //green
         {
            {0.84, 0.84, 0.78, 0.55, 0.55}, //leaf
            {0.84, 0.84, 0.76, 0.50, 0.50} //stem   
         },
         { //sen
            {0.60, 0.60, 0.56, 0.40, 0.40}, //leaf
            {0.55, 0.55, 0.49, 0.30, 0.30}  //stem
         },
         { //dead
            {0.60, 0.60, 0.56, 0.40, 0.40}, //leaf
            {0.55, 0.55, 0.49, 0.30, 0.30}  //stem
         }
         };
      this.SeedRipeStage = 9.0;
      this.SeedClass = new int[] { 1, 3 };
      this.SeedDMD = new double[] { 0, 0, 0.65, 0.67, 1.00 };

      this.CP2N = new double[] { 6.25, 6.25, 6.25, 5.70, 5.70 };
      this.P2N = new double[] { 0.12, 0.12, 0.12, 0.27, 0.00 };
      this.S2N = new double[] { 0.30, 0.30, 0.30, 0.21, 0.00 };
      this.AshAlk = new double[] { 1.15, 1.15, 1.15, 0.75, 0.00 };

      this.ResidueRefNConc = new double[] { 0.040, 0.029, 0.019, 0.011, 0.005, 0.003 };
   }
}

/// &lt;summary&gt;
/// Legume crops
/// &lt;/summary&gt;
public class LegumeParams : DicotParams
{
   /// &lt;summary&gt;
   /// lupin, fababean, chickpea, fieldpea
   /// &lt;/summary&gt;
   public LegumeParams()
   {
      this.IsLegume = true;
      this.ResidueRefNConc = new double[] { 0.052, 0.037, 0.025, 0.015, 0.006, 0.004 };
   }
}

public class ResidueData
{
   public string ResidueType;
   public double Legume;
   public double[] RefNConc = new double[6]; // DigClassArray;
   public double CP2N;
   public double P2N;
   public double S2N;
   public double AshAlkalinity;
   public PoolData[,] Pools = new PoolData[2, 3];  //standing/lying, OM pool

   public double PotDecomp;
}

public class PoolData
{
   public double DM;
   public double C;
   public double N;
   public double P;
   public double AshAlk;
   public double DmFract;
   //public double NConc;  // [N] in DMD pool
   //public double PConc;  // [P] in DMD pool
}

</text>
        </manager2>
      </folder>
      <TextOutput name="DailyOutput">
        <initsection>
          <init name="published_events" array="T" />
          <init name="subscribed_events" array="T" />
          <init name="driver_connections" array="T" />
          <init name="filename" kind="string">
            <val>Wether in pasture crop rotation_WheatPaddock_DailyOutput.out</val>
          </init>
          <init name="interval" kind="integer4">
            <val>1</val>
          </init>
          <init name="intervalunit" kind="string">
            <val>day</val>
          </init>
          <init name="outputs" array="T">
            <element>
              <field name="varname" kind="string">
                <val>biomass</val>
              </field>
              <field name="alias" kind="string">
                <val>biomass</val>
              </field>
              <field name="aggreg" kind="string">
                <val />
              </field>
              <field name="decplaces" kind="integer4">
                <val>2</val>
              </field>
            </element>
            <element>
              <field name="varname" kind="string">
                <val>green_biomass</val>
              </field>
              <field name="alias" kind="string">
                <val>green_biomass</val>
              </field>
              <field name="aggreg" kind="string">
                <val />
              </field>
              <field name="decplaces" kind="integer4">
                <val>2</val>
              </field>
            </element>
            <element>
              <field name="varname" kind="string">
                <val>paddock</val>
              </field>
              <field name="alias" kind="string">
                <val>animals_paddock</val>
              </field>
              <field name="aggreg" kind="string">
                <val />
              </field>
              <field name="decplaces" kind="integer4">
                <val>0</val>
              </field>
            </element>
            <element>
              <field name="varname" kind="string">
                <val>cover_tot</val>
              </field>
              <field name="alias" kind="string">
                <val>cover_tot</val>
              </field>
              <field name="aggreg" kind="string">
                <val />
              </field>
              <field name="decplaces" kind="integer4">
                <val>2</val>
              </field>
            </element>
            <element>
              <field name="varname" kind="string">
                <val>surfaceom_cover</val>
              </field>
              <field name="alias" kind="string">
                <val>surfaceom_cover</val>
              </field>
              <field name="aggreg" kind="string">
                <val />
              </field>
              <field name="decplaces" kind="integer4">
                <val>2</val>
              </field>
            </element>
          </init>
          <init name="summary_file" kind="string">
            <val />
          </init>
          <init name="apsim_format" kind="boolean">
            <val>true</val>
          </init>
          <init name="title" kind="string">
            <val>ApsimVersion = 7.10
Title = Wether in pasture crop rotation_WheatPaddock_DailyOutput.out</val>
          </init>
          <init name="outputfrequency" kind="string" array="T">
            <val>post</val>
          </init>
          <init name="dateformat" kind="string">
            <val>dd/MM/yyyy</val>
          </init>
        </initsection>
      </TextOutput>
      <TextOutput name="Summary">
        <initsection>
          <init name="published_events" array="T" />
          <init name="subscribed_events" array="T" />
          <init name="driver_connections" array="T" />
          <init name="filename" kind="string">
            <val>Wether in pasture crop rotation_WheatPaddock_Summary.out</val>
          </init>
          <init name="interval" kind="integer4">
            <val>1</val>
          </init>
          <init name="intervalunit" kind="string">
            <val>year</val>
          </init>
          <init name="outputs" array="T">
            <element>
              <field name="varname" kind="string">
                <val>yield</val>
              </field>
              <field name="alias" kind="string">
                <val>Yield_kg/ha</val>
              </field>
              <field name="aggreg" kind="string">
                <val>max</val>
              </field>
              <field name="decplaces" kind="integer4">
                <val>2</val>
              </field>
            </element>
          </init>
          <init name="summary_file" kind="string">
            <val />
          </init>
          <init name="apsim_format" kind="boolean">
            <val>true</val>
          </init>
          <init name="title" kind="string">
            <val>ApsimVersion = 7.10
Title = Wether in pasture crop rotation_WheatPaddock_Summary.out</val>
          </init>
          <init name="outputfrequency" kind="string" array="T">
            <val>post</val>
          </init>
          <init name="dateformat" kind="string">
            <val>dd/MM/yyyy</val>
          </init>
        </initsection>
      </TextOutput>
      <Graph name="Biomass">
        <Legend>
        </Legend>
        <Format></Format>
        <Plot>
          <SeriesType>Solid line</SeriesType>
          <PointType>Circle</PointType>
          <colour>
          </colour>
          <X>Date</X>
          <Y>green_biomass</Y>
          <GDApsimFileReader name="ApsimFileReader">
            <FileName>%apsim%\Examples\Wether in pasture crop rotation WheatPaddock_DailyOutput.out</FileName>
          </GDApsimFileReader>
        </Plot>
      </Graph>
      <Graph name="Yield">
        <Legend>
          <CheckedTitles> Wether in pasture crop rotation WheatPaddock_Summary.out</CheckedTitles>
        </Legend>
        <Plot>
          <SeriesType>Bar</SeriesType>
          <PointType>Circle</PointType>
          <colour>
          </colour>
          <X>Date</X>
          <Y>Yield_kg/ha</Y>
          <GDApsimFileReader name="ApsimFileReader">
            <FileName>%apsim%\Examples\Wether in pasture crop rotation WheatPaddock_Summary.out</FileName>
          </GDApsimFileReader>
        </Plot>
      </Graph>
      <AusFarmManager>
        <initsection />
      </AusFarmManager>
    </area>
    <area name="Feedlot">
      <paddock_area>10</paddock_area>
      <Soil>
        <RecordNumber>0</RecordNumber>
        <SoilType>Black Vertosol</SoilType>
        <Site>Generic</Site>
        <Region>South East Queensland</Region>
        <Latitude>0</Latitude>
        <Longitude>0</Longitude>
        <YearOfSampling>0</YearOfSampling>
        <Water>
          <SoilCrop name="wheat">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.32</double>
              <double>0.32</double>
              <double>0.35</double>
              <double>0.38</double>
              <double>0.41</double>
              <double>0.48</double>
              <double>0.47</double>
              <double>0.46</double>
              <double>0.44</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="barley">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.32</double>
              <double>0.38</double>
              <double>0.39</double>
              <double>0.39</double>
              <double>0.41</double>
              <double>0.48</double>
              <double>0.47</double>
              <double>0.46</double>
              <double>0.44</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="canola">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.32</double>
              <double>0.32</double>
              <double>0.35</double>
              <double>0.38</double>
              <double>0.41</double>
              <double>0.48</double>
              <double>0.47</double>
              <double>0.46</double>
              <double>0.44</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Chickpea">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.36</double>
              <double>0.43</double>
              <double>0.51</double>
              <double>0.5</double>
              <double>0.5</double>
              <double>0.48</double>
              <double>0.47</double>
              <double>0.46</double>
              <double>0.44</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Lucerne">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.3</double>
              <double>0.31</double>
              <double>0.32</double>
              <double>0.33</double>
              <double>0.34</double>
              <double>0.35</double>
              <double>0.36</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.09</double>
              <double>0.09</double>
              <double>0.09</double>
              <double>0.09</double>
              <double>0.09</double>
              <double>0.09</double>
              <double>0.09</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Maize">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.34</double>
              <double>0.34</double>
              <double>0.37</double>
              <double>0.4</double>
              <double>0.42</double>
              <double>0.48</double>
              <double>0.47</double>
              <double>0.46</double>
              <double>0.44</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Perennial Grass">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.39</double>
              <double>0.41</double>
              <double>0.4</double>
              <double>0.4</double>
              <double>0.41</double>
              <double>0.41</double>
              <double>0.4</double>
              <double>0.4</double>
              <double>0.42</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.09</double>
              <double>0.07</double>
              <double>0.05</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Sorghum">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.35</double>
              <double>0.38</double>
              <double>0.4</double>
              <double>0.4</double>
              <double>0.4</double>
              <double>0.48</double>
              <double>0.47</double>
              <double>0.46</double>
              <double>0.44</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Cowpea">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.32</double>
              <double>0.32</double>
              <double>0.35</double>
              <double>0.38</double>
              <double>0.41</double>
              <double>0.48</double>
              <double>0.47</double>
              <double>0.46</double>
              <double>0.44</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Fababean">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.32</double>
              <double>0.32</double>
              <double>0.35</double>
              <double>0.38</double>
              <double>0.41</double>
              <double>0.48</double>
              <double>0.47</double>
              <double>0.46</double>
              <double>0.44</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Mungbean">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.32</double>
              <double>0.32</double>
              <double>0.35</double>
              <double>0.38</double>
              <double>0.41</double>
              <double>0.48</double>
              <double>0.47</double>
              <double>0.46</double>
              <double>0.44</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Navybean">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.32</double>
              <double>0.32</double>
              <double>0.35</double>
              <double>0.38</double>
              <double>0.41</double>
              <double>0.48</double>
              <double>0.47</double>
              <double>0.46</double>
              <double>0.44</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Peanut">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.32</double>
              <double>0.32</double>
              <double>0.35</double>
              <double>0.38</double>
              <double>0.41</double>
              <double>0.48</double>
              <double>0.47</double>
              <double>0.46</double>
              <double>0.44</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Pigeonpea">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.32</double>
              <double>0.32</double>
              <double>0.35</double>
              <double>0.38</double>
              <double>0.41</double>
              <double>0.48</double>
              <double>0.47</double>
              <double>0.46</double>
              <double>0.44</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Soybean">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.32</double>
              <double>0.32</double>
              <double>0.35</double>
              <double>0.38</double>
              <double>0.41</double>
              <double>0.48</double>
              <double>0.47</double>
              <double>0.46</double>
              <double>0.44</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Stylo">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.32</double>
              <double>0.32</double>
              <double>0.35</double>
              <double>0.38</double>
              <double>0.41</double>
              <double>0.48</double>
              <double>0.47</double>
              <double>0.46</double>
              <double>0.44</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Sugar">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.32</double>
              <double>0.32</double>
              <double>0.35</double>
              <double>0.38</double>
              <double>0.41</double>
              <double>0.48</double>
              <double>0.47</double>
              <double>0.46</double>
              <double>0.44</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Sunflower">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.32</double>
              <double>0.32</double>
              <double>0.35</double>
              <double>0.38</double>
              <double>0.41</double>
              <double>0.48</double>
              <double>0.47</double>
              <double>0.46</double>
              <double>0.44</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Lablab">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.32</double>
              <double>0.32</double>
              <double>0.35</double>
              <double>0.38</double>
              <double>0.41</double>
              <double>0.48</double>
              <double>0.47</double>
              <double>0.46</double>
              <double>0.44</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="Cotton">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.35</double>
              <double>0.36</double>
              <double>0.38</double>
              <double>0.39</double>
              <double>0.39</double>
              <double>0.48</double>
              <double>0.47</double>
              <double>0.46</double>
              <double>0.44</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <BD>
            <double>1.02</double>
            <double>1.03</double>
            <double>1.02</double>
            <double>1.02</double>
            <double>1.06</double>
            <double>1.11</double>
            <double>1.12</double>
            <double>1.15</double>
            <double>1.18</double>
            <double>1.2</double>
            <double>1.25</double>
          </BD>
          <AirDry>
            <double>0.14</double>
            <double>0.26</double>
            <double>0.29</double>
            <double>0.29</double>
            <double>0.3</double>
            <double>0.31</double>
            <double>0.32</double>
            <double>0.33</double>
            <double>0.34</double>
            <double>0.35</double>
            <double>0.36</double>
          </AirDry>
          <LL15>
            <double>0.29</double>
            <double>0.29</double>
            <double>0.29</double>
            <double>0.29</double>
            <double>0.3</double>
            <double>0.31</double>
            <double>0.32</double>
            <double>0.33</double>
            <double>0.34</double>
            <double>0.35</double>
            <double>0.36</double>
          </LL15>
          <DUL>
            <double>0.54</double>
            <double>0.53</double>
            <double>0.54</double>
            <double>0.54</double>
            <double>0.52</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.48</double>
            <double>0.47</double>
            <double>0.46</double>
            <double>0.44</double>
          </DUL>
          <SAT>
            <double>0.59</double>
            <double>0.58</double>
            <double>0.59</double>
            <double>0.58</double>
            <double>0.57</double>
            <double>0.55</double>
            <double>0.55</double>
            <double>0.53</double>
            <double>0.52</double>
            <double>0.51</double>
            <double>0.49</double>
          </SAT>
        </Water>
        <SoilWater>
          <SummerCona>3.5</SummerCona>
          <SummerU>6</SummerU>
          <SummerDate>1-Nov</SummerDate>
          <WinterCona>3.5</WinterCona>
          <WinterU>6</WinterU>
          <WinterDate>1-Apr</WinterDate>
          <DiffusConst>40</DiffusConst>
          <DiffusSlope>16</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <SWCON>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
        </SoilWater>
        <SoilOrganicMatter>
          <RootCN>40</RootCN>
          <RootWt>200</RootWt>
          <SoilCN>12.5</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <OC>
            <double>1.04</double>
            <double>0.89</double>
            <double>0.89</double>
            <double>0.89</double>
            <double>0.77</double>
            <double>0.45</double>
            <double>0.27</double>
            <double>0.22</double>
            <double>0.16</double>
            <double>0.13</double>
            <double>0.12</double>
          </OC>
          <FBiom>
            <double>0.025</double>
            <double>0.02</double>
            <double>0.015</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
          </FBiom>
          <FInert>
            <double>0.4</double>
            <double>0.6</double>
            <double>0.8</double>
            <double>0.9</double>
            <double>0.95</double>
            <double>0.95</double>
            <double>0.95</double>
            <double>0.95</double>
            <double>0.95</double>
            <double>0.95</double>
            <double>0.95</double>
          </FInert>
        </SoilOrganicMatter>
        <Analysis>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <EC>
            <double>0.2</double>
            <double>0.25</double>
            <double>0.31</double>
            <double>0.4</double>
            <double>0.59</double>
            <double>0.84</double>
            <double>0.93</double>
            <double>1.01</double>
            <double>1.06</double>
            <double>1.05</double>
            <double>1.01</double>
          </EC>
          <PH>
            <double>8.4</double>
            <double>8.8</double>
            <double>9</double>
            <double>9.2</double>
            <double>9.2</double>
            <double>9.1</double>
            <double>9</double>
            <double>9</double>
            <double>8.9</double>
            <double>8.9</double>
            <double>8.9</double>
          </PH>
        </Analysis>
        <Sample name="Initial nitrogen">
          <Date type="date" description="Sample date:" />
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <NO3>
            <double>6.50004926145708</double>
            <double>2.10001591523998</double>
            <double>2.10001591523998</double>
            <double>1.7000128837657</double>
            <double>1.7000128837657</double>
            <double>1.7000128837657</double>
            <double>1.7000128837657</double>
            <double>1.7000128837657</double>
            <double>1.7000128837657</double>
            <double>1.7000128837657</double>
            <double>1.7000128837657</double>
          </NO3>
          <NH4>
            <double>0.600073072707344</double>
            <double>0.100012178784557</double>
            <double>0.100012178784557</double>
            <double>0.100012178784557</double>
            <double>0.100012178784557</double>
            <double>0.100012178784557</double>
            <double>0.100012178784557</double>
            <double>0.100012178784557</double>
            <double>0.100012178784557</double>
            <double>0.100012178784557</double>
            <double>0.100012178784557</double>
          </NH4>
        </Sample>
        <Sample name="Initial water">
          <Date type="date" description="Sample date:" />
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <SW>
            <double>0.540</double>
            <double>0.530</double>
            <double>0.540</double>
            <double>0.540</double>
            <double>0.520</double>
            <double>0.500</double>
            <double>0.500</double>
            <double>0.480</double>
            <double>0.470</double>
            <double>0.460</double>
            <double>0.440</double>
          </SW>
        </Sample>
      </Soil>
      <surfaceom name="SurfaceOrganicMatter">
        <PoolName type="text" description="Organic Matter pool name">wheat_stubble</PoolName>
        <type type="text" description="Organic Matter type">wheat</type>
        <mass type="text" description="Initial surface residue (kg/ha)">0</mass>
        <cnr type="text" description="C:N ratio of initial residue">0</cnr>
        <standing_fraction type="text" description="Fraction of residue standing">0</standing_fraction>
      </surfaceom>
      <folder name="Manager folder" />
    </area>
    <folder name="Manager">
      <manager2 name="Manage_stock">
        <ui>
          <Genotype type="text" description="Genotype">Suffolk</Genotype>
          <Sex type="list" listvalues="wethers, ewes" description="Sex">wethers</Sex>
          <sr type="text" description="Stocking rate">20</sr>
          <graze_paddock type="text" description="Grazed paddock">PasturePaddock</graze_paddock>
          <category type="category" description="Replacements" />
          <Age type="text" description="Purchase age (months)">8</Age>
          <replace_date type="ddmmmdate" description="Purchase date (dd-mmm)">15-May</replace_date>
          <replace_weight type="text" description="Purchase weight (kg)">45</replace_weight>
          <replace_cs type="text" description="Purchase CS">2.5</replace_cs>
          <category type="category" description="Cull stock" />
          <cull_date type="ddmmmdate" description="Cull date (dd-mmm)">31-Dec</cull_date>
          <cull_years type="text" description="Cull age (yrs)">5</cull_years>
        </ui>
        <text>
using System;
using ModelFramework;
using CSGeneral;

public class Script 
{  
   [Link()] Cashbook cashbook;
   [Link()] Stock stock;
   [Link]   public Component MySelf;
   [Link()] Simulation MySimulation;
   [Link()] Clock ticker;
   [Input()] DateTime today;   // Equates to the value of the current simulation date - value comes from CLOCK
   [Param()] string replace_date;
   [Param()] double replace_weight;
   [Param()] double replace_cs;
   [Param()] string Genotype;
   [Param()] string Sex;   
   [Param()] double Age;
   [Param()] double sr;                   //stocking rate animals/ha
   [Param()] string cull_date;
   [Param()] int cull_years;
   [Param()] string graze_paddock;
   
   [Output()] int[] stock_buy_number;
   [Output()] double[] stock_buy_weight;
   [Output()] double[] stock_buy_cond_score;
  
   
   private int[] numberPurchased;
   private double[] buyWeight;
   private double[] buyCondScore;

   // outputs dedicated to the culling sales
   [Output()] int[] cull_sale_number;
   [Output()] double[] cull_sale_weight;
   [Output()] double[] cull_sale_cond_score;

   private double[] sale_weight;          // sale weights by tag
   private double[] sale_cond_score;      // condition at sale by tag
   private int[] number_sold;             // number sold by tag
   
   // tag ID numbers
   private const int WETHERS = 1;
   // count of tags
   private const int NUMTAGS = 1;

   // The following event handler will be called once at the beginning of the simulation
   [EventHandler] public void OnStart_Simulation()
   {  
   }
      
   // The following event handler will be called once at the beginning of the simulation
   [EventHandler] public void OnInitialised()
   {
      numberPurchased = new int[NUMTAGS];
      buyWeight = new double[NUMTAGS];
      buyCondScore = new double[NUMTAGS];
      
      stock_buy_number = new int[NUMTAGS];
      stock_buy_weight = new double[NUMTAGS];
      stock_buy_cond_score = new double[NUMTAGS]; 
      
      // for culling
      number_sold = new int[NUMTAGS];
      sale_weight = new double[NUMTAGS];
      sale_cond_score = new double[NUMTAGS];
      
      // reporting outputs for culling
      cull_sale_number = new int[NUMTAGS];
      cull_sale_weight = new double[NUMTAGS];
      cull_sale_cond_score = new double[NUMTAGS]; 
   }
   
   // The following event handler will be called each day at the beginning of the day
   [EventHandler] public void OnPrepare()
   {
      if (today.Day == 1)
      {
         //initialise the montly summary values for each tag
         stock_buy_number = new int[NUMTAGS];
         stock_buy_weight = new double[NUMTAGS];
         stock_buy_cond_score = new double[NUMTAGS];
         
         //initialise the montly summary values for each tag
         cull_sale_number = new int[NUMTAGS];
         cull_sale_weight = new double[NUMTAGS];
         cull_sale_cond_score = new double[NUMTAGS];
      }
      
     
   }
   
   [EventHandler] public void OnProcess()
   {
      // if the first day of the simulation
      if (ticker.is_start_simulation)
      {
         initCohorts();
      }
      else if (DateUtility.DatesEqual(cull_date, today))
      {
         cullStock();  
      }
      else if (DateUtility.DatesEqual(replace_date, today))
      {
         purchaseTradeSheep();
      }
      
      //getAvailableToAnimal(); //dummy call for testing only &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
   }
   
   // Temporary function to test the GetValue and RequestSet
   private void getAvailableToAnimal()
   {
      AvailableToAnimalType available = new AvailableToAnimalType();
      
      Component wheatPaddock = (Component) MySimulation.LinkByName("wheatpaddock");
      Component somforstock = (Component) MySimulation.LinkByName("wheatpaddock.somforstock");
      if (somforstock != null)
      {
         somforstock.GetObject(somforstock.FullName + ".AvailableToAnimal", ref available);
         //for (int i = 0; i &lt; available.element.Length; i++)
            //log(available.element[i].CohortID + " " + available.element[i].Organ + " " + available.element[i].AgeID);
         
         RemovedByAnimalType val = new RemovedByAnimalType();
         val.element = new RemovedByAnimalelementType[2];
         val.element[0] = new RemovedByAnimalelementType();
         val.element[1] = new RemovedByAnimalelementType();
         somforstock.SetObject(somforstock.FullName + ".removedbyanimal", ref val);
      }
      else
         log("Cannot find SOMForStock");
   }
   
   
   
   [EventHandler] public void OnPost()
   {
      // on the last day of the month
      if (today.Day == DateTime.DaysInMonth(today.Year, today.Month))
      {
         //store the summary values for the month on the last day of the month
         numberPurchased.CopyTo(stock_buy_number, 0);
         buyWeight.CopyTo(stock_buy_weight, 0);
         buyCondScore.CopyTo(stock_buy_cond_score, 0);

         //reset the working values
         numberPurchased = new int[NUMTAGS];
         buyWeight = new double[NUMTAGS];
         buyCondScore = new double[NUMTAGS];
         
         //store the summary values for the month on the last day of the month
         number_sold.CopyTo(cull_sale_number, 0);
         sale_weight.CopyTo(cull_sale_weight, 0);
         sale_cond_score.CopyTo(cull_sale_cond_score, 0);

         //reset the working values for culling
         number_sold = new int[NUMTAGS];
         sale_weight = new double[NUMTAGS];
         sale_cond_score = new double[NUMTAGS];
      }
      
      // Write the Cashbook report at the end of the simulation
      if (ticker.is_end_simulation)
      {
         ReportType data = new ReportType();
         data.filename = "Wether in pasture crop rotation_cashbook.txt";
         cashbook.Report(data);
      }
   }

   /// &lt;summary&gt;
   /// Initialise the cohorts of animals for todays date
   /// &lt;/summary&gt;
   private void initCohorts()
   {
      int flockSize = estTodaysFlockSize(Genotype, sr, today, replace_date);
      AddAnimalsType data = new AddAnimalsType();
      
      DateTime birthDate = DateUtility.GetDate(replace_date).AddMonths(-1 * Convert.ToInt32(Age));
      data.birth_day = birthDate.DayOfYear;  
      data.cond_score = 3;
      //data.foetuses = 0;
      data.genotype = Genotype;
      //data.lactating = 0;
      //data.mated_to = "";
      
      // determine the min age of the cohorts
      DateTime r = DateUtility.GetDate(replace_date);
      DateTime replacementDate = new DateTime(today.Year, r.Month, r.Day);
      int daysSinceReplace = (today.Subtract(replacementDate).Days + 730) % 365;
      // Have the animals passed their birthday since the replacement date?
      int ageYearsOffset;
      if (Age * 30.5 % 365 + daysSinceReplace &gt;= 365)
      {
         ageYearsOffset = 1;
      }
      else
      {
         ageYearsOffset = 0;
      }
      
      data.min_years = ageYearsOffset;
      data.max_years = cull_years;     // sets the age of the oldest cohort
      //data.mean_fleece_wt = 0; // when unset it is calculated
      //data.mean_weight = 50;   // when unset a default set of live weights is calculated
      data.number = flockSize;
      //data.offspring = 0;
      //data.pregnant = 0;
      data.sex = Sex;
      
      // get the shearing day from the other script
      data.shear_day = getShearingDate().DayOfYear; 
      //data.young_cond_score = 0;
      //data.young_fleece_wt = 0;
      //data.young_wt = 0;
      
      stock.AddAnimals(data);   
      for (int g = 1; g &lt;= stock.no_groups; g++)
      {
         // test the ages of the groups here and tag appropriately
         
         stock.Tag(g, WETHERS);
      }
   }

   /// &lt;summary&gt;
   /// Get the shearing date from the other Manager script
   /// &lt;/summary&gt;
   /// &lt;returns&gt;The DateTime value&lt;/returns&gt;
   private DateTime getShearingDate()
   {
      // get the shearing date from the other script
      DateTime shearAt = today;  // useful default
      Component shearingManager = (Component) MySimulation.LinkByName("Shearing");
      if (shearingManager != null)
      {
         string shearing;
         shearingManager.Get("Shearing.ShearingDate", out shearing);
         DateTime shearDate = DateUtility.GetDate(shearing);
         shearAt = new DateTime(today.Year, shearDate.Month, shearDate.Day);
         
      }
      return shearAt;
   }
      
   /// &lt;summary&gt;
   /// Get the genotype parameters for the genotype name
   /// &lt;/summary&gt;
   /// &lt;param name="genotypeName"&gt;Name of the genotype e.g. Suffolk&lt;/param&gt;
   /// &lt;returns&gt;The params&lt;/returns&gt;
   private GenotypeselementType getGenoParams(string genotypeName)
   {
      GenotypesType geno = new GenotypesType();
      stock.GetObject(stock.Name + ".genotypes", ref geno);
      int i = geno.element.Length - 1;
      while (i &gt;= 0)
      {
         if (string.Compare(geno.element[i].name, genotypeName, true) == 0)
            return geno.element[i];
         i--;  
      }
      return null;
   }
      
   /// &lt;summary&gt;
   /// Estimate the flock size today
   /// &lt;/summary&gt;
   /// &lt;param name="genoName"&gt;Genotype name&lt;/param&gt;
   /// &lt;param name="stockingRate"&gt;The stocking rate of the main mob&lt;/param&gt;
   /// &lt;param name="purchaseDay"&gt;The purchase date&lt;/param&gt;
   /// &lt;param name="replacementDay"&gt;The day of the year that replacement normally takes place (when the farm is fully stocked)&lt;/param&gt;
   /// &lt;returns&gt;The animal number estimate&lt;/returns&gt;
   private int estTodaysFlockSize(string genoName, double stockingRate, DateTime purchaseDay, string replacementDay)
   {
      // find the params for the genotype
      GenotypeselementType param = getGenoParams(genoName);
      double deathRate = 0;
      if (param != null)
         deathRate = param.death_rate;
      double survivalRate = Math.Min(1.0 - deathRate, 0.999999);

      // Compute the expected size of the flock today. 
      int replaceFlockSize = Convert.ToInt32(getStockedArea(graze_paddock) * stockingRate);                                  // total flock required for this stocking rate
      double yearsOffset = (((purchaseDay.DayOfYear - DateUtility.GetDate(replacementDay).DayOfYear) + 365) % 365) / 365.0;   // using replacement date calculate the ageing to today
      int flockSize = Convert.ToInt32(replaceFlockSize * Math.Pow(survivalRate, yearsOffset));                   // reduce the flock by expected deaths
      
      return flockSize;
   }
      
   /// &lt;summary&gt;
   /// Purchase the replacement animals used in this trading enterprise
   /// &lt;/summary&gt;
   /// &lt;param name="record"&gt;Record the purchase numbers and weights&lt;/param&gt;
   private void purchaseTradeSheep()
   {
      Component pasturePaddock = (Component) MySimulation.LinkByName("PasturePaddock");
      
      int replaceFlockSize = Convert.ToInt32(getStockedArea(graze_paddock) * sr);   // total flock required for this stocking rate on replacement day
      
      BuyType data = new BuyType();
      data.age = Age;
      data.cond_score = replace_cs;
      
      // estimate a fleece weight for the replacements
      GenotypeselementType param = getGenoParams(Genotype);
      double yearsOffset = (((getShearingDate().DayOfYear - DateUtility.GetDate(replace_date).DayOfYear) + 365) % 365) / 365.0;   // offset from shearing to now (replacement date) 
      data.fleece_wt = param.ref_fleece_wt * yearsOffset; //estimated fleece weight 
      
      data.genotype = Genotype;
      data.number = replaceFlockSize - stock.number_all;             // top up to the required animals/ha
      data.pregnant = 0;
      data.sex = Sex;
      data.weight = replace_weight; 
      
      int newGroup = buyAnimals(data, WETHERS);
      
      // configure the new animals
      if (newGroup &gt;= 0)
      {
         stock.Move(newGroup, pasturePaddock.Name);         // move to a suitable paddock
         stock.Tag(newGroup, WETHERS);                      // tag them
      }
   }

   /// &lt;summary&gt;
   /// Purchase animals, tagging them
   /// &lt;/summary&gt;
   /// &lt;param name="buyData"&gt;Purchase details&lt;/param&gt;
   /// &lt;param name="newTag"&gt;Give them this tag&lt;/param&gt;
   /// &lt;returns&gt;The new group number for the purchased animals&lt;/returns&gt;
   private int buyAnimals(BuyType buyData, int newTag)
   {
      int newGroup = -1;   // init to nothing bought
      
      if (buyData.number &gt; 0)
      {
         stock.Buy(buyData);                    // acquire animals
         newGroup = stock.no_groups;            // added to the end of the list of groups
      
         int tagIndex = newTag - 1;             // need 0 offset for C# arrays
         int groupIndex = newGroup - 1;
         
         buyWeight[tagIndex] = (numberPurchased[tagIndex] * buyWeight[tagIndex] + stock.number[groupIndex] * stock.weight[groupIndex]) / (numberPurchased[tagIndex] + stock.number[groupIndex]);
         buyCondScore[tagIndex] = (numberPurchased[tagIndex] * buyCondScore[tagIndex] + stock.number[groupIndex] * stock.cond_score[groupIndex]) / (numberPurchased[tagIndex] + stock.number[groupIndex]);
         numberPurchased[tagIndex] = numberPurchased[tagIndex] + stock.number[groupIndex];
         log(string.Format("{0}: Purchase {1:d} animals", today.ToShortDateString(), stock.number[groupIndex]));
         
         SpendType expense = new SpendType();
         expense.name = "replacements";
         expense.amount = numberPurchased[tagIndex];
         expense.param1 = buyWeight[tagIndex];
         expense.param2 = buyCondScore[tagIndex];
         cashbook.Spend(expense);
      }

      return newGroup;
   }

   /// &lt;summary&gt;
   /// Sale of cull stock
   /// The rule used here is to sell any animals older than the cull age specified
   /// &lt;/summary&gt;
   private void cullStock()
   {
      SplitAllType data = new SplitAllType();
      data.type = "age";
      data.value = 365 * cull_years;
      stock.SplitAll(data);

      int animalsNumber;
      double animalsAge;
    
      for (int g = 1; g &lt;= stock.no_groups; g++)      // Sell them and record their weight etc
      {
         animalsNumber = stock.number[g - 1];
         animalsAge = stock.age[g - 1];

         if (animalsAge &gt;= 365 * cull_years)
         {
            sellAnimalGroup(g, animalsNumber);
         }
      }
   }
      
   /// &lt;summary&gt;
   /// Sell animals from the animal group and store the sale results
   /// &lt;/summary&gt;
   /// &lt;param name="groupNum"&gt;The animal group number (1-&gt;n)&lt;/param&gt;
   /// &lt;param name="saleNum"&gt;The number of animals to sell&lt;/param&gt;
   /// &lt;returns&gt;The number of stock sold&lt;/returns&gt;
   private int sellAnimalGroup(int groupNum, int saleNum)
   {
      int groupIndex = groupNum - 1;                    // convert to 0 offset for C# arrays
      int tagIndex = stock.tag_no[groupIndex] - 1;      // convert to 0 offset for C# arrays
      int selling = Math.Min(saleNum, stock.number[groupIndex]);   // ensure no virtual flock negative number
      
      if (selling &gt; 0)
      {
         sale_weight[tagIndex] = (number_sold[tagIndex] * sale_weight[tagIndex] + saleNum * stock.weight[groupIndex]) / (number_sold[tagIndex] + selling);
         sale_cond_score[tagIndex] = (number_sold[tagIndex] * sale_cond_score[tagIndex] + saleNum * stock.cond_score[groupIndex]) / (number_sold[tagIndex] + selling);
         number_sold[tagIndex] = number_sold[tagIndex] + selling;
      
         log(string.Format("{0}: Culling {1:d} animals aged {2:#.#} days", today.ToShortDateString(), selling, stock.age[groupIndex]));
                  
         stock.Sell(groupNum, selling);
         
         // record the sales income
         EarnType income = new EarnType();
         income.name = "wether_sales";
         income.amount = selling;
         income.param1 = stock.weight[groupIndex];
         income.param2 = stock.cond_score[groupIndex];
         cashbook.Earn(income);
         
         // record the sales expenses
         SpendType expense = new SpendType();
         expense.name = "transport";
         expense.amount = selling;
         cashbook.Spend(expense);
      }
      
      return selling;
   }
   
   /// &lt;summary&gt;
   /// Get the total area that will be stocked. 
   /// Used to calculate stock numbers at the specified stocking rate.
   /// If stock are to be spread over a number of paddocks then incorporate that in here.
   /// &lt;/summary&gt;
   /// &lt;returns&gt;Area in hectares&lt;/returns&gt;
   private double getStockedArea(string paddName)
   {
      double area;
      
      Component myPaddock = (Component) MySimulation.LinkByName(paddName);
      myPaddock.Get(myPaddock.Name + ".area", out area);
      
      return area;
   }
      
   /// &lt;summary&gt;
   /// Convert the DateTime value to a GrazPlan date value
   /// &lt;/summary&gt;
   /// &lt;param name="date"&gt;The DateTime value&lt;/param&gt;
   /// &lt;returns&gt;The stddate&lt;/returns&gt;
   private int asStdDate(DateTime date)
   {
      return Convert.ToInt32(date.Day + date.Month * 0x100 + date.Year * 0x10000);
   }
      
   private void log(string msg)
   {
      Console.WriteLine(msg);
   }
}
   
</text>
      </manager2>
      <manager2 name="Grazing_crop">
        <ui>
          <category type="category" description="Winter Grazing" />
          <graze_crop type="text" description="Which paddock name to graze">WheatPaddock</graze_crop>
          <start_graze type="ddmmmdate" description="Allow crop grazing after (ddmmm)">1-Aug</start_graze>
          <start_level type="text" description="DM required before grazing crop (kg/ha)">1200</start_level>
          <finish_graze type="ddmmmdate" description="Finish crop grazing on (ddmmm)">5-Sep</finish_graze>
          <finish_level type="text" description="Exit crop if DM falls below (kg/ha)">1000</finish_level>
          <category type="category" description="Stubble Grazing" />
          <stubble_paddock type="text" description="Stubble paddock to graze">WheatPaddock</stubble_paddock>
          <stubble_cover_threshold type="text" description="Stubble cover threshold for grazing">0.6</stubble_cover_threshold>
          <category type="category" description="Complete Grazing" />
          <return_to_paddock type="text" description="Return animals to paddock">PasturePaddock</return_to_paddock>
        </ui>
        <text>
using System;
using System.Collections.Generic;
using ModelFramework;
using CSGeneral;

public class Script 
{      
   [Link()] Supplement supp;
   [Link()] Stock stock;
   [Link] Simulation MySimulation; 
   [Input] DateTime today;   // Equates to the value of the current simulation date - value comes from CLOCK
   [Param()] string graze_crop; 
   [Param()] string start_graze; 
   [Param()] string finish_graze;
   [Param()] double start_level; 
   [Param()] double finish_level;
   [Param()] double stubble_cover_threshold;     // Threshold cover to abandon summer grazing
   [Param()] string return_to_paddock;
   [Param()] string stubble_paddock;

   private bool cropGrazing;  // true if crop grazing
   private int grazingDays;   // number of days on the crop paddock

   private bool cropHarvested;
   private double spiltGrainRemaining;
   private bool stubblePresent;
   private int stubbleDays;
   private bool stubbleGrazing;
   private int maxStubbleDays = 28;                // Length of stubble grazing period
   private double spiltGrainAccessRate = 0.020;    // (kg/head) / (kg/ha spilt grain)
   private double spiltGrainMaxIntake = 0.20;      // kg FW/head/day
   private double bestStubbleCover;
   
   // The following event handler will be called once at the beginning of the simulation
   [EventHandler] public void OnInitialised()
   {
      cropGrazing = false;
      grazingDays = 0;
      cropHarvested = false;
      resetStubble();
   }

   // The following event handler will be called each day at the beginning of the day
   [EventHandler] public void OnPrepare()
   {

   }

   [EventHandler] public void OnProcess()
   {
      if (DateUtility.DatesEqual("1-May", today))
      {
         resetStubble();  
      }
      
      // A fairly simple grazing rotation where the animals are moved onto
      // a crop paddock for a short time.
      if (!cropGrazing)
      {
         // check if it is time for crop grazing
         if (DateUtility.WithinDates(start_graze, today, finish_graze))
         {        
            Paddock paddockModule = (Paddock) MySimulation.LinkByName(graze_crop);
            if (paddockModule != null)
            {
               List&lt;Component&gt; children = paddockModule.Crops;
               if (children.Count &gt; 0)
               {
                  string plantStatus = "";
                  children[0].Get("plant_status", out plantStatus);
                  double biomass = 0;
                  children[0].Get("biomass", out biomass);
                  if ((string.Compare(plantStatus, "alive", true) == 0) &amp;&amp; (biomass &gt;= start_level))
                  {
                     //move all animals to crop
                     for (int g = 1; g &lt;= stock.no_groups; g++)
                     {
                        stock.Move(g, paddockModule.Name);  
                        log(string.Format("{0}: Moving {1:d} animals in group {2:d} to {3}", today.ToShortDateString(), stock.number[g - 1], g, paddockModule.Name));
                     }
                     //inc grazing days
                     cropGrazing = true;
                     grazingDays++;
                  }
               }
               
            }
         }
      }
      else
      {
         // check if the animals should move back to pasture  
         grazingDays++;  
         
         Paddock paddockModule = (Paddock) MySimulation.LinkByName(graze_crop);
         if (paddockModule != null)
         {
            List&lt;Component&gt; children = paddockModule.Crops;
            if (children.Count &gt; 0)
            {
               double biomass = 0;
               children[0].Get("biomass", out biomass);
               if ((biomass &lt; finish_level) || DateUtility.DatesEqual(finish_graze, today))
               {
                  //move all animals off the crop
                  for (int g = 1; g &lt;= stock.no_groups; g++)
                  {
                     stock.Move(g, return_to_paddock);  
                     log(string.Format("{0}: Moving {1:d} animals in group {2:d} to {3}", today.ToShortDateString(), stock.number[g - 1], g, return_to_paddock));
                  }
                  cropGrazing = false;
                  grazingDays = 0;
               }
            }
         }
      }      
     
      // Stubble grazing
      // -During October - January, detect the availability of stubbles and hence the start of stubble grazing stage
      // -End stubble grazing after a fixed time, or when there is insufficient stubble cover
      // -The spilt grain "submodel" is initialized here
      cropHarvested = false;
      if (DateUtility.WithinDates("1-Oct", today, "31-Jan"))
      {
         // check if the crop has been harvested (Wheat crop in WheatPaddock)
         Component cropManager = (Component) MySimulation.LinkByName(stubble_paddock + ".Crop Management");
         if (cropManager != null)
         {   
            int harvested;
            cropManager.Get(cropManager.FullName + ".cropHarvested", out harvested);
            cropHarvested = harvested &gt; 0;
         }
         if (cropHarvested)
         {
            stubblePresent = true;
            cropManager.Get(cropManager.FullName + ".GrainSpilt", out spiltGrainRemaining);
         }
         
         if ((!stubbleGrazing) &amp;&amp; (stubbleDays &lt; maxStubbleDays))
         {
            if (stubblePresent)  // stubble available
            {
               // move all animals to the stubble
               for (int g = 1; g &lt;= stock.no_groups; g++)
               {
                  stock.Move(g, stubble_paddock);  
                  log(string.Format("{0}: Moving {1:d} animals in group {2:d} to {3} for stubble grazing", today.ToShortDateString(), stock.number[g - 1], g, stubble_paddock));
               }
               stubbleGrazing = true;
            }
         }
      }
      
      
      // check every 7 days to see if the stubble grazing should finish
      if (DateUtility.WithinDates("1-Oct", today, "30-Apr"))            
      {
         grazingStubbleSpiltGrain();   // each stubble grazing day ensure they have spilt grain
            
         if (stubbleGrazing) 
         {
            stubbleDays += 1;                // Number of days of stubble grazing
            if (today.Day % 7 == 0)
            {
               // check the paddock(s) for stubble cover
               Paddock paddockModule = (Paddock) MySimulation.LinkByName(stubble_paddock);
               List&lt;Component&gt; children = paddockModule.Crops;
               if (children.Count &gt; 0)
               {
                  double cover = 0;
                  children[0].Get("cover_tot", out cover);
               
                  SurfaceOM som = (SurfaceOM) paddockModule.LinkByType("SurfaceOM");
                  double scover;
                  som.Get("surfaceom_cover", out scover);
                              
                  bestStubbleCover = 1.0 - (1.0 - cover) * (1.0 - scover);
                  //log(string.Format("cover: {0} scover: {1} calc: {2}", cover, scover, bestStubbleCover));
               }

               if ((stubbleDays &gt;= maxStubbleDays) || (bestStubbleCover &lt; stubble_cover_threshold))
               {
                  // move all animals back to pasture
                  for (int g = 1; g &lt;= stock.no_groups; g++)
                  {
                     stock.Move(g, return_to_paddock);  
                     log(string.Format("{0}: Moving {1:d} animals in group {2:d} to {3}", today.ToShortDateString(), stock.number[g - 1], g, return_to_paddock));
                  }
                  stubbleGrazing = false;
               }
            }
         }
      }
   }
   
   /// &lt;summary&gt;
   /// Feed the spilt grain in the stubble paddock
   /// &lt;/summary&gt;
   private void grazingStubbleSpiltGrain()
   {
      if (stubbleGrazing)
      {
         // Make spilt grain available to animals grazing stubbles
         for (int g = 1; g &lt;= stock.no_groups; g++)
         {
            if (spiltGrainRemaining &gt; 0.0)
            {
               double spiltGrainFound = Math.Min(spiltGrainMaxIntake, spiltGrainAccessRate * spiltGrainRemaining) * stock.number[g - 1];
               spiltGrainRemaining = Math.Max(0.0, spiltGrainRemaining - spiltGrainFound / getPaddockArea(stubble_paddock));
               
               FeedType food = new FeedType();
               food.supplement = "Wheat";
               food.amount = spiltGrainFound;
               food.paddock = stubble_paddock; 
               supp.Feed(food);
            }
         }
      }
   }
    
   /// &lt;summary&gt;
   /// Get the area of any paddock
   /// &lt;/summary&gt;
   /// &lt;param name="paddName"&gt;Name of the paddock&lt;/param&gt;
   private double getPaddockArea(string paddName)
   {
      double area;
      
      Component myPaddock = (Component) MySimulation.LinkByName(paddName);
      myPaddock.Get(myPaddock.Name + ".area", out area);
      
      return area;
   }

   
   private void resetStubble()
   {
      stubbleDays = 0;
      stubblePresent = false;
      spiltGrainRemaining = 0;
      stubbleGrazing = false;
      bestStubbleCover = 0;
   }
      
   private void log(string msg)
   {
      Console.WriteLine(msg);
   }

}
  </text>
      </manager2>
      <manager2 name="Manage_supplement">
        <ui>
          <buy_date type="ddmmmdate" description="Purchase date (dd-mmm)">1-Jan</buy_date>
          <buy_amount type="text" description="Fresh weight of supplement to purchase (kg) ">500000</buy_amount>
          <category type="category" description="Maintenance (survival) feed description" />
          <buy_name type="list" listvalues="wheat,lupins" description="Supplement type">lupins</buy_name>
          <crit_condition type="text" description="Maintain this minimum condition score">2</crit_condition>
          <max_feed_rate type="text" description="Maximum rate of feeding in kg FW/day; 1.0 is sensible for sheep">1</max_feed_rate>
          <category type="category" description="Production feeding" />
          <target_feed_name type="list" listvalues="wheat,lupins" description="Supplement type">wheat</target_feed_name>
          <target_begin type="ddmmmdate" description="Start feeding (dd-mmm)">15-Jan</target_begin>
          <target_finish type="ddmmmdate" description="Target date (dd-mmm)">15-Feb</target_finish>
          <target_weight type="text" description="Target weight (kg) (0 = no feeding)">60</target_weight>
          <feed_paddock type="text" description="Feed in this paddock">Feedlot</feed_paddock>
        </ui>
        <text>using System;
using ModelFramework;
using CSGeneral;

public class Script 
{  
   [Link()] Supplement supp;
   [Link()] Stock stock;
   [Link()] Simulation MySimulation;
   [Input()] DateTime today;           // Equates to the value of the current simulation date - value comes from CLOCK
   [Param()] private string buy_date;  
   [Param()] private string buy_name;
   [Param()] private double buy_amount;
   // maintenance feeding
   [Param()] private double max_feed_rate;
   [Param()] private double crit_condition;
   // production target feeding 
   [Param()] private string target_begin;
   [Param()] private string target_finish;
   [Param()] private double target_weight;
   [Param()] private string target_feed_name;
   [Param()] private string feed_paddock;
   
   [Output()] public double SuppFed;         // total fed for the day
   [Output()] public double[] suppFedKg;     // total supplement fed for each tag group

   private double[] feedRate;      // feeding rate for each tag group
   
   // tag ID numbers
   private const int WETHERS = 1;
   // count of tags
   private const int NUMTAGS = 1;

   // The following event handler will be called once at the beginning of the simulation
   [EventHandler] public void OnStart_Simulation()
   {
      feedRate = new double[NUMTAGS];
      suppFedKg = new double[NUMTAGS];
   }
      
   [EventHandler] public void OnInitialised()
   {
      
   }
      
   // The following event handler will be called each day at the beginning of the day
   [EventHandler] public void OnPrepare()
   {
      // keep the supplement store stocked
      if (DateUtility.DatesEqual(buy_date, today))
      {
         StoresType store = new StoresType();
         supp.GetObject("stores", ref store);
         int nstores = store.element.Length;
         for (int i = 1; i &lt; nstores; i++)
         {
            if (string.Compare(store.element[i].name, buy_name, true) == 0)
            {
               double purchaseAmount = buy_amount - store.element[i].stored;
               if (purchaseAmount &gt; 0)
               {
                  SupplementBuyType food = new SupplementBuyType();
                  food.supplement = buy_name;
                  food.amount = purchaseAmount;
                  supp.Buy(food); 
                  Console.WriteLine(string.Format("{0}: Buy supplement: {1:0.00} kg of {2}", today.ToShortDateString(), food.amount, store.element[1].name));   
               }
            }
         }
      }
   }
   
   [EventHandler] public void OnProcess()
   {
      maintenanceFeed();
      productionFeed();
   }
   
   [EventHandler] public void OnPost()
   {
      
   }

   /// &lt;summary&gt;
   /// Carry out the production feeding
   /// &lt;/summary&gt;
   private void productionFeed()
   {
      // do production feeding if the weight target &gt; 0
      if ((target_weight &gt; 0) &amp;&amp; (DateUtility.WithinDates(target_begin, today, target_finish)))
      {
         buyProductionFeed();

         double maxFeedRate = max_feed_rate;             // kg/day
      
         // feed each tag group (could use a list of tag groups here)
         for (int tag = 1; tag &lt;= NUMTAGS; tag++)
         {
            bool doFeeding = true;
         
            // (assumes that all of this tag group are in the same paddock)
            string feedPaddock = feed_paddock;   
            int count = 0;
            for (int g = 1; g &lt;= stock.no_groups; g++)
            {
               if (string.Compare(stock.paddock[g - 1], feedPaddock, true) != 0)
               {
                  stock.Move(g, feedPaddock);
                  count += stock.number[g - 1];
               }
            }
            if (count &gt; 0)
               log(string.Format("{0}: Moving {1:d} animals in tag group {2:d} to {3} for production feeding", today.ToShortDateString(), count, tag, feedPaddock));
            
            double weightTag = stock.weight_tag[tag - 1];
            if (!doFeeding &amp;&amp; (weightTag &lt; target_weight))
            {
               doFeeding = true;
            }
            else if (doFeeding &amp;&amp; (weightTag &gt; target_weight + 0.1))
            {
               doFeeding = false;
            }
        
            double crit_dwt = 0.0;
            if (doFeeding)
            {
               //crit_dwt = 0.05;                       // expected daily weight gain when feeding
               
               int daysLeft;
               // calculate the days until they should reach their weight
               int lastSaleDOY = DateUtility.GetDate(target_finish).DayOfYear;
               if (today.DayOfYear &lt;= lastSaleDOY)
               {
                  daysLeft = lastSaleDOY - today.DayOfYear + 1;
               }
               else
               {
                  daysLeft = lastSaleDOY - today.DayOfYear + 366;
               }
               crit_dwt = (target_weight - stock.weight_tag[tag - 1]) / daysLeft;             
               
               feedRate[tag - 1] = Math.Max(0.0, Math.Min(maxFeedRate, feedRate[tag - 1] - 0.5 * (stock.wt_change_tag[tag - 1] - crit_dwt)));
               suppFedKg[tag - 1] = stock.number_tag[tag - 1] * feedRate[tag - 1];

               FeedType food = new FeedType();
               food.supplement = buy_name;
               food.amount = suppFedKg[tag - 1];
               food.paddock = feedPaddock; 
               supp.Feed(food);                       // occurs in this Process stage which is before do_stock
               Console.WriteLine(string.Format("{0}: Feeding: {1:0.00} kg of {2} in {3}", today.ToShortDateString(), food.amount, buy_name, food.paddock));   
               SuppFed += food.amount;
            }
            else
            {
               feedRate[tag - 1] = 0.0;
               suppFedKg[tag - 1] = 0.0;
            }
         }

      }
   }
      
   /// &lt;summary&gt;
   /// Maintain the production supplement store
   /// &lt;/summary&gt;
   private void buyProductionFeed()
   {
      // Check that the supplement store is stocked        
      // ensure there is at least 1kg per head in the store
         
      bool found = false;
      double stored = 0.0;
         
      StoresType store = new StoresType();
      supp.GetObject("stores", ref store);
      int nstores = store.element.Length;
      int i = 1; 
      while (!found &amp;&amp; (i &lt; nstores))
      {
         if (string.Compare(store.element[i].name, target_feed_name, true) == 0)
         {
            found = true;
            stored = store.element[i].stored;
         }
         i++;
      }
         
      double purchaseAmount = stock.number_all - stored;
      if (purchaseAmount &gt; 0)
      {
         SupplementBuyType food = new SupplementBuyType();
         food.supplement = target_feed_name;
         food.amount = purchaseAmount * 2;   
         supp.Buy(food); 
         Console.WriteLine(string.Format("{0}: Buy production supplement: {1:0.00} kg of {2}", today.ToShortDateString(), food.amount, food.supplement));   
      }
   }
      
   /// &lt;summary&gt;
   /// Carry out survival maintenance feeding
   /// &lt;/summary&gt;
   private void maintenanceFeed()
   {
      SuppFed = 0.0;                                  // reset the daily total
      
      double maxFeedRate = max_feed_rate;             // kg/day
      
      // feed each tag group (could use a list of tag groups here)
      for (int tag = 1; tag &lt;= NUMTAGS; tag++)
      {
         double criticalCS = crit_condition;          // maintenance feeding to maintain this CS. (Could specify values for each tag)
         
         bool doFeeding = false;
         
         string feedPaddock = "PasturePaddock";       // Find the paddock occupied by this mob (assumes that all of this tag group are in the same paddock)
         double lowCS = 5.0;                          // Find the lowest CS in each mob
         for (int g = 1; g &lt;= stock.no_groups; g++)
         {
            if (stock.tag_no[g - 1] == tag)
            {
               lowCS = Math.Min(lowCS, stock.cond_score[g - 1]);
               feedPaddock = stock.paddock[g - 1];
            }
         }
         if (string.Compare(feedPaddock, "feedlot", true) == 0)   // This ensures that confinement feeding happens
         {
            doFeeding = true;
         }
         if (!doFeeding &amp;&amp; (lowCS &lt; criticalCS))
         {
            doFeeding = true;
         }
         else if (doFeeding &amp;&amp; (lowCS &gt; criticalCS + 0.1))
         {
            doFeeding = false;
         }
        
         double crit_dwt = 0.0;
         if (doFeeding)
         {
            crit_dwt = 0.05;                       // expected daily weight gain when feeding
            feedRate[tag - 1] = Math.Max(0.0, Math.Min(maxFeedRate, feedRate[tag - 1] - 0.5 * (stock.wt_change_tag[tag - 1] - crit_dwt)));
            suppFedKg[tag - 1] = stock.number_tag[tag - 1] * feedRate[tag - 1];

            FeedType food = new FeedType();
            food.supplement = buy_name;
            food.amount = suppFedKg[tag - 1];
            food.paddock = feedPaddock; 
            supp.Feed(food);                       // occurs in this Process stage which is before do_stock
            Console.WriteLine(string.Format("{0}: Feeding: {1:0.00} kg of {2} in {3}", today.ToShortDateString(), food.amount, buy_name, food.paddock));   
            SuppFed += food.amount;
         }
         else
         {
            feedRate[tag - 1] = 0.0;
            suppFedKg[tag - 1] = 0.0;
         }
      }
   }
   
   private void log(string msg)
   {
      Console.WriteLine(msg);
   }
}

       </text>
      </manager2>
      <manager2 name="Shearing">
        <ui>
          <shear_date type="ddmmmdate" description="Shearing date (dd-mmm)">15-Sep</shear_date>
        </ui>
        <text>
using System;
using ModelFramework;
using CSGeneral;

public class Script 
{
   [Link()] Cashbook cashbook;
   [Link()] Stock stock;
   [Link()] Simulation MySimulation;
   [Input] DateTime today;   // Equates to the value of the current simulation date - value comes from CLOCK

   [Param()] string shear_date;
   [Output()] int[] NumberShorn;
   [Output()] double[] ShornFleece;
   [Output()] double[] ShornFibre;
   [Output()] string ShearingDate {get{return shear_date;}} // available to other scripts

   private const int NUMTAGS = 1;
   
   // The following event handler will be called once at the beginning of the simulation
   [EventHandler] public void OnInitialised()
   {
      NumberShorn = new int[NUMTAGS];
      ShornFleece = new double[NUMTAGS];
      ShornFibre = new double[NUMTAGS];
   }
   
   // The following event handler will be called each day at the beginning of the day
   [EventHandler] public void OnPrepare()
   {
      if (today.Day == 1)
      {
         //initialise the montly summary values for each tag
         NumberShorn = new int[NUMTAGS];
         ShornFleece = new double[NUMTAGS];
         ShornFibre = new double[NUMTAGS];
      }
   }

   // The following event handler will be called each day
   [EventHandler] public void OnProcess()
   {
      if (DateUtility.DatesEqual(shear_date, today))
      {
         shearAnimals();  
      }
   }

   /// &lt;summary&gt;
   /// Shear all the sheep and record the production for each tag group
   /// &lt;/summary&gt;
   /// &lt;returns&gt;&lt;/returns&gt;
   private void shearAnimals()
   {
      // Store the amount and fibre diameter of the fleeces
      // These array values are reset at the start of every month
      for (int tagIndex = 0; tagIndex &lt; stock.number_tag.Length; tagIndex++ )     
      {
         NumberShorn[tagIndex] = stock.number_tag[tagIndex];
         ShornFleece[tagIndex] = stock.c_fleece_wt_tag[tagIndex];   // clean
         ShornFibre[tagIndex] = stock.fibre_diam_tag[tagIndex];

         // store the income from the wool and the shearing expenses
         EarnType income = new EarnType();
         income.name = "wool_sales";
         income.amount = NumberShorn[tagIndex] * ShornFleece[tagIndex];
         income.param1 = stock.fibre_diam_tag[tagIndex];
         cashbook.Earn(income);
         
         SpendType expense = new SpendType();
         expense.name = "shearing";
         expense.amount = NumberShorn[tagIndex];
         expense.param1 = 3.0196;  //shearer only cost per head
         cashbook.Spend(expense);
      }

      ShearType data = new ShearType();
      data.group = 0;
      stock.Shear(data);              // Shear all sheep
      
      log(string.Format("{0}: Shearing", today.ToShortDateString()));
   }
   
   private void log(string msg)
   {
      Console.WriteLine(msg);
   }
}
  </text>
      </manager2>
      <manager2 name="Selling">
        <ui>
          <sell_start type="ddmmmdate" description="Start selling (dd-mmm)">15-Dec</sell_start>
          <sell_finish type="ddmmmdate" description="End selling (dd-mmm)">15-Mar</sell_finish>
          <selling_policy type="list" listvalues="0,1,2" description="Sale policy (0 for none)">1</selling_policy>
          <category type="category" description="Policy 1 (target)" />
          <selling_weight type="text" description="Selling weight (kg)">60</selling_weight>
          <category type="category" description="Policy 2 (drought)" />
          <daily_weight_gain type="text" description="Daily weight gain trigger (kg/day)">0</daily_weight_gain>
          <days_to_average type="text" description="Average weight gain over (days)">7</days_to_average>
        </ui>
        <text>
using System;
using System.Collections.Generic;
using ModelFramework;
using CSGeneral;

public class Script 
{      
   [Link()] Cashbook cashbook;
   [Link()] Stock stock;
   [Link()] Simulation MySimulation;
   [Input] DateTime today;             // Equates to the value of the current simulation date - value comes from CLOCK
   
   [Param()] string sell_start;        // start selling
   [Param()] string sell_finish;       // end selling period
   [Param()] double selling_weight;    // sell at this weight
   [Param()] int selling_policy;       // choose which selling policy. See performSale() for details. Use 0 to turn off.
   [Param()] double daily_weight_gain; // if the daily weight gain falls below this value the animals will be sold
   [Param()] int days_to_average;      // average weight gain over x days
   
   [Output()] int[] stock_sale_number;
   [Output()] double[] stock_sale_weight;
   [Output()] double[] stock_sale_cond_score;

   private double[] sale_weight;          // sale weights by tag
   private double[] sale_cond_score;      // condition at sale by tag
   private int[] number_sold;             // number sold by tag

   // tag ID numbers
   private const int WETHERS = 1;
   // count of tags
   private const int NUMTAGS = 1;
   
   private double[] wtGains;              // used to average daily weight gain
   private List&lt;int&gt; tagsToSell;          // The list of tag groups that will be sold in any selling policy
   
   // The following event handler will be called once at the beginning of the simulation
   [EventHandler] public void OnInitialised()
   {
      number_sold = new int[NUMTAGS];
      sale_weight = new double[NUMTAGS];
      sale_cond_score = new double[NUMTAGS];
      
      // reporting outputs
      stock_sale_number = new int[NUMTAGS];
      stock_sale_weight = new double[NUMTAGS];
      stock_sale_cond_score = new double[NUMTAGS]; 
      
      wtGains = new double[days_to_average + 1];
      // init to invalid 
      for (int i = 0; i &lt; days_to_average + 1; i++)
         wtGains[i] = -999.0;
      
      tagsToSell = new List&lt;int&gt;();
      // this may need to be adjusted daily depending of the timing and purpose of the sales
      tagsToSell.Add(WETHERS);      
   }

   // The following event handler will be called each day at the beginning of the day
   [EventHandler] public void OnPrepare()
   {
      if (today.Day == 1)
      {
         //initialise the montly summary values for each tag
         stock_sale_number = new int[NUMTAGS];
         stock_sale_weight = new double[NUMTAGS];
         stock_sale_cond_score = new double[NUMTAGS];
      }
   }

   [EventHandler] public void OnProcess()
   {
      // sell animals using the specified policy
      performSale(selling_policy, tagsToSell);
   }

   [EventHandler] public void OnPost()
   {
      if (today.Day == DateTime.DaysInMonth(today.Year, today.Month))
      {
         //store the summary values for the month on the last day of the month
         number_sold.CopyTo(stock_sale_number, 0);
         sale_weight.CopyTo(stock_sale_weight, 0);
         sale_cond_score.CopyTo(stock_sale_cond_score, 0);

         //reset the working values
         number_sold = new int[NUMTAGS];
         sale_weight = new double[NUMTAGS];
         sale_cond_score = new double[NUMTAGS];
      }
   }

   /// &lt;summary&gt;
   /// Carry out one of the sale policies.
   /// &lt;/summary&gt;
   /// &lt;param name="salePolicy"&gt;Policy number&lt;/param&gt;
   /// &lt;param name="tagsSelling"&gt;The list of tags to sell&lt;/param&gt;
   private void performSale(int salePolicy, List&lt;int&gt; tagsSelling)
   {
      switch (salePolicy)
      {
         case 1:
            // Selling within in a period every 14 days anything that has reached selling weight. 
            // At the end of the period, everything gets sold regardless of weight.
            if (DateUtility.WithinDates(sell_start, today, sell_finish))
            {
               // sell every 14 days or at the start and end of the period
               if ((today.Day % 14 == 0) || DateUtility.DatesEqual(sell_start, today) || DateUtility.DatesEqual(sell_finish, today))
               {
                  // need to split by weight and sell only those that meet the weight
                  SplitAllType split = new SplitAllType();
                  split.othertag = 1;
                  split.type = "weight";
                  split.value = selling_weight;
                  stock.SplitAll(split);
                  for (int groupNum = stock.no_groups; groupNum &gt; 0; groupNum--)
                  {
                     int groupIdx = groupNum - 1;  //convert to index in C# arrays
                     if (tagsSelling.Contains(stock.tag_no[groupIdx]))
                     {
                        if ((stock.weight[groupIdx] &gt;= selling_weight) || DateUtility.DatesEqual(sell_finish, today))
                        {
                           sellAnimalGroup(groupNum, stock.number[groupIdx]);
                        }
                     }
                  }
               }
            }
            break;
         case 2:
            // Drought selling within a period.
            
            // every day calculate the weight gain for the specified period length
            int animalCount = 0;
            double animalDWG = 0;
            for (int g = 1; g &lt;= stock.no_groups; g++)
            {
               if (tagsSelling.Contains(stock.tag_no[g - 1]))
               {
                  animalCount += stock.number[g - 1];
                  animalDWG += stock.number[g - 1] * stock.wt_change[g - 1];
               }
            }
            if (animalCount &gt; 0)
            {
               animalDWG /= animalCount;     // calc average daily weight gain for the tag group(s) for today
            }
               
            double total = 0;
            double count = 0;
            wtGains[days_to_average] = animalDWG;
            for (int i = 0; i &lt; days_to_average; i++)
            {
               wtGains[i] = wtGains[i + 1];
               if (wtGains[i] &gt; -999.0)
               {
                  total += wtGains[i];
                  count++;
               }
            }
            double avWtGain = total / Math.Max(1, count);
            
            // sell if in the selling period and meets criteria
            if (DateUtility.WithinDates(sell_start, today, sell_finish))
            {
               if ((animalCount &gt; 0) &amp;&amp; ((avWtGain &lt; daily_weight_gain) || DateUtility.DatesEqual(sell_finish, today)))
               {
                  for (int g = 1; g &lt;= stock.no_groups; g++)
                  {
                     if (tagsSelling.Contains(stock.tag_no[g - 1]))
                     {
                        sellAnimalGroup(g, stock.number[g - 1]);
                     }
                  }
                  log(string.Format("\tSelling when average weight gain over {0} days is {1:0.#####} kg/day", days_to_average, avWtGain));
               }
            }
            break;
         default:
            break;
         }
      }
         
      /// &lt;summary&gt;
      /// Sell animals from the animal group and store the sale results
      /// &lt;/summary&gt;
      /// &lt;param name="groupNum"&gt;The animal group number (1-&gt;n)&lt;/param&gt;
      /// &lt;param name="saleNum"&gt;The number of animals to sell&lt;/param&gt;
      /// &lt;returns&gt;The number of stock sold&lt;/returns&gt;
      public int sellAnimalGroup(int groupNum, int saleNum)
      {
         int groupIndex = groupNum - 1;                    // convert to 0 offset for C# arrays
         int tagIndex = stock.tag_no[groupIndex] - 1;      // convert to 0 offset for C# arrays
         int selling = Math.Min(saleNum, stock.number[groupIndex]);   // ensure no virtual flock negative number
      
         if (selling &gt; 0)
         {
            sale_weight[tagIndex] = (number_sold[tagIndex] * sale_weight[tagIndex] + saleNum * stock.weight[groupIndex]) / (number_sold[tagIndex] + selling);
            sale_cond_score[tagIndex] = (number_sold[tagIndex] * sale_cond_score[tagIndex] + saleNum * stock.cond_score[groupIndex]) / (number_sold[tagIndex] + selling);
            number_sold[tagIndex] = number_sold[tagIndex] + selling;
      
            log(string.Format("{0}: Selling {1:d} animals from group {2:d}", today.ToShortDateString(), selling, groupNum));
                  
            stock.Sell(groupNum, selling);
         
            // record the sales income
            EarnType income = new EarnType();
            income.name = "lamb_sales";
            income.amount = selling;
            income.param1 = stock.weight[groupIndex];
            income.param2 = stock.cond_score[groupIndex];
            cashbook.Earn(income);
            
            // sales costs
            SpendType expense = new SpendType();
            expense.name = "transport";
            expense.amount = selling;
            cashbook.Spend(expense);
         }
      
         return selling;
      }

      private void log(string msg)
      {
         Console.WriteLine(msg);
      }
   }
  </text>
      </manager2>
    </folder>
    <Stock name="stock">
      <initsection>
        <init name="published_events" array="T" />
        <init name="subscribed_events" array="T" />
        <init name="driver_connections" array="T" />
        <init name="param_file" kind="string">
          <val />
        </init>
        <init name="rand_seed" kind="integer4">
          <val>9999</val>
        </init>
        <init name="genotypes" array="T">
          <element>
            <field name="name" kind="string">
              <val>Suffolk</val>
            </field>
            <field name="dam_breed" kind="string">
              <val />
            </field>
            <field name="sire_breed" kind="string">
              <val />
            </field>
            <field name="generation" kind="integer4">
              <val>0</val>
            </field>
            <field name="srw" kind="double" unit="kg">
              <val>55</val>
            </field>
            <field name="conception" kind="double" array="T">
              <val>0.219999998807907</val>
              <val>0.759999990463257</val>
            </field>
            <field name="death_rate" kind="double" unit="/y">
              <val>0.0200000014156103</val>
            </field>
            <field name="ref_fleece_wt" kind="double" unit="kg">
              <val>3.46500015258789</val>
            </field>
            <field name="max_fibre_diam" kind="double" unit="um">
              <val>26</val>
            </field>
            <field name="fleece_yield" kind="double" unit="kg/kg">
              <val>0.699999988079071</val>
            </field>
            <field name="peak_milk" kind="double" unit="kg">
              <val>0</val>
            </field>
            <field name="wnr_death_rate" kind="double" unit="/y">
              <val>0.0200000014156103</val>
            </field>
          </element>
        </init>
        <init name="sheep" array="T" />
        <init name="cattle" array="T" />
        <init name="paddock_list" array="T">
          <element>
            <field name="name" kind="string">
              <val>PasturePaddock</val>
            </field>
            <field name="area" kind="double" unit="ha">
              <val>100</val>
            </field>
            <field name="slope" kind="double" unit="deg">
              <val>0</val>
            </field>
            <field name="forages" kind="string" array="T">
              <val>PasturePaddock.Ryegrass</val>
            </field>
            <field name="excretion" kind="string">
              <val>PasturePaddock.SurfaceOrganicMatter</val>
            </field>
            <field name="urine" kind="string">
              <val>PasturePaddock.soil nitrogen</val>
            </field>
          </element>
          <element>
            <field name="name" kind="string">
              <val>WheatPaddock</val>
            </field>
            <field name="area" kind="double" unit="ha">
              <val>100</val>
            </field>
            <field name="slope" kind="double" unit="deg">
              <val>0</val>
            </field>
            <field name="forages" kind="string" array="T">
              <val>WheatPaddock.wheat</val>
              <val>WheatPaddock.SOMForStock</val>
            </field>
            <field name="excretion" kind="string">
              <val>WheatPaddock.SurfaceOrganicMatter</val>
            </field>
            <field name="urine" kind="string">
              <val>WheatPaddock.soil nitrogen</val>
            </field>
          </element>
          <element>
            <field name="name" kind="string">
              <val>Feedlot</val>
            </field>
            <field name="area" kind="double" unit="ha">
              <val>10</val>
            </field>
            <field name="slope" kind="double" unit="deg">
              <val>0</val>
            </field>
            <field name="forages" kind="string" array="T" />
            <field name="excretion" kind="string">
              <val>Feedlot.SurfaceOrganicMatter</val>
            </field>
            <field name="urine" kind="string">
              <val>Feedlot.soil nitrogen</val>
            </field>
          </element>
        </init>
        <init name="enterprise_list" array="T" />
        <init name="only_plant2stock" kind="boolean">
          <val>false</val>
        </init>
      </initsection>
    </Stock>
    <Supplement name="supplement">
      <initsection>
        <init name="published_events" array="T" />
        <init name="subscribed_events" array="T" />
        <init name="driver_connections" array="T" />
        <init name="spoilage_time" kind="double" unit="d">
          <val>0</val>
        </init>
        <init name="stores" array="T">
          <element>
            <field name="name" kind="string">
              <val>lupins</val>
            </field>
            <field name="stored" kind="double" unit="kg">
              <val>0</val>
            </field>
            <field name="roughage" kind="boolean">
              <val>false</val>
            </field>
            <field name="dm_content" kind="double" unit="kg/kg">
              <val>0.879999995231628</val>
            </field>
            <field name="dmd" kind="double">
              <val>0.800000011920929</val>
            </field>
            <field name="me_content" kind="double" unit="MJ/kg">
              <val>13.3000001907349</val>
            </field>
            <field name="cp_conc" kind="double" unit="kg/kg">
              <val>0.319999992847443</val>
            </field>
            <field name="prot_dg" kind="double" unit="kg/kg">
              <val>0.75</val>
            </field>
            <field name="p_conc" kind="double" unit="kg/kg">
              <val>0.00419999985024333</val>
            </field>
            <field name="s_conc" kind="double" unit="kg/kg">
              <val>0.00260000000707805</val>
            </field>
            <field name="ee_conc" kind="double" unit="kg/kg">
              <val>0.0599999986588955</val>
            </field>
            <field name="adip2cp" kind="double" unit="kg/kg">
              <val>0.0299999993294477</val>
            </field>
            <field name="ash_alk" kind="double" unit="mol/kg">
              <val>0.400000005960464</val>
            </field>
            <field name="max_passage" kind="double" unit="kg/kg">
              <val>0</val>
            </field>
          </element>
          <element>
            <field name="name" kind="string">
              <val>Wheat</val>
            </field>
            <field name="stored" kind="double" unit="kg">
              <val>0</val>
            </field>
            <field name="roughage" kind="boolean">
              <val>false</val>
            </field>
            <field name="dm_content" kind="double" unit="kg/kg">
              <val>0.889999985694885</val>
            </field>
            <field name="dmd" kind="double">
              <val>0.899999976158142</val>
            </field>
            <field name="me_content" kind="double" unit="MJ/kg">
              <val>13.8000001907349</val>
            </field>
            <field name="cp_conc" kind="double" unit="kg/kg">
              <val>0.140000000596046</val>
            </field>
            <field name="prot_dg" kind="double" unit="kg/kg">
              <val>0.9200000166893</val>
            </field>
            <field name="p_conc" kind="double" unit="kg/kg">
              <val>0.00380000006407499</val>
            </field>
            <field name="s_conc" kind="double" unit="kg/kg">
              <val>0.00139999995008111</val>
            </field>
            <field name="ee_conc" kind="double" unit="kg/kg">
              <val>0.0199999995529652</val>
            </field>
            <field name="adip2cp" kind="double" unit="kg/kg">
              <val>0.0199999995529652</val>
            </field>
            <field name="ash_alk" kind="double" unit="mol/kg">
              <val>0.180000007152557</val>
            </field>
            <field name="max_passage" kind="double" unit="kg/kg">
              <val>0.200000002980232</val>
            </field>
          </element>
        </init>
        <init name="paddock_list" kind="string" array="T" />
      </initsection>
    </Supplement>
    <TextOutput name="Daily">
      <initsection>
        <init name="published_events" array="T" />
        <init name="subscribed_events" array="T" />
        <init name="driver_connections" array="T" />
        <init name="filename" kind="string">
          <val>Wether in pasture crop rotation_Daily.out</val>
        </init>
        <init name="interval" kind="integer4">
          <val>1</val>
        </init>
        <init name="intervalunit" kind="string">
          <val>day</val>
        </init>
        <init name="outputs" array="T">
          <element>
            <field name="varname" kind="string">
              <val>number_all</val>
            </field>
            <field name="alias" kind="string">
              <val>number_all</val>
            </field>
            <field name="aggreg" kind="string">
              <val />
            </field>
            <field name="decplaces" kind="integer4">
              <val>0</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>Deaths_all</val>
            </field>
            <field name="alias" kind="string">
              <val>Deaths_all</val>
            </field>
            <field name="aggreg" kind="string">
              <val>total</val>
            </field>
            <field name="decplaces" kind="integer4">
              <val>0</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>wt_change_all</val>
            </field>
            <field name="alias" kind="string">
              <val>wt_change_all</val>
            </field>
            <field name="aggreg" kind="string">
              <val />
            </field>
            <field name="decplaces" kind="integer4">
              <val>3</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>weight_all</val>
            </field>
            <field name="alias" kind="string">
              <val>weight_all</val>
            </field>
            <field name="aggreg" kind="string">
              <val />
            </field>
            <field name="decplaces" kind="integer4">
              <val>2</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>cond_score_all</val>
            </field>
            <field name="alias" kind="string">
              <val>cond_score_all</val>
            </field>
            <field name="aggreg" kind="string">
              <val />
            </field>
            <field name="decplaces" kind="integer4">
              <val>2</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>past_intake_all:weight</val>
            </field>
            <field name="alias" kind="string">
              <val>Past_intake_(kg)</val>
            </field>
            <field name="aggreg" kind="string">
              <val />
            </field>
            <field name="decplaces" kind="integer4">
              <val>3</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>supp_intake_all:weight</val>
            </field>
            <field name="alias" kind="string">
              <val>Supp_intake_(kg)</val>
            </field>
            <field name="aggreg" kind="string">
              <val />
            </field>
            <field name="decplaces" kind="integer4">
              <val>3</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>suppFedKg</val>
            </field>
            <field name="alias" kind="string">
              <val>Supp_fed</val>
            </field>
            <field name="aggreg" kind="string">
              <val />
            </field>
            <field name="decplaces" kind="integer4">
              <val>2</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>fleece_wt_all</val>
            </field>
            <field name="alias" kind="string">
              <val>fleece_wt_all</val>
            </field>
            <field name="aggreg" kind="string">
              <val />
            </field>
            <field name="decplaces" kind="integer4">
              <val>2</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>fibre_diam_all</val>
            </field>
            <field name="alias" kind="string">
              <val>fibre_diam_all</val>
            </field>
            <field name="aggreg" kind="string">
              <val />
            </field>
            <field name="decplaces" kind="integer4">
              <val>2</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>supplement.stores[2]:stored</val>
            </field>
            <field name="alias" kind="string">
              <val>Stored</val>
            </field>
            <field name="aggreg" kind="string">
              <val />
            </field>
            <field name="decplaces" kind="integer4">
              <val>2</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>number</val>
            </field>
            <field name="alias" kind="string">
              <val>number</val>
            </field>
            <field name="aggreg" kind="string">
              <val />
            </field>
            <field name="decplaces" kind="integer4">
              <val>0</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>age</val>
            </field>
            <field name="alias" kind="string">
              <val>age</val>
            </field>
            <field name="aggreg" kind="string">
              <val />
            </field>
            <field name="decplaces" kind="integer4">
              <val>0</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>paddock</val>
            </field>
            <field name="alias" kind="string">
              <val>paddock</val>
            </field>
            <field name="aggreg" kind="string">
              <val />
            </field>
            <field name="decplaces" kind="integer4">
              <val>0</val>
            </field>
          </element>
        </init>
        <init name="summary_file" kind="string">
          <val />
        </init>
        <init name="apsim_format" kind="boolean">
          <val>true</val>
        </init>
        <init name="title" kind="string">
          <val>ApsimVersion = 7.10
Title = Wether in pasture crop rotation_Daily.out</val>
        </init>
        <init name="outputfrequency" kind="string" array="T">
          <val>post</val>
        </init>
        <init name="dateformat" kind="string">
          <val>dd/MM/yyyy</val>
        </init>
      </initsection>
    </TextOutput>
    <TextOutput name="Monthly">
      <initsection>
        <init name="published_events" array="T" />
        <init name="subscribed_events" array="T" />
        <init name="driver_connections" array="T" />
        <init name="filename" kind="string">
          <val>Wether in pasture crop rotation_Monthly.out</val>
        </init>
        <init name="interval" kind="integer4">
          <val>1</val>
        </init>
        <init name="intervalunit" kind="string">
          <val>month</val>
        </init>
        <init name="outputs" array="T">
          <element>
            <field name="varname" kind="string">
              <val>number_all</val>
            </field>
            <field name="alias" kind="string">
              <val>number_all</val>
            </field>
            <field name="aggreg" kind="string">
              <val />
            </field>
            <field name="decplaces" kind="integer4">
              <val>0</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>Deaths_all</val>
            </field>
            <field name="alias" kind="string">
              <val>Deaths_total</val>
            </field>
            <field name="aggreg" kind="string">
              <val>total</val>
            </field>
            <field name="decplaces" kind="integer4">
              <val>0</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>stock_sale_number</val>
            </field>
            <field name="alias" kind="string">
              <val>Sale_number</val>
            </field>
            <field name="aggreg" kind="string">
              <val>max</val>
            </field>
            <field name="decplaces" kind="integer4">
              <val>0</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>stock_sale_weight</val>
            </field>
            <field name="alias" kind="string">
              <val>Sale_weight</val>
            </field>
            <field name="aggreg" kind="string">
              <val>max</val>
            </field>
            <field name="decplaces" kind="integer4">
              <val>2</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>stock_sale_cond_score</val>
            </field>
            <field name="alias" kind="string">
              <val>Sale_CS</val>
            </field>
            <field name="aggreg" kind="string">
              <val>max</val>
            </field>
            <field name="decplaces" kind="integer4">
              <val>1</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>stock_buy_number</val>
            </field>
            <field name="alias" kind="string">
              <val>Purchased</val>
            </field>
            <field name="aggreg" kind="string">
              <val>max</val>
            </field>
            <field name="decplaces" kind="integer4">
              <val>0</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>stock_buy_weight</val>
            </field>
            <field name="alias" kind="string">
              <val>Purchased_weight</val>
            </field>
            <field name="aggreg" kind="string">
              <val>max</val>
            </field>
            <field name="decplaces" kind="integer4">
              <val>2</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>stock_buy_cond_score</val>
            </field>
            <field name="alias" kind="string">
              <val>Purchased_CS</val>
            </field>
            <field name="aggreg" kind="string">
              <val>max</val>
            </field>
            <field name="decplaces" kind="integer4">
              <val>1</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>cull_sale_number</val>
            </field>
            <field name="alias" kind="string">
              <val>Culls_sold</val>
            </field>
            <field name="aggreg" kind="string">
              <val>max</val>
            </field>
            <field name="decplaces" kind="integer4">
              <val>0</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>cull_sale_weight</val>
            </field>
            <field name="alias" kind="string">
              <val>Culls_weight</val>
            </field>
            <field name="aggreg" kind="string">
              <val>max</val>
            </field>
            <field name="decplaces" kind="integer4">
              <val>2</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>cull_sale_cond_score</val>
            </field>
            <field name="alias" kind="string">
              <val>Cull_CS</val>
            </field>
            <field name="aggreg" kind="string">
              <val>max</val>
            </field>
            <field name="decplaces" kind="integer4">
              <val>1</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>NumberShorn</val>
            </field>
            <field name="alias" kind="string">
              <val>Number_shorn</val>
            </field>
            <field name="aggreg" kind="string">
              <val>max</val>
            </field>
            <field name="decplaces" kind="integer4">
              <val>0</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>ShornFleece</val>
            </field>
            <field name="alias" kind="string">
              <val>ShornFleece_(greasy_kg)</val>
            </field>
            <field name="aggreg" kind="string">
              <val>max</val>
            </field>
            <field name="decplaces" kind="integer4">
              <val>2</val>
            </field>
          </element>
          <element>
            <field name="varname" kind="string">
              <val>ShornFibre</val>
            </field>
            <field name="alias" kind="string">
              <val>ShornFibre(micron)</val>
            </field>
            <field name="aggreg" kind="string">
              <val>max</val>
            </field>
            <field name="decplaces" kind="integer4">
              <val>1</val>
            </field>
          </element>
        </init>
        <init name="summary_file" kind="string">
          <val />
        </init>
        <init name="apsim_format" kind="boolean">
          <val>true</val>
        </init>
        <init name="title" kind="string">
          <val>ApsimVersion = 7.10
Title = Wether in pasture crop rotation_Monthly.out</val>
        </init>
        <init name="outputfrequency" kind="string" array="T">
          <val>post</val>
        </init>
        <init name="dateformat" kind="string">
          <val>dd/MM/yyyy</val>
        </init>
      </initsection>
    </TextOutput>
    <Graph name="Intake">
      <Legend>
        <CheckedTitles> Past_intake_(kg)</CheckedTitles>
        <CheckedTitles> Supp_intake_(kg)</CheckedTitles>
      </Legend>
      <Plot>
        <SeriesType>Solid line</SeriesType>
        <PointType>None</PointType>
        <colour>
        </colour>
        <X>Date</X>
        <Y>Past_intake_(kg)</Y>
        <Y>Supp_intake_(kg)</Y>
        <YRight>SuppFed</YRight>
        <GDApsimFileReader name="ApsimFileReader">
          <FileName>%apsim%\Examples\Wether in pasture crop rotation_Daily.out</FileName>
        </GDApsimFileReader>
      </Plot>
    </Graph>
    <Graph name="Weights">
      <Legend>
        <CheckedTitles> weight_all</CheckedTitles>
        <CheckedTitles> cond_score_all</CheckedTitles>
      </Legend>
      <Plot>
        <SeriesType>Solid line</SeriesType>
        <PointType>None</PointType>
        <colour>
        </colour>
        <X>Date</X>
        <Y>weight_all</Y>
        <YRight>cond_score_all</YRight>
        <GDApsimFileReader name="ApsimFileReader">
          <FileName>%apsim%\Examples\Wether in pasture crop rotation_Daily.out</FileName>
        </GDApsimFileReader>
      </Plot>
    </Graph>
    <Cashbook description="Gross Margin summary">
      <initsection>
        <init name="published_events" array="T" />
        <init name="subscribed_events" array="T" />
        <init name="driver_connections" array="T" />
        <init name="reset_day" kind="integer4">
          <val>1</val>
        </init>
        <init name="reset_month" kind="integer4">
          <val>7</val>
        </init>
        <init name="report_period" kind="integer4">
          <val>12</val>
        </init>
        <init name="init_cash" kind="double">
          <val>0</val>
        </init>
        <init name="discount" kind="double">
          <val>0</val>
        </init>
        <init name="income" array="T">
          <element>
            <field name="name" kind="string">
              <val>wether_sales</val>
            </field>
            <field name="full_name" kind="string">
              <val>Cast for age animal sales</val>
            </field>
            <field name="units" kind="string">
              <val>No.</val>
            </field>
            <field name="price" kind="string">
              <val>weight * wether_price * 0.01 *  Dressing[cs] + skin_price</val>
            </field>
            <field name="params" kind="string" array="T">
              <val>weight</val>
              <val>cs</val>
            </field>
          </element>
          <element>
            <field name="name" kind="string">
              <val>lamb_sales</val>
            </field>
            <field name="full_name" kind="string">
              <val>Lamb sales</val>
            </field>
            <field name="units" kind="string">
              <val>No.</val>
            </field>
            <field name="price" kind="string">
              <val>weight * lamb_price * 0.01*  Dressing[cs] + skin_price</val>
            </field>
            <field name="params" kind="string" array="T">
              <val>weight</val>
              <val>cs</val>
            </field>
          </element>
          <element>
            <field name="name" kind="string">
              <val>wool_sales</val>
            </field>
            <field name="full_name" kind="string">
              <val>Wool sales</val>
            </field>
            <field name="units" kind="string">
              <val>kg CFW</val>
            </field>
            <field name="price" kind="string">
              <val>0.01 * Fleece[microns]</val>
            </field>
            <field name="params" kind="string" array="T">
              <val>microns</val>
            </field>
          </element>
          <element>
            <field name="name" kind="string">
              <val>wheat_sales</val>
            </field>
            <field name="full_name" kind="string">
              <val>Wheat sales</val>
            </field>
            <field name="units" kind="string">
              <val>tonnes</val>
            </field>
            <field name="price" kind="string">
              <val>wheat_price</val>
            </field>
            <field name="params" kind="string" array="T" />
          </element>
        </init>
        <init name="expenses" array="T">
          <element>
            <field name="name" kind="string">
              <val>replacements</val>
            </field>
            <field name="full_name" kind="string">
              <val>Replacements</val>
            </field>
            <field name="units" kind="string">
              <val>No.</val>
            </field>
            <field name="price" kind="string">
              <val>90.0</val>
            </field>
            <field name="params" kind="string" array="T">
              <val>weight</val>
              <val>cs</val>
            </field>
          </element>
          <element>
            <field name="name" kind="string">
              <val>shearing</val>
            </field>
            <field name="full_name" kind="string">
              <val>Shearing</val>
            </field>
            <field name="units" kind="string">
              <val>No.</val>
            </field>
            <field name="price" kind="string">
              <val>rate</val>
            </field>
            <field name="params" kind="string" array="T">
              <val>rate</val>
            </field>
          </element>
          <element>
            <field name="name" kind="string">
              <val>transport</val>
            </field>
            <field name="full_name" kind="string">
              <val>Transport cost</val>
            </field>
            <field name="units" kind="string">
              <val>No.</val>
            </field>
            <field name="price" kind="string">
              <val>4.0</val>
            </field>
            <field name="params" kind="string" array="T" />
          </element>
        </init>
        <init name="constants" array="T">
          <element>
            <field name="name" kind="string">
              <val>wether_price</val>
            </field>
            <field name="value" kind="double">
              <val>400</val>
            </field>
            <field name="description" kind="string">
              <val />
            </field>
          </element>
          <element>
            <field name="name" kind="string">
              <val>lamb_price</val>
            </field>
            <field name="value" kind="double">
              <val>600</val>
            </field>
            <field name="description" kind="string">
              <val />
            </field>
          </element>
          <element>
            <field name="name" kind="string">
              <val>skin_price</val>
            </field>
            <field name="value" kind="double">
              <val>10</val>
            </field>
            <field name="description" kind="string">
              <val />
            </field>
          </element>
          <element>
            <field name="name" kind="string">
              <val>wheat_price</val>
            </field>
            <field name="value" kind="double">
              <val>350</val>
            </field>
            <field name="description" kind="string">
              <val />
            </field>
          </element>
        </init>
        <init name="grids" array="T">
          <element>
            <field name="name" kind="string">
              <val>Fleece</val>
            </field>
            <field name="row_limits" kind="double" array="T" />
            <field name="col_limits" kind="double" array="T">
              <val>19</val>
              <val>21</val>
              <val>23</val>
              <val>25</val>
              <val>27</val>
              <val>28</val>
            </field>
            <field name="values" array="T">
              <element kind="double" array="T">
                <val>2200</val>
                <val>1900</val>
                <val>1723</val>
                <val>1183</val>
                <val>1046</val>
                <val>800</val>
                <val>550</val>
              </element>
            </field>
          </element>
          <element>
            <field name="name" kind="string">
              <val>Dressing</val>
            </field>
            <field name="row_limits" kind="double" array="T" />
            <field name="col_limits" kind="double" array="T">
              <val>1</val>
              <val>2</val>
              <val>3</val>
              <val>4</val>
              <val>5</val>
            </field>
            <field name="values" array="T">
              <element kind="double" array="T">
                <val>0.400000005960464</val>
                <val>0.409999996423721</val>
                <val>0.430000007152557</val>
                <val>0.449999988079071</val>
                <val>0.469999998807907</val>
                <val>0.490000009536743</val>
              </element>
            </field>
          </element>
        </init>
        <init name="currency" kind="string">
          <val>AUD</val>
        </init>
      </initsection>
    </Cashbook>
    <memo name="Cashbook notes">

This cash book gross margin summary can be found in an external text file (Wether in pasture crop rotation_cashbook.txt) that is tab delimited.</memo>
  </simulation>
</folder>