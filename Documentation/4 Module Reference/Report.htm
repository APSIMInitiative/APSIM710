<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>The APSIM Report Module (REPORT) </title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../ApsimWebStyle.css" rel="stylesheet" type="text/css">
</head>

<body>
<p class="Title1">The APSIM Report Module (REPORT)</p>
<p class="Normal">&nbsp;</p>
<p class="Title2">Operation</p>
<p class="Normal">The APSIM report module creates a columnar output file to record data from an APSIM simulation. Output files contain data in columns with headers specifying variable names and units. There is an option to create the files in CSV (comma delimited) format, for direct spreadsheet application.</p>
<p class="Normal">&nbsp;</p>
<p class="Title2">Parameter file settings</p>
<p class="Normal">The APSIM report module can report the state of any variable available to the system, from any module. The user can specify various reporting parameters and the method for doing this is similar to the initialisation of parameters in any other module.</p>
<p class="Normal">&nbsp;</p>
<p class="Normal">The settings available to the user are as follows:-</p>
<p class="Normal">&nbsp;</p>
<table cellspacing="0" cellpadding="0">
  <tr>
    <td width="300" valign="top"><p class="Normal">Keyword = Setting </p></td>
    <td width="359" valign="top"><p class="Normal">Description </p></td>
  </tr>
  <tr>
    <td width="300" valign="top"><p class="Normal">Title = &lt;string&gt; </p></td>
    <td width="359" valign="top"><p class="Normal">The title of the simulation </p></td>
  </tr>
  <tr>
    <td width="300" valign="top"><p class="Normal">outputfile = filename </p></td>
    <td width="359" valign="top"><p class="Normal">Name of the output file. This text file will contain output data in named columns ready for further analysis and inspection. </p></td>
  </tr>
  <tr>
    <td width="300" valign="top"><p class="Normal">Format = csv </p></td>
    <td width="359" valign="top"><p class="Normal"> (Optional) The inclusion of this line will result in the output file being created in CSV (comma separated variable) format. If this line is absent, then a standard text format is the default. </p></td>
  </tr>
  <tr>
    <td width="300" valign="top"><p class="Normal">NAString = &lt;string&gt; </p></td>
    <td width="359" valign="top"><p class="Normal">(Optional) String to write as a missing value (default is "????") </p></td>
  </tr>
  <tr>
    <td width="300" valign="top"><p class="Normal">Precision = value </p></td>
    <td width="359" valign="top"><p class="Normal">(Optional) Floating point numbers are written to this many decimal places. (default is 3)</p></td>
  </tr>
</table>
<p class="Normal">&nbsp;</p>
<table cellspacing="0" cellpadding="0">
  <tr>
    <td width="300" valign="top"><p class="Normal">Variable = name [as alias] 
    [format formatstring]</p></td>
    <td width="359" valign="top"><p class="Normal">Name of variable to be obtained and reported to outputfile, 
    with optional alias and date formatting string</p></td>
  </tr>
</table>
<p class="Normal">&nbsp;</p>
<p class="Normal">The output file will be overwritten without warning. </p>
<p class="Normal">&nbsp;</p>
<p class="Normal">The following example describes the many powerful aspects of the APSIM reporting module. In the control file we could have a line such as</p>
<p class="Normal">&nbsp;</p>
<p class="Code">module = report report.par[all_treatments] report.par[treatment1]</p>
<p class="Normal">&nbsp;</p>
<p class="Normal">This shows that the report module's parameter data is in the file “report.par” in two user defined data groupings:- one group for data specific to treatment one and another group for data relevant to all treatments.</p>
<p class="Normal">&nbsp;</p>
<p class="Normal">In the file “report.par” we would then have the following sections:-</p>
<p class="Normal">&nbsp;</p>
<p class="Code">[treatment1.report.parameters] </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;outputfile &nbsp;&nbsp;&nbsp;&nbsp;= c:\apsim\outputs\treat1.out </p>
<p class="Code">[treatment2.report.parameters] </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;outputfile &nbsp;&nbsp;&nbsp;&nbsp;= c:\apsim\outputs\treat2.out</p>
<p class="Code">&nbsp;</p>
<p class="Code">[all_treatments.report.parameters] </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;variable = year </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;variable = clock.day </p>
<p class="Code">&nbsp;&nbsp;&nbsp; variable = clock.today as date format dd/mm/yyyy</p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;variable = tracker.<a href="mailto:sum@rain">sum@rain </a> as tot_rain </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;variable = soilwat2.sw </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;variable = soilwat2.sw_dep(1) as sw(1) </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;variable = soilwat2.sw_dep() as totsw </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;variable = wheat.yield as grn_yield</p>
<p class="Normal">&nbsp;</p>
<p class="Normal">Here we specify a unique output file for each treatment, but the list of outputs will be the same for simulation of all treatments.</p>
<p class="Normal">&nbsp;</p>
<p class="Normal">Several reporting features are included in the above example.</p>
<ul>
  <li class="Normal">The module name (the ‘ x ' in ‘ x.y ') of the reported variable is optional. An error will occur if the module name is omitted and more than one variable of the same name is present the system. </li>
  <li class="Normal">The day and year are output as supplied by the clock module. No alias is used and so the column headings in the output file will be “day” and “year”. This is the simplest output specification. </li>
  <li class="Normal">Several of the output variables have been assigned aliases. For example the variable “yield” from the wheat module is given the alias “grn_yield” and this alias will be what is used in the column header of the output file. If no alias is desired then a single dash “-” is placed in the row to signify this. </li>
  <li class="Normal">The variable “sw” is an array. It cannot be identified as such by simply viewing the reporting parameters but the report module will recognise this when data is sent to it. The output file will record sw using a column for each element in the array. </li>
  <li class="Normal">The variable “sw_dep” is also an array. The example has two outputs for this variable. The first use specifies that only the first element of the array is to be output. The second use has no array index in between the brackets. In this case all elements in the array will be added together to find a sum total of the array and this will be output in a single column in the output file. </li>
  <li class="Normal">The variable 'today' is being output with an alias of 
  'date' and formatting of dd/mm/yyyy. The format string can contain any 
  combination of d, dd, mm, mmm, mmmmmm, yy, yyyy in any order and with any sort 
  of delimiter character e.g. '/' or '-' or '_'</li>
</ul>
<p class="Title2">Setting reporting frequency</p>
<p class="Normal">APSIM report carries its flexibility into the area of reporting frequency. There are two main ways to tell the REPORT module to do an output.</p>
<p class="Normal">&nbsp;</p>
<p class="Normal">The first is to simply specify the APSIM events that should be used to trigger a line of output in the output file. This is done by using the ‘OutputFrequency' parameter. E.g.</p>
<p class="Normal">&nbsp;</p>
<p class="Code">[longterm.report.parameters] </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;Outputfile = grower.yearlyout </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;OutputFrequency = harvesting </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;variable = clock.year as sow_year </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;variable = clock.dd/mm/yyyy as date </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;variable = clock.day </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;variable = manager.wet_yield </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;variable = manager.n_available_to_date</p>
<p class="Normal">&nbsp;</p>
<p class="Normal">In this sample, a line of output will be written immediately the REPORT module receives a ‘harvesting' event from any module in APSIM. The event name can also be qualified by a module name by using the format ‘modulename.eventname'. Multiple events may be specified by separating them with spaces.</p>
<p class="Normal">&nbsp;</p>
<p class="Normal">The second method involves manually instructing the REPORT module to do an output, usually by using the MANAGE.</p>
<p class="Normal">&nbsp;</p>
<p class="Normal">The report module accepts a “do_output” action in a message “report do_output” which has no data, and upon receipt, writes the variable values to the output file.</p>
<p class="Normal">&nbsp;</p>
<p class="Normal">For example, the manager may contain the following</p>
<p class="Normal">&nbsp;</p>
<p class="Code">if (day = 100) then </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;report do_output </p>
<p class="Code">endif</p>
<p class="Normal">&nbsp;</p>
<p class="Normal">tells the report module to output on day 100.</p>
<p class="Normal">&nbsp;</p>
<p class="Normal">Or, by putting the report directive with the harvesting criteria in the management file we automatically get an output whenever harvesting takes place.</p>
<p class="Normal">&nbsp;</p>
<p class="Code">if (crop.stage_name = ‘maturity') then </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;report do_output </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;crop harvest </p>
<p class="Code">endif</p>
<p class="Normal">&nbsp;</p>
<p class="Normal">The simplest management reporting criteria would he</p>
<p class="Normal">&nbsp;</p>
<p class="Code">[xxx.manager.start_of_day] </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;report do_output</p>
<p class="Normal">&nbsp;</p>
<p class="Normal">on its own. The absence of criteria here means that reporting will occur every single timestep.</p>
<p class="Normal">&nbsp;</p>
<p class="Normal">Another management reporting option is the</p>
<p class="Normal">&nbsp;</p>
<p class="Code">report do_end_day_output</p>
<p class="Normal">&nbsp;</p>
<p class="Normal">This option forces the output to operate at the “end of the day” regardless of which manager section it appears as opposed to the standard report do_output which reports immediately.</p>
<p class="Normal">&nbsp;</p>
<p class="Title2">Instantiation of the Report module </p>
<p class="Normal">Like all other APSIM modules the report module can be instantiated to allow any number of output files to be created. By specifying an instantiated report module in the control file, you are able to create more output files and populate them with output from your simulation. An example “con” file may appear as;</p>
<p class="Normal">&nbsp;</p>
<p class="Code">[apsim.sample_report] </p>
<p class="Code">Module=clock report.par[sample]%apsuite\apsim\clock\clock.ini[standard] </p>
<p class="Code">Module=report (report1) report.par [sample] </p>
<p class="Code">Module=report (report2) report.par [sample] </p>
<p class="Code">Module=met DALBY.MET [weather] </p>
<p class="Code">Module=manager report.par [sample] </p>
<p class="Normal">&nbsp;</p>
<p class="Normal">This can be referenced in the “report.par” file as;</p>
<p class="Normal">&nbsp;</p>
<p class="Code">[sample.report1.parameters] </p>
<p class="Code">title = Report Instantiation Sample Simulation file 1 </p>
<p class="Code">outputfile = report1.out </p>
<p class="Code">variable = clock.day </p>
<p class="Code">variable = clock.year </p>
<p class="Code">variable = met.rain </p>
<p class="Code">&nbsp;</p>
<p class="Code">[sample.report2.parameters] </p>
<p class="Code">title = Report Instantiation Sample Simulation file 2 </p>
<p class="Code">outputfile = report2.out</p>
<p class="Code">&nbsp;</p>
<p class="Code">variable = clock.day </p>
<p class="Code">variable = clock.year </p>
<p class="Code">variable = wheat.yield </p>
<p class="Normal">&nbsp;</p>
<p class="Code">[sample.manager.end_of_day] </p>
<p class="Code">if days_since_last_report = 5 then </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;report1 do_output </p>
<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;report2 do_output </p>
<p class="Code">endif </p>
</body>
</html>