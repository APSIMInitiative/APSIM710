[all.clock.parameters]
! Start and end date of run (day number of year and year)
start_date=1/1/1988
end_date=31/1/1988

[all.report.parameters]
outputfile =tcllink.out
variable = clock.day
variable = clock.year
variable = manager.test

[all.manager.init]
test = 0

[all.manager.process]
report do_output

[all.SummaryFile.parameters]
summaryfile = tcllink.sum

[all.log.parameters]
debug_output = on
logfile = tcllink.log

[all.tcllink.process]
# Shows the get/set interface
apsimSet manager.test [apsimGet clock.day]

[dbg.tcllink.init]
# A 4 command debugger:
package require Tk
wm withdraw .

package require tkcon
tkcon show
tkcon title "Apsim Debugging Console"
puts "Commands:"
puts " 'c'       - Continue"
puts " 's <n>'   - Step n days (default 1)"
puts " 'p <what>'- Print apsim variable"
puts " 'b <cond>'- Set break condition"
set steps 1
update

proc c {}      {uplevel #0 set steps -1}  ;# Continue
proc s {{n 1}} {uplevel #0 set steps $n}  ;# Step n days
proc p {var}   {apsimGet $var}            ;# print apsim variable
proc b {cond}  {global Conds; lappend Conds $cond} ;# set break condition
set Conds {}

# Link an apsim variable
proc link {apsimName tclName} {
   global $tclName; set $tclName {}
   trace variable $tclName r "getLinked $apsimName"
   trace variable $tclName w "setLinked $apsimName"
}
proc getLinked {a n1 n2 op} {uplevel #0 set $n1 [apsimGet $a]}
proc setLinked {a n1 n2 op} {apsimSet $a $n1}

[dbg.tcllink.process]
update
foreach cond $Conds {
  if {[expr $cond]} {
    set steps 1
  }
}
incr steps -1
if {$steps == 0} {tkwait variable steps}

[dbg.tcllink.exit]
destroy .

[catchEvent.tcllink.init]
# Demonstrates catching events at the "event" level

# The event handler procedure
proc eventHandler {args} {
    apsimWriteToSummaryFile "got event"
    apsimWriteToSummaryFile "args = $args"
}

# Set the handler(s)
apsimRegisterEvent sowing "eventHandler sowing"
apsimRegisterEvent harvesting "eventHandler harvesting"

[sendEvent.tcllink.init]
source $apsuite/Model/TclLink/CIDataTypes.tcl
set incomingVariant {}

proc sendEventHandler {args} {
    apsimWriteToSummaryFile "got event"
    apsimWriteToSummaryFile "args = $args"

    global incomingVariant
    puts "incomingVariant:length=[string bytelength $incomingVariant] bytes"
    foreach {name value} [unpack_Variant $incomingVariant] {
       regsub -all "'" $name {} name
       regsub -all "'" $value {} value
       puts "name=[string tolower $name] value=[string tolower $value]"
    }   
}

apsimRegisterEvent blork "sendEventHandler"

[sendEvent.tcllink.process]

if {[apsimGet day] == 305 && [apsimGet year] == 1989 } {
   apsimSendMessage sorghum sow {cultivar early} {plants 10} {sowing_depth 30} {tiller_no_fertile 0} {row_spacing 1.0}
}

if {[apsimGet sorghum.StageName] == "harvest_ripe" || [apsimGet sorghum.plant_status] == "dead" } {

   # Send a "kill crop" message (ie a non-variant argument)
   apsimSendMessage sorghum kill_crop { KillFraction 0.5 }

   # These are "null argument" messages
   apsimSendMessage sorghum harvest { Remove 1.0 }
   apsimSendMessage sorghum end_crop
   
   # By default, tcl messages are Apsim Variants - no fixed structure 
   # I'm gonna sit right down and write myself a message...
   apsimSendMessage tcllink blork {a a} {b 2} {c defg} {d {2.3 bb 42}}
}


[catchEvent2.tcllink.init]
# Demonstrates catching events at the "message" level

# Initialisation. delete output file if present and get library functions.
file delete catchEvent2.out
source [file dirname $tcl_library]/apsimDatatypes.tcl

# A message hook. Look for "sow" messages and write out their payload.
proc spy {args} {
  foreach arg $args {array set z $arg}
  # Is this a sow message?
  if {[info exists z(name)] && $z(name) == "sow"} {
     set fp [open catchEvent2.out a]
     puts $fp "caught sow event"
     # unpack the data structure that came with this message
     foreach {name value} [unpack_MessageData $z(data)] {
       if {"id" != "$name"} { ;# message id is usually a (random) memory location - ignore it for day to day testing
         puts $fp "\"$name\",\"$value\""
       }
     }
     close $fp
  }
}

# Set the hook
apsimCatchMessages spy

[profileMessages.tcllink.init]
# Build a profile of messages we deal with. Store messages in an array, and write out on exit.

proc spy {args} {
  foreach arg $args {array set z $arg}
  if {[info exists z(type)]} {
    set type $z(type)
    global typesSeen
    if {[info exists typesSeen($type)]} {
       incr typesSeen($type)
    } else {
       set typesSeen($type) 1
    }
  }
}
apsimCatchMessages spy

[profileMessages.tcllink.exit]

set fp [open profileMessages.out w]
foreach {name value} [array get typesSeen] {
   puts $fp "$name:  $value"
}
close $fp

[profilePlant.tcllink.init]
# Build a profile of messages we deal with. Store messages in an array, and write out on exit.

proc spy {args} {
  foreach arg $args {array set z $arg}
  if {[info exists z(type)]} {
    set type $z(type)
    global typesSeen
    if {[info exists typesSeen($type)]} {
       incr typesSeen($type)
    } else {
       set typesSeen($type) 1
    }
  }
}
apsimCatchMessages spy

[profilePlant.tcllink.exit]

set fp [open profilePlant.out w]
foreach {name value} [array get typesSeen] {
   puts $fp "$name:  $value"
}
close $fp

[spyOnPlant.tcllink.init]
# Spy on plant messages 
source [file dirname $tcl_library]/apsimDatatypes.tcl

proc spy {args} {
  foreach arg $args {array set z $arg}
  if {[info exists z(type)]} {
    global fp
    puts $fp "-----------------"
    puts $fp "type=$z(type)"
    if {[info comm unpack_$z(type)] != "" && [info exists z(data)]} {
       foreach {name value} [unpack_$z(type) $z(data)] {
          puts $fp "$name=$value"
       }   
    } else {
       puts $fp "(No handler)"
    }
  }
}

set fp [open spyOnPlant.out w]
apsimCatchMessages spy

[spyOnPlant.tcllink.process]
# Turn on message hook
#if {[apsimGet day] == 296} {
#  apsimCatchMessages spy
#}  
#if {[apsimGet day] == 299} {
#  apsimCatchMessages ""
#}  

[spyOnPlant.tcllink.exit]
close $fp
