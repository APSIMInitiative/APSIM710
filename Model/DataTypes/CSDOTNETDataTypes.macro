##################################################
[file DOTNETDataTypes.cs]
// ------------------------------------------------------------------
// NB: Autogenerated. Do not modify manually.
// ------------------------------------------------------------------
using System;
using System.Collections;
using System.Runtime.InteropServices;
using CMPServices;

    //------ ApsimType ------
    public interface ApsimType
    {
        void pack(ref byte[] messageData);
        void unpack(byte[] messageData);
        uint memorySize();
        String DDML();
    }
    /// <summary>
    /// This class is used for generic access to pack and
    /// unpack methods for all descendant types.
    /// </summary>
    public class TypeInterpreter : ApsimType
    {
        protected TDDMLValue DDMLValue;
        public TypeInterpreter()
        {
            DDMLValue = new TDDMLValue(DDML(), "");
        }
        public virtual String DDML() { return "<type/>"; }
        public virtual void pack(ref byte[] messageData)
        {
            messageData = new byte[DDMLValue.sizeBytes()];
            DDMLValue.getData(ref messageData);
        }
        public virtual void pack(TTypedValue typedValue)
        {
            byte[] data = new byte[0];
            pack(ref data);
            typedValue.setData(data, (uint)data.Length, 0);
        }
        public virtual void packArrayOfStructures(TypeInterpreter[] items, TTypedValue typedValue)
        {
            typedValue.setElementCount((uint)items.Length);
            for (uint i = 1; i <= items.Length; i++)
            {
                items[i - 1].pack(typedValue.item(i));
            }
        }
        public virtual void unpack(byte[] messageData)
        {
            DDMLValue.setData(messageData, (uint)messageData.Length, 0);
        }
        public virtual void unpackStructure(TTypedValue typedValue)
        {
            byte[] b = new byte[typedValue.sizeBytes()];
            typedValue.getData(ref b);
            unpack(b);
        }
        public virtual uint memorySize()
        {
            return DDMLValue.sizeBytes();
        }
    }
    //------ NullType ------
    public class NullType : ApsimType
    {
        public void pack(ref byte[] MessageData)
        {
        }
        public void unpack(byte[] MessageData)
        {
        }
        public uint memorySize()
        {
            return 0;
        }
        public String DDML()
        {
            return "<type/>";
        }
    }
 
[foreach types.type]

      //------ [type.name] ------
      public class [type.name]Type : TypeInterpreter, ApsimType
      {
         [foreach type.field]
         public [field.cstype] [field.name];
         [endfor]
         public override void pack(ref byte[] messageData)
         {
            [foreach type.field]
            [if [field.arrayofstructures] = T]
            packArrayOfStructures([field.name], DDMLValue.member("[field.name]"));
            [elseif [field.structure] = T]
            [field.name].pack(DDMLValue.member("[field.name]"));
            [else]
            DDMLValue.member("[field.name]").setValue([field.name]);
            [endif]
            [endfor]
            messageData = new byte[DDMLValue.sizeBytes()];
            DDMLValue.getData(ref messageData);
         }
         public override void unpack(byte[] messageData)
         {
            DDMLValue.setData(messageData, (uint)messageData.Length, 0);        
            [foreach type.field]
            [if [field.arrayofstructures] = T]
            [field.name] = new [field.cstypebase][DDMLValue.member("[field.name]").count()];
            for (uint i = 1; i <= [field.name].Length; i++ )
            {
                [field.name][i-1] = new [field.cstypebase]();
                [field.name][i-1].unpackStructure(DDMLValue.member("[field.name]").item(i));
            }
            [elseif [field.structure] = T]
            [field.name].unpackStructure(DDMLValue.member("[field.name]"));
            [else]
            [field.name] = DDMLValue.member("[field.name]").as[field.cstypename]();
            [endif]
            [endfor]
         }
         public override String DDML()
         {
            return [type.csddml];
         }
      }
      public delegate void On[type.name]([type.name]Type Data);
[endfor]
[endfile]
